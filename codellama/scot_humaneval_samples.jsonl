{"task_id": "HumanEval/0", "completion": "from typing import List\n\n    def has_close_elements(numbers: List[float], threshold: float) -> bool:\n        sorted_numbers = sorted(numbers)\n        for i in range(len(sorted_numbers) - 1):\n            if abs(sorted_numbers[i] - sorted_numbers[i + 1]) < threshold:\n                return True\n        return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n    def separate_paren_groups(paren_string: str) -> List[str]:\n        groups = []\n        group = ''\n        level = 0\n        for ch in paren_string:\n            if ch == '(':\n                level += 1\n            elif ch == ')':\n                level -= 1\n            if level == 0:\n                groups.append(group)\n                group = ''\n            else:\n                group += ch\n        return groups\n\n    # Test the function\n    print(separate_paren_groups(\"(a)(b)(c)\"))  # Output: ['a', 'b', 'c']\n    print(separate_paren_groups(\"((a)(b))((c)(d))\"))  # Output: ['(a)(b)', '(c)(d)']"}
{"task_id": "HumanEval/2", "completion": "import math\n\ndef get_decimal_part(number):\n    return math.modf(number)[1]\n\n# Test the function\nprint(get_decimal_part(12.34))  # Output: 0.34"}
{"task_id": "HumanEval/3", "completion": "def will_balance_fall(operations):\n    balance = 0\n    for operation in operations:\n        if operation < 0:\n            if abs(operation) > balance:\n                return True\n            else:\n                balance += operation\n        else:\n            balance += operation\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_difference(numbers):\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(number - mean) for number in numbers]\n    mad = sum(absolute_differences) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "def join_numbers(numbers, delimeter):\n    result = []\n    for i in numbers:\n        result.append(i)\n        result.append(delimeter)\n    return result[:-1]"}
{"task_id": "HumanEval/6", "completion": "def max_depth(s: str) -> int:\n    \"\"\" Helper function to calculate the maximum depth of parentheses in a string. \"\"\"\n    depth = 0\n    max_depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n            if depth > max_depth:\n                max_depth = depth\n        elif ch == ')':\n            depth -= 1\n    return max_depth\n\ndef max_depth_all_groups(paren_string: str) -> list:\n    \"\"\" Function to calculate the maximum depth of parentheses in all groups of a string. \"\"\"\n    groups = paren_string.split()\n    return [max_depth(group) for group in groups]\n\n# Test the function\nparen_string = \"(()) (())\"\nprint(max_depth_all_groups(paren_string))  # Output: [2, 2]"}
{"task_id": "HumanEval/7", "completion": "def find_strings_with_substring(input_list, substring):\n    containing_strings = []\n    for string in input_list:\n        if substring in string:\n            containing_strings.append(string)\n    return containing_strings"}
{"task_id": "HumanEval/8", "completion": "def sum_and_product(numbers):\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return sum_numbers, product_numbers"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_values = []\n    current_max = None\n\n    for number in numbers:\n        if current_max is None:\n            current_max = number\n        elif number > current_max:\n            current_max = number\n        rolling_max_values.append(current_max)\n\n    return rolling_max_values"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef longest_palindrome(string):\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n# Test the function\nprint(longest_palindrome(\"abac\"))"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    # Validate the input strings\n    if not set(a).issubset('01') or not set(b).issubset('01'):\n        raise ValueError(\"Input strings should only contain '1's and '0's\")\n\n    # Convert the input strings into lists of integers\n    a_list = [int(x) for x in a]\n    b_list = [int(x) for x in b]\n\n    # Perform binary XOR on the lists\n    xor_list = [a_list[i] ^ b_list[i] for i in range(len(a_list))]\n\n    # Convert the list of integers back into a string\n    xor_string = ''.join(str(x) for x in xor_list)\n\n    return xor_string"}
{"task_id": "HumanEval/12", "completion": "def longest_string(strings):\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return b"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "def numbers_to_string(n):\n    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    return result.rstrip()"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(input_string):\n    distinct_characters = set()\n\n    for character in input_string:\n        lowercase_character = character.lower()\n        distinct_characters.add(lowercase_character)\n\n    return len(distinct_characters)\n\n# Test the function\ninput_string = \"Hello, World!\"\nprint(count_distinct_characters(input_string))  # Output: 9"}
{"task_id": "HumanEval/17", "completion": "def note_durations(input_string):\n    durations = []\n    notes = input_string.split()\n\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n\n    return durations"}
{"task_id": "HumanEval/18", "completion": "def count_substring(string, substring):\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n         if string[i:i+len(substring)] == substring:\n             count += 1\n    return count\n\n# Test the function\nstring = \"hello world, hello again\"\nsubstring = \"hello\"\nprint(count_substring(string, substring))  # Output: 2"}
{"task_id": "HumanEval/19", "completion": "\n\nThe code provided in the question is already complete and correct. It takes a string of numberals, sorts them in ascending order, and returns the sorted string."}
{"task_id": "HumanEval/20", "completion": "def find_closest_pair(numbers):\n    if len(numbers) <= 1:\n        return None\n\n    numbers.sort()\n    min_diff = float('inf')\n    pair = None\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            pair = (numbers[i], numbers[i + 1])\n\n    return pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_numbers(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n\n    rescaled_numbers = []\n    for num in numbers:\n        rescaled_num = (num - min_val) / range_val\n        rescaled_numbers.append(rescaled_num)\n\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: list) -> list:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers"}
{"task_id": "HumanEval/23", "completion": "def count_characters(string):\n    count = 0\n    for _ in string:\n        count += 1\n    return count\n\n# Test the function\nprint(count_characters(\"Hello, World!\"))  # Output: 13"}
{"task_id": "HumanEval/24", "completion": "def smallest_divisor(n):\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return None"}
{"task_id": "HumanEval/25", "completion": "def prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n# Test the function\nprint(prime_factors(315))  # Output: [3, 3, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef find_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Find all elements that occur more than once in a list of integers.\n    \"\"\"\n    duplicates = []\n    for num in numbers:\n        if numbers.count(num) > 1 and num not in duplicates:\n            duplicates.append(num)\n    return duplicates\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Remove all elements from the list that occur more than once and keep the order of the elements left the same as in the input.\n    \"\"\"\n    duplicates = find_duplicates(numbers)\n    result = []\n    for num in numbers:\n        if num not in duplicates:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def swap_case(string):\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\n# Test the function\nprint(swap_case('Hello World'))  # Output: hELLO wORLD"}
{"task_id": "HumanEval/28", "completion": "def concatenate_strings(strings):\n    result = \"\"\n    for s in strings:\n        result += s\n    return result"}
{"task_id": "HumanEval/29", "completion": "def filter_strings(strings, prefix):\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "\n\n    def get_positive(l: list):\n        positive_numbers = []\n        for num in l:\n            if num > 0:\n                positive_numbers.append(num)\n        return positive_numbers"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\ndef prime_fib(n):\n    count = 0\n    i = 1\n    while count < n:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            count += 1\n        i += 1\n    return fibonacci(i - 1)"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    fib1, fib2 = 0, 1\n    while n > 0:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib2):\n            n -= 1\n    return fib2"}
{"task_id": "HumanEval/33", "completion": "def sort_indices_divisible_by_three(input_list):\n    # Step 1: Create a new list to store the values at the indices that are divisible by three.\n    divisible_by_three_values = []\n\n    # Step 2: Iterate over the input list using a loop.\n    for i in range(len(input_list)):\n        # In each iteration, check if the current index is divisible by three.\n        if i % 3 == 0:\n            # If it is, append the value at that index to the new list.\n            divisible_by_three_values.append(input_list[i])\n\n    # Step 3: Sort the new list.\n    divisible_by_three_values.sort()\n\n    # Step 4: Iterate over the input list again using a loop.\n    sorted_index = 0\n    for i in range(len(input_list)):\n        # This time, if the current index is divisible by three,\n        if i % 3 == 0:\n            # replace the value at that index with the next value from the sorted list.\n            input_list[i] = divisible_by_three_values[sorted_index]\n            sorted_index += 1\n\n    # Step 5: Return the modified input list.\n    return input_list"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    unique_elements = []\n    for element in l:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return sorted(unique_elements)"}
{"task_id": "HumanEval/35", "completion": "\n\n    def find_max(lst):\n        max_val = None\n        for i in lst:\n            if max_val is None or i > max_val:\n                max_val = i\n        return max_val"}
{"task_id": "HumanEval/36", "completion": "def count_sevens(n: int) -> int:\n    def is_divisible_by_11_or_13(num: int) -> bool:\n        return num % 11 == 0 or num % 13 == 0\n\n    count = 0\n    for i in range(n):\n        if is_divisible_by_11_or_13(i):\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def rearrange_even_indices(arr):\n    if len(arr) < 2:\n        return arr\n    even_indices = [arr[i] for i in range(0, len(arr), 2)]\n    even_indices.sort()\n    arr_sorted = [None] * len(arr)\n    even_counter = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            arr_sorted[i] = even_indices[even_counter]\n            even_counter += 1\n        else:\n            arr_sorted[i] = arr[i]\n    return arr_sorted"}
{"task_id": "HumanEval/38", "completion": "def rearrange_string(s):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group to the original order. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n# Test the function\ns = \"abcdefgh\"\nprint(rearrange_string(s))  # Output: \"hgfedcba\""}
{"task_id": "HumanEval/39", "completion": "def find_largest_product(arr):\n    if len(arr) < 2:\n        return None\n    else:\n        max_product = arr[0] * arr[1]\n        min_product = arr[0] * arr[1]\n\n        for i in range(2, len(arr)):\n            temp_max = max_product\n            temp_min = min_product\n\n            max_product = max(arr[i], max(temp_max, temp_min * arr[i]))\n            min_product = min(arr[i], min(temp_max, temp_min * arr[i]))\n\n        return max_product\n\n# Test the function\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_largest_product(arr))  # Output: 72"}
{"task_id": "HumanEval/40", "completion": "def has_opposite(lst):\n    visited = set()\n    for element in lst:\n        if -element in visited:\n            return True\n        visited.add(element)\n    return False"}
{"task_id": "HumanEval/41", "completion": "def count_collisions(left_to_right_cars, right_to_left_cars):\n    collisions = 0\n    for left_car in left_to_right_cars:\n        for right_car in right_to_left_cars:\n            if left_car == right_car:\n                collisions += 1\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def increment_list(input_list):\n    return [x + 1 for x in input_list]\n\ndef palindrome_check(s):\n    s = s.lower()\n    s = ''.join(c for c in s if c.isalnum())\n    return s == s[::-1]\n\ndef longest_common_subsequence(s1, s2):\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if s1[i] == s2[j]:\n                dp[i][j] = dp[i + 1][j + 1] + 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n    i, j = 0, 0\n    res = []\n    while i < m and j < n:\n        if s1[i] == s2[j]:\n            res.append(s1[i])\n            i += 1\n            j += 1\n        elif dp[i + 1][j] >= dp[i][j + 1]:\n            i += 1\n        else:\n            j += 1\n    return ''.join(res)"}
{"task_id": "HumanEval/43", "completion": "def has_zero_sum_pair(lst):\n    seen = {}\n    for num in lst:\n        if num in seen:\n            return True\n        seen[-num] = None\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    # Convert the input number x to base 10\n    x_base_10 = int(str(x), base)\n\n    # Convert the base 10 number to the desired base\n    result = ''\n    while x_base_10 > 0:\n        result = str(x_base_10 % base) + result\n        x_base_10 //= base\n\n    # Return the string representation of the base converted number\n    return result if result else '0'\n\n# Test the function\nprint(change_base(1010, 2))  # Output: 1010\nprint(change_base(255, 16))  # Output: ff"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    fib4_sequence = [0, 0, 2, 0]\n\n    for i in range(4, n+1):\n        fib4_sequence.append(fib4_sequence[i-1] + fib4_sequence[i-2] + fib4_sequence[i-3] + fib4_sequence[i-4])\n\n    return fib4_sequence[n]"}
{"task_id": "HumanEval/47", "completion": "def find_median(lst):\n    lst.sort()\n    length = len(lst)\n\n    if length % 2 == 1:\n        return lst[length // 2]\n    else:\n        return (lst[length // 2 - 1] + lst[length // 2]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    left, right = 0, len(text) - 1\n    while left <= right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result"}
{"task_id": "HumanEval/50", "completion": "def caesar_cipher_decryptor(s):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n# Test the function\nprint(caesar_cipher_decryptor(\"yhff\"))"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    no_vowels_text = ''\n\n    for char in text:\n        if char not in vowels:\n            no_vowels_text += char\n\n    return no_vowels_text\n\n# Test the function\ntext = \"Hello World\"\nprint(remove_vowels(text))  # Output: Hll Wrld"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    count = 0\n    for n in l:\n        if n < t:\n            count += 1\n    return count == len(l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers\n    >>> add(1, 2)\n    3\n    \"\"\"\n    return x + y\n\ndef is_prime(n: int):\n    \"\"\"Check if a number n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci_up_to_n(n):\n    fib_sequence = [0, 1]\n    while fib_sequence[-1] < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence\n\ndef is_fibonacci(n: int):\n    fib_sequence = fibonacci_up_to_n(n)\n    return n in fib_sequence\n\ndef prime_fib(n: int):\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and is_fibonacci(num):\n            count += 1\n    if count == n:\n        return num\n    else:\n        return None"}
{"task_id": "HumanEval/54", "completion": "def is_anagram(s0, s1):\n    # 1. Create a set of characters for s0 and s1.\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n\n    # 2. Compare the lengths of the sets.\n    if len(set_s0) != len(set_s1):\n        return False\n\n    # 3. If the lengths are equal, return True.\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fibonacci(n):\n    a, b = 0, 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases\nprint(correct_bracketing('<'))  # False\nprint(correct_bracketing('<>'))  # True\nprint(correct_bracketing('<<><>>'))  # True\nprint(correct_bracketing('><<>'))  # False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    def single_direction(seq):\n        return all(seq[i] >= seq[i + 1] for i in range(len(seq) - 1)) or all(seq[i] <= seq[i + 1] for i in range(len(seq) - 1))\n\n    return single_direction(l)\n\n# Test cases\nprint(monotonic([1, 2, 3, 4]))  # True\nprint(monotonic([4, 3, 2, 1]))  # True\nprint(monotonic([1, 2, 4, 3]))  # False\nprint(monotonic([1, 1, 1, 1]))  # True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    common_elements = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                common_elements.append(i)\n    common_elements = list(set(common_elements))\n    common_elements.sort()\n    return common_elements"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    largest_factor = 1\n    while n % 2 == 0:\n        n = n / 2\n        largest_factor = 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n = n / i\n            largest_factor = i\n    if n > 2:\n        largest_factor = n\n    return largest_factor"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "def check_balance(brackets):\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(poly):\n    derivative_poly = []\n    for i in range(1, len(poly)):\n        derivative_poly.append(poly[i] * i)\n    return derivative_poly"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n <= 2:\n        return [0, 0, 1][n]\n    else:\n        fibfib_sequence = [0, 0, 1]\n        for i in range(3, n + 1):\n            fibfib_sequence.append(fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3])\n        return fibfib_sequence[n]"}
{"task_id": "HumanEval/64", "completion": "def count_vowels(s):\n    vowels = \"aeiou\"\n    s = s.lower()\n    count = 0\n\n    for char in s:\n        if char in vowels:\n            count += 1\n\n    if s.endswith('y'):\n        count += 1\n\n    return count\n\n# Test the function\nprint(count_vowels(\"Hello World\"))"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n\n    if shift >= num_digits:\n        return x_str[::-1]\n    else:\n        result = x_str[shift:] + x_str[:shift]\n        return result\n\n# Test the function\nprint(circular_shift(12345, 2))  # Output: \"34512\"\nprint(circular_shift(12345, 5))  # Output: \"54321\"\nprint(circular_shift(12345, 6))  # Output: \"54321\""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for ch in s:\n        if ch.isupper():\n            sum += ord(ch)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Step 1: Split the input string into a list of words\n    words = s.split()\n\n    # Step 2: Extract the numbers of apples and oranges\n    apples = int(words[0])\n    oranges = int(words[3])\n\n    # Step 3: Calculate the total number of mango fruits\n    mangoes = n - apples - oranges\n\n    # Step 4: Return the calculated number of mango fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def smallest_even(arr):\n    smallest = []\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if not smallest or num < smallest[0]:\n                smallest = [num, i]\n    return smallest"}
{"task_id": "HumanEval/69", "completion": "def most_frequent(nums):\n    if not nums:\n        return -1\n\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_count = max(count_dict.values())\n    max_nums = [num for num, count in count_dict.items() if count == max_count]\n\n    return max(max_nums)"}
{"task_id": "HumanEval/70", "completion": "def sort_list(input_list):\n    sorted_list = []\n\n    while input_list:\n        min_val = min(input_list)\n        input_list.remove(min_val)\n        sorted_list.append(min_val)\n\n        if input_list:\n            max_val = max(input_list)\n            input_list.remove(max_val)\n            sorted_list.append(max_val)\n\n    return sorted_list"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef calculate_triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if (a < (b + c)) and (b < (a + c)) and (c < (a + b)):\n        \n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n\n        # Calculate the area using Heron's formula\n        area = round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n\n        # Return the calculated area\n        return area\n    else:\n        # The sides do not form a valid triangle\n        return -1\n\n# Test the function\nprint(calculate_triangle_area(3, 4, 5))  # Output: 6.0\nprint(calculate_triangle_area(1, 2, 3))  # Output: -1"}
{"task_id": "HumanEval/72", "completion": "def is_palindrome(lst):\n    start = 0\n    end = len(lst) - 1\n    while start < end:\n        if lst[start] != lst[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\ndef will_it_fly(q, w):\n    if not is_palindrome(q):\n        return False\n    if sum(q) <= w:\n        return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "def min_changes_to_palindrome(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n            arr[n - 1 - i] = arr[i]\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def compare_lists(lst1, lst2):\n    total_chars1 = 0\n    total_chars2 = 0\n\n    for s in lst1:\n        total_chars1 += len(s)\n\n    for s in lst2:\n        total_chars2 += len(s)\n\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    primes = [i for i in range(2, int(a**0.5)+1) if is_prime(i)]\n    primes.sort()\n    for i in range(len(primes)):\n        left = i + 1\n        right = len(primes) - 1\n        while left < right:\n            if primes[i]*primes[left]*primes[right] == a:\n                return True\n            elif primes[i]*primes[left]*primes[right] < a:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(n, x):\n    i = 1\n    while n**i <= x:\n        if n**i == x:\n            return True\n        i += 1\n    return False"}
{"task_id": "HumanEval/77", "completion": "def is_perfect_cube(n):\n    cube = n**3\n    cube_root = round(cube**(1. / 3))\n    return cube_root**3 == cube"}
{"task_id": "HumanEval/78", "completion": "def count_prime_hexadecimal_digits(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    counter = 0\n\n    for char in num:\n        if char in primes:\n            counter += 1\n\n    return counter"}
{"task_id": "HumanEval/79", "completion": "def dec_to_bin(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(s):\n    return is_prime(len(s))"}
{"task_id": "HumanEval/83", "completion": "def count_n_digit_numbers(n):\n    count = 0\n    start = 10 ** (n - 1)\n    end = 10 ** n\n\n    for num in range(start, end):\n        str_num = str(num)\n        if str_num[0] == '1' or str_num[-1] == '1':\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/84", "completion": "def binary_sum(n):\n    # Convert n to binary\n    binary_n = \"\"\n    while n > 0:\n        binary_n = str(n % 2) + binary_n\n        n = n // 2\n    # Calculate sum of digits\n    sum_digits = sum(int(digit) for digit in binary_n)\n    # Convert sum back to binary\n    binary_sum = \"\"\n    while sum_digits > 0:\n        binary_sum = str(sum_digits % 2) + binary_sum\n        sum_digits = sum_digits // 2\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "def sum_even_odd_indices(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/86", "completion": "\n\n    Here is the Python code for the problem:\n\n    def anti_shuffle(s):\n        # Step 1: Split the input string into a list of words.\n        words = s.split(' ')\n\n        # Step 2: For each word in the list, sort the characters in ascending order.\n        sorted_words = [sorted(word) for word in words]\n\n        # Step 3: Join the sorted words back into a string with blank spaces in between.\n        sorted_string = ' '.join([''.join(word) for word in sorted_words])\n\n        # Step 4: Return the final string.\n        return sorted_string\n\n    # Test the function\n    print(anti_shuffle(\"hello world\"))  # Output: \" dehllloor w\""}
{"task_id": "HumanEval/87", "completion": "def find_coordinates(matrix, x):\n    coordinates = []\n\n    for i, row in enumerate(matrix):\n        for j, col in enumerate(row):\n            if col == x:\n                coordinates.append((i, j))\n\n    coordinates.sort()\n\n    for coordinate in coordinates:\n        coordinates[coordinates.index(coordinate) : len(coordinates)] = sorted(\n            coordinates[coordinates.index(coordinate) : len(coordinates)], key=lambda x: x[1], reverse=True\n        )\n\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(arr):\n    # Step 1: Check if the input array is empty or contains only one element.\n    if len(arr) <= 1:\n        return arr\n\n    # Step 2: Calculate the sum of the first and last elements in the array.\n    sum_first_last = arr[0] + arr[-1]\n\n    # Step 3: If the sum is odd, sort the array in ascending order.\n    if sum_first_last % 2 == 1:\n        for i in range(len(arr)):\n            for j in range(len(arr) - i - 1):\n                if arr[j] > arr[j + 1]:\n                    arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\n    # Step 4: If the sum is even, sort the array in descending order.\n    else:\n        for i in range(len(arr)):\n            for j in range(len(arr) - i - 1):\n                if arr[j] < arr[j + 1]:\n                    arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\n    # Step 5: Return the sorted array.\n    return arr"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = alphabet[4:]+alphabet[:4]\n    encrypted_string = ''\n    for char in s:\n        encrypted_string += shifted_alphabet[alphabet.index(char)]\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    smallest = second_smallest = None\n    for num in lst:\n        if smallest is None or num < smallest:\n            smallest, second_smallest = num, smallest\n        elif second_smallest is None or num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "def count_boredoms(text):\n    boredom_count = 0\n    sentences = text.replace(\"!\", \"?\").replace(\".\", \"?\").split(\"?\")\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            boredom_count += 1\n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "def is_pythagorean(x, y, z):\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Check if any of the inputs is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    # In any other cases, return False\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode_message(message):\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = \"\"\n    for char in message:\n        if char in vowel_map:\n            encoded_message += vowel_map[char]\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = int(n**0.5) + 1\n    for i in range(3, sqrt_n, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits_largest_prime(lst):\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    if largest_prime == 0:\n        return 0\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "def is_mixed_case(dictionary):\n    if not dictionary:\n        return False\n\n    all_lower = all_upper = True\n\n    for key in dictionary:\n        if not isinstance(key, str):\n            return False\n        if key != key.lower():\n            all_lower = False\n        if key != key.upper():\n            all_upper = False\n\n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def unit_product(num1, num2):\n    unit_digit1 = num1 % 10\n    unit_digit2 = num2 % 10\n    return unit_digit1 * unit_digit2"}
{"task_id": "HumanEval/98", "completion": "def count_consecutive_vowels(s):\n    counter = 0\n    temp_counter = 0\n    vowels = 'aeiou'\n    for char in s:\n        if char in vowels:\n            temp_counter += 1\n        else:\n            counter = max(counter, temp_counter)\n            temp_counter = 0\n    return max(counter, temp_counter)"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(s):\n    num = float(s)\n    if num > 0:\n        return int(num)\n    else:\n        return int(num) - 1"}
{"task_id": "HumanEval/100", "completion": "def number_of_stones(n):\n    stone_numbers = []\n    for i in range(n):\n        if i % 2 == 0:\n            stone_numbers.append(i + 1)\n        else:\n            stone_numbers.append(i)\n    return stone_numbers"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    # Step 1: Initialize an empty list to store the words.\n    words = []\n\n    # Step 2: Split the input string into words.\n    words = s.split(', ')\n\n    # Step 3: Return the list of words.\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            max_even = max(max_even, num)\n    return max_even"}
{"task_id": "HumanEval/103", "completion": "def avg_binary(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((sum(range(n, m+1))) / (m - n + 1))\n        binary_avg = bin(avg)[2:]\n        return binary_avg"}
{"task_id": "HumanEval/104", "completion": "def remove_even_digits(x):\n    result = []\n    for num in x:\n        num_str = str(num)\n        has_even_digit = False\n        for digit in num_str:\n            if digit in '02468':\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "Here is a Python solution based on the solution plan:\n\n```python\ndef number_names(arr):\n    # Step 1: Initialize an empty dictionary to store the names of the numbers.\n    num_dict = {}\n\n    # Step 2: Iterate over the range 1 to 9 (inclusive) and for each number, add an entry to the dictionary where the key is the number and the value is its name.\n    for i in range(1, 10):\n        if i == 1:\n            num_dict[i] = 'one'\n        elif i == 2:\n            num_dict[i] = 'two'\n        elif i == 3:\n            num_dict[i] = 'three'\n        elif i == 4:\n            num_dict[i] = 'four'\n        elif i == 5:\n            num_dict[i] = 'five'\n        elif i == 6:\n            num_dict[i] = 'six'\n        elif i == 7:\n            num_dict[i] = 'seven'\n        elif i == 8:\n            num_dict[i] = 'eight'\n        elif i == 9:\n            num_dict[i] = 'nine'\n\n    # Step 3: Initialize an empty list to store the sorted and reversed array.\n    sorted_reversed_arr = []\n\n    # Step 4: Iterate over the input array and for each number, if it is between 1 and 9 (inclusive), add it to the sorted list.\n    for num in arr:\n        if num >= 1 and num <= 9:"}
{"task_id": "HumanEval/106", "completion": "def even_odd_factorial_sum(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_i = 0\n            for j in range(1, i+1):\n                sum_i += j\n            result.append(sum_i)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def count_even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # Check if i is a palindrome\n            if i % 2 == 0:  # Check if i is even\n                even_count += 1\n            else:  # i is odd\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = num // 10\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_digits > 0:\n            count += 1\n    return count\n\n# Test the function\narr = [12, -32, 44, 56, -78, 90, -98]\nprint(count_nums(arr))  # Output: 5"}
{"task_id": "HumanEval/109", "completion": "def check_non_decreasing(arr):\n    if len(arr) == 0:\n        return True\n\n    min_index = arr.index(min(arr))\n\n    if min_index == 0:\n        return True\n\n    shifts = min_index\n    shifted_arr = arr[min_index:] + arr[:min_index]\n\n    return arr == shifted_arr"}
{"task_id": "HumanEval/110", "completion": "def odd_even_check(lst1, lst2):\n    count = 0\n\n    for num in lst1:\n        if num % 2 != 0:  # Check if the number is odd\n            count += 1\n\n    for num in lst2:\n        if num % 2 == 0:  # Check if the number is even\n            count -= 1\n\n    if count == 0:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letter_counts = {}\n    for ch in test:\n        if ch in letter_counts:\n            letter_counts[ch] += 1\n        else:\n            letter_counts[ch] = 1\n\n    max_count = max(letter_counts.values(), default=0)\n\n    # Step 5: Iterate over the dictionary again and add all the letters with a count\n    # equal to the maximum count to the output dictionary.\n    output = {ch: count for ch, count in letter_counts.items() if count == max_count}\n\n    return output"}
{"task_id": "HumanEval/112", "completion": "def remove_and_check(s, c):\n    # Create a new string by deleting all the characters in s that are equal to any character in c.\n    new_s = ''.join([ch for ch in s if ch not in c])\n\n    # Check if the new string is a palindrome.\n    is_palindrome = new_s == new_s[::-1]\n\n    # Return a tuple containing the new string and the result of the palindrome check.\n    return (new_s, is_palindrome)\n\n# Test the function\nprint(remove_and_check('abcba', 'c'))  # Expected output: ('abba', True)\nprint(remove_and_check('abcba', 'b'))  # Expected output: ('ac', False)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for string in lst:\n        odd_count = 0\n        for char in string:\n            if int(char) % 2 != 0:\n                odd_count += 1\n        result.append(f\"the number of odd elements {odd_count} in the string {string} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def min_subarray_sum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        sub_sum = 0\n        for j in range(i, len(nums)):\n            sub_sum += nums[j]\n            min_sum = min(min_sum, sub_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def num_buckets_to_lower(grid, bucket_capacity):\n    total_water = 0\n\n    for row in grid:\n        for cell in row:\n            if cell == 1:\n                total_water += 1\n\n    return total_water // bucket_capacity"}
{"task_id": "HumanEval/116", "completion": "def sort_by_ones_and_value(arr):\n    sorted_list = sorted([(bin(num).count('1'), num, num) for num in arr], key=lambda x: (x[0], x[1]))\n    return [num for _, _, num in sorted_list]"}
{"task_id": "HumanEval/117", "completion": "def select_words(input_string, n):\n    # Step 1: Initialize an empty list to store the selected words.\n    selected_words = []\n\n    # Step 2: Split the input string into words.\n    words = input_string.split()\n\n    # Step 3: For each word in the list of words:\n    for word in words:\n        # Step 4: Initialize a counter to count the number of consonants in the word.\n        consonant_count = 0\n\n        # Step 5: For each character in the word:\n        for char in word:\n            # Step 6: If the character is a consonant, increment the counter.\n            if char.lower() in 'bcdfghjklmnpqrstvwxyz':\n                consonant_count += 1\n\n        # Step 7: If the counter equals n, append the word to the list of selected words.\n        if consonant_count == n:\n            selected_words.append(word)\n\n    # Step 8: Return the list of selected words.\n    return selected_words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    closest_vowel = ''\n    vowels = 'aeiou'\n    prev_is_consonant = False\n\n    for char in reversed(word):\n        if char.lower() not in vowels:\n            if prev_is_consonant:\n                closest_vowel = char\n                break\n            else:\n                prev_is_consonant = True\n        else:\n            prev_is_consonant = False\n\n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "def is_balanced(s1, s2):\n    counter = 0\n\n    for char in s1:\n        if char == '(':\n            counter += 1\n        elif char == ')':\n            counter -= 1\n        if counter < 0:\n            return 'No'\n\n    if counter != 0:\n        return 'No'\n\n    counter = 0\n    for char in s2:\n        if char == '(':\n            counter += 1\n        elif char == ')':\n            counter -= 1\n        if counter < 0:\n            return 'No'\n\n    if counter != 0:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    max_nums = []\n    for i in range(k):\n        max_nums.append(arr[i])\n    return max_nums"}
{"task_id": "HumanEval/121", "completion": "def sum_odd_elements_in_even_positions(lst):\n    sum = 0\n    for i in range(0, len(lst) - 1, 2):\n        if lst[i] % 2 == 1:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def collatz_sequence(n):\n    collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            collatz_list.append(n)\n        n = n // 2\n    collatz_list.append(1)\n    return sorted(collatz_list)"}
{"task_id": "HumanEval/124", "completion": "def is_valid_date(date_string):\n    # Split the date string\n    date_parts = date_string.split('-')\n\n    # Check if date string is not empty and follows correct format\n    if not date_string or len(date_parts) != 3:\n        return False\n\n    # Convert parts to integers\n    day, month, year = map(int, date_parts)\n\n    # Check if day, month, year are valid\n    if day < 1 or day > 31 or month < 1 or month > 12 or year < 1:\n        return False\n\n    # Check if day is valid for the given month\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2 and (day < 1 or day > 29):\n        return False\n\n    # If all checks pass, return True\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for ch in txt if ch.islower() and (ord(ch) - ord('a')) % 2 == 1)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted_and_no_duplicates(lst):\n    if not lst:\n        return True\n\n    prev = None\n    for num in lst:\n        if prev is not None:\n            if num <= prev:\n                return False\n            if lst.count(num) > 1:\n                return False\n        prev = num\n\n    return True"}
{"task_id": "HumanEval/127", "completion": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef interval_intersection(A, B):\n    if max(A[0], B[0]) <= min(A[1], B[1]):\n        intersection_length = min(A[1], B[1]) - max(A[0], B[0]) + 1\n        return \"YES\" if is_prime(intersection_length) else \"NO\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def product_sum(arr):\n    result = 0\n    sign_product = 1\n\n    if not arr:\n        return None\n\n    for num in arr:\n        if num == 0:\n            return 0\n        sign = 1 if num > 0 else -1\n        sign_product *= sign\n        result += abs(num) * sign_product\n\n    return result"}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef min_path(grid, k):\n    rows, cols = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up\n\n    # Initialize the priority queue with paths starting from each cell\n    queue = []\n    for r in range(rows):\n        for c in range(cols):\n            heapq.heappush(queue, (grid[r][c], [grid[r][c]]))\n\n    # Expand each path until its length is k\n    while queue[0][1][-1] < k:\n        val, path = heapq.heappop(queue)\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols:\n                new_val = val + grid[nr][nc]\n                new_path = path + [grid[nr][nc]]\n                heapq.heappush(queue, (new_val, new_path))\n\n    # Return the values in the minimum path\n    return queue[0][1]"}
{"task_id": "HumanEval/130", "completion": "def tribonacci(n):\n    tribonacci = [1, 3, 2]\n\n    if n <= 2:\n        return tribonacci[:n+1]\n\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n\n    return tribonacci"}
{"task_id": "HumanEval/131", "completion": "def product_of_odd_digits(n):\n    product = 1\n    str_n = str(n)\n    for ch in str_n:\n        num = int(ch)\n        if num % 2 != 0:\n            product *= num\n    if product == 1:\n        return 0\n    else:\n        return product"}
{"task_id": "HumanEval/132", "completion": "def has_nested_brackets(s):\n    counter = 0\n    for char in s:\n        if char == '(':\n            counter += 1\n        elif char == ')':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter > 0"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_of_squares(lst):\n    sum = 0\n    for num in lst:\n        sum += math.ceil(num) ** 2\n    return sum"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) < 2:\n        return False\n    last_char = txt[-1]\n    second_last_char = txt[-2]\n    if last_char.isalpha():\n        if second_last_char == ' ':\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            max_index = i\n    return max_index\n\n# Test the function with the given examples\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))  # Output: -1"}
{"task_id": "HumanEval/136", "completion": "def find_max_negative_min_positive(nums):\n    max_negative = None\n    min_positive = None\n\n    for num in nums:\n        if num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n        elif num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) != type(b):\n        if isinstance(a, (int, float)):\n            return a\n        else:\n            return b\n    else:\n        if a == b:\n            return None\n        else:\n            if isinstance(a, str):\n                a = a.replace('.', ',')\n                a = float(a)\n            if isinstance(b, str):\n                b = b.replace('.', ',')\n                b = float(b)\n            return max(a, b)"}
{"task_id": "HumanEval/138", "completion": "def find_four_numbers(n):\n    if n < 10:\n        return False\n    for i in range(2, n + 1, 2):\n        for j in range(2, n + 1 - i, 2):\n            for k in range(2, n + 1 - i - j, 2):\n                l = n - i - j - k\n                if l % 2 == 0 and l >= 2:\n                    return True\n    return False\n\nprint(find_four_numbers(100))  # Example usage"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n        result = 1\n        for i in range(n, 0, -1):\n            result *= i\n        return result"}
{"task_id": "HumanEval/140", "completion": "def replace_spaces(text):\n    new_text = \"\"\n    prev_char = None\n\n    for char in text:\n        if char == \" \":\n            if prev_char is None or prev_char != \" \":\n                new_text += \"_\"\n            else:\n                new_text += \"-\"\n        else:\n            new_text += char\n        prev_char = char\n\n    return new_text"}
{"task_id": "HumanEval/141", "completion": "def is_valid_file_name(file_name):\n    digit_counter = 0\n    for char in file_name:\n        if char.isdigit():\n            digit_counter += 1\n        if digit_counter > 3:\n            return 'No'\n\n    if file_name.count('.') != 1:\n        return 'No'\n\n    name_parts = file_name.split('.')\n    if not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_modified_list(lst):\n    sum = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            sum += num ** 2\n        elif i % 4 == 0:\n            sum += num ** 3\n        else:\n            sum += num\n    return sum"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length_words(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\n# Test the function\nsentence = \"This is a test\"\nprint(prime_length_words(sentence))  # Output: \"is\""}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # Convert x and n from string format to float\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Multiply the two fractions together\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n\n    # Check if the result is a whole number\n    if result_num % result_den == 0:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(simplify(\"1/2\", \"2/1\"))  # Should return True\nprint(simplify(\"2/3\", \"3/2\"))  # Should return False"}
{"task_id": "HumanEval/145", "completion": "def sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\ndef sort_by_sum_of_digits(lst):\n    if not lst:\n        return []\n\n    lst_with_sums = [(i, sum_of_digits(elem), elem) for i, elem in enumerate(lst)]\n    lst_with_sums.sort(key=lambda x: (x[1], x[0]))\n\n    return [elem for _, _, elem in lst_with_sums]"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 == 1 and num // 10 % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def count_valid_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def get_planets_between(planet1, planet2):\n    planets_order = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\n    planet1 = planet1.capitalize()\n    planet2 = planet2.capitalize()\n\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n\n    index1 = planets_order.index(planet1)\n    index2 = planets_order.index(planet2)\n\n    if index1 < index2:\n        return tuple(planets_order[index1+1:index2])\n    else:\n        return tuple(planets_order[index2+1:index1])\n\n# Test the function\nprint(get_planets_between('Earth', 'Jupiter'))  # Output: ('Mars',)\nprint(get_planets_between('Jupiter', 'Earth'))  # Output: ('Mars',)\nprint(get_planets_between('Earth', 'Pluto'))    # Output: ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n        even_length_strings = [s for s in lst if len(s) % 2 == 0]\n        even_length_strings.sort(key=lambda s: (len(s), s))\n        return even_length_strings"}
{"task_id": "HumanEval/150", "completion": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nif is_prime(n):\n    return x\nelse:\n    return y"}
{"task_id": "HumanEval/151", "completion": "def sum_of_squares_of_odds(lst):\n        sum = 0\n        for n in lst:\n            if n % 2 != 0:\n                sum += n ** 2\n        return sum"}
{"task_id": "HumanEval/152", "completion": "def compare_games(game, guess):\n    results = []\n    for i in range(len(game)):\n        difference = abs(game[i] - guess[i])\n        results.append(difference)\n    return results"}
{"task_id": "HumanEval/153", "completion": "def find_strongest_extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = None\n\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def is_rotation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n\n    s2_rotations = [s2[i:] + s2[:i] for i in range(len(s2))]\n\n    for s2_rotation in s2_rotations:\n        if s2_rotation in s1:\n            return True\n\n    return False"}
{"task_id": "HumanEval/155", "completion": "def count_even_odd(num):\n    num = abs(num)  # Convert the number to positive\n    num_str = str(num)  # Convert the number to string\n    even_counter = 0\n    odd_counter = 0\n\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_counter += 1\n        else:\n            odd_counter += 1\n\n    return (even_counter, odd_counter)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_numeral = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_numeral += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_numeral"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Check if the sum of lengths of the two smallest sides is equal to the length of the longest side\n    if a + b != c and a + c != b and b + c != a:\n        return False\n\n    # Sort the lengths in ascending order\n    sides = sorted([a, b, c])\n\n    # Check if the lengths of the two smallest sides after sorting are the same as the lengths of the two smallest sides before sorting\n    if (sides[0]**2 + sides[1]**2 == sides[2]**2) or (sides[0]**2 + sides[2]**2 == sides[1]**2) or (sides[1]**2 + sides[2]**2 == sides[0]**2):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def word_with_most_unique_chars(words):\n    max_word = ''\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat_carrots(need, number, remaining):\n    if remaining < need:\n        need = remaining\n    total_eaten = number + need\n    carrots_left = remaining - need\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "completion": "def calculate(operators, operands):\n    result = operands[0]\n\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '/':\n            result /= operands[i]\n\n    return result\n\n# Test the function\noperators = ['+', '-', '*', '/']\noperands = [10, 2, 3, 4]\nprint(calculate(operators, operands))  # Output: 2.0"}
{"task_id": "HumanEval/161", "completion": "def reverse_case(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if result == \"\":\n        return s[::-1]\n    else:\n        return result"}
{"task_id": "HumanEval/162", "completion": "def generate_md5_hash(text):\n    import hashlib\n\n    if text == '':\n        return None\n    else:\n        md5_hash = hashlib.md5()\n        md5_hash.update(text.encode('utf-8'))\n        return md5_hash.hexdigest()\n\n# Example usage:\ntext = \"Hello, World!\"\nprint(generate_md5_hash(text))"}
{"task_id": "HumanEval/163", "completion": "def even_digits(a, b):\n    # Sort the numbers\n    if a > b:\n        a, b = b, a\n\n    # Initialize an empty list to store even digits\n    even_digits_list = []\n\n    # Loop over each number between a and b\n    for num in range(a, b + 1):\n        # Convert the number to a string to easily access its digits\n        str_num = str(num)\n\n        # Loop over each character in the string\n        for char in str_num:\n            # Check if the digit is even\n            if int(char) % 2 == 0:\n                # If it is, add it to the list\n                even_digits_list.append(int(char))\n\n    # Return the list of even digits\n    return even_digits_list"}
