{"task_id": "HumanEval/0", "completion": "def has_close_pair(nums, threshold):\n    threshold_squared = threshold ** 2\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if (nums[i] - nums[j]) ** 2 <= threshold_squared:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def group_parentheses(s):\n    groups = []\n    group = \"\"\n    count = 0\n\n    for char in s:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n\n        group += char\n\n        if count == 0:\n            groups.append(group)\n            group = \"\"\n\n    if group:\n        groups.append(group)\n\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def decimal_part(number):\n    decimal_parts = []\n    for digit in str(number):\n        decimal_part = float(digit) - int(digit)\n        decimal_parts.append(decimal_part)\n    return decimal_parts[-1] if decimal_parts else 0"}
{"task_id": "HumanEval/3", "completion": "def will_balance_fall(operations):\n    balance = 0\n    for operation in operations:\n        if operation < 0:\n            if abs(operation) > balance:\n                return True\n            else:\n                balance += operation\n        else:\n            balance += operation\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    differences = [abs(num - mean) for num in numbers]\n    mad = sum(differences) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "def separate_elements(input_list, delimiter):\n    result = []\n    for element in input_list:\n        result.append(element)\n        result.append(delimiter)\n    result.pop()\n    return result"}
{"task_id": "HumanEval/6", "completion": "def max_depth(s: str) -> int:\n    max_d, curr_d = 0, 0\n    for c in s:\n        if c == '(':\n            curr_d += 1\n            max_d = max(max_d, curr_d)\n        elif c == ')':\n            curr_d -= 1\n    return max_d\n\ndef parse_nested_parens(paren_string: str) -> list:\n    groups = paren_string.split(' ')\n    result = []\n    for group in groups:\n        result.append(max_depth(group))\n    return result"}
{"task_id": "HumanEval/7", "completion": "def find_strings_with_substring(input_list, substring):\n    containing_strings = []\n    for string in input_list:\n        if substring in string:\n            containing_strings.append(string)\n    return containing_strings"}
{"task_id": "HumanEval/8", "completion": "def process_numbers(numbers):\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_values = []\n    current_max = None\n\n    for number in numbers:\n        if current_max is None:\n            current_max = number\n        elif number > current_max:\n            current_max = number\n        rolling_max_values.append(current_max)\n\n    return rolling_max_values"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef longest_palindrome_suffix(string):\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            break\n    return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "def xor_strings(a, b):\n    result = \"\"\n    for i in range(len(a)):\n        result += chr(ord(a[i]) ^ ord(b[i]))\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest_string(input_list):\n    longest = None\n    for string in input_list:\n        if longest is None or len(string) > len(longest):\n            longest = string\n    return longest"}
{"task_id": "HumanEval/13", "completion": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return b"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def numbers_to_string(n):\n    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    return result.rstrip()"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(s):\n    distinct_characters = set()\n    for char in s:\n        distinct_characters.add(char.lower())\n    return len(distinct_characters)"}
{"task_id": "HumanEval/17", "completion": "def note_durations(notes):\n    durations = []\n    for note in notes.split(' '):\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations"}
{"task_id": "HumanEval/18", "completion": "def count_substring(s, t):\n    return s.count(t)\n\nprint(count_substring('aaa', 'a'))  # Output: 3\nprint(count_substring('abcabc', 'ab'))  # Output: 2\nprint(count_substring('abcabc', 'bc'))  # Output: 2"}
{"task_id": "HumanEval/19", "completion": "def convert_to_number(word: str) -> int:\n    return {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }[word]\n\ndef convert_to_word(number: int) -> str:\n    return {\n        0: 'zero',\n        1: 'one',\n        2: 'two',\n        3: 'three',\n        4: 'four',\n        5: 'five',\n        6: 'six',\n        7: 'seven',\n        8: 'eight',\n        9: 'nine',\n    }[number]\n\ndef sort_numbers_in_text(numbers: str) -> str:\n    words = numbers.split()\n    numbers = [convert_to_number(word) for word in words]\n    numbers.sort()\n    words = [convert_to_word(number) for number in numbers]\n    return ' '.join(words)"}
{"task_id": "HumanEval/20", "completion": "def find_min_difference(numbers):\n    if len(numbers) < 2:\n        return \"Error: List must have at least two elements.\"\n\n    min_difference = float('inf')\n    min_pair = None\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            difference = abs(numbers[i] - numbers[j])\n            if difference < min_difference:\n                min_difference = difference\n                min_pair = (numbers[i], numbers[j])\n\n    return min_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_numbers(nums):\n    min_num = min(nums)\n    max_num = max(nums)\n    diff = max_num - min_num\n    if diff == 0:\n        return [0 for _ in nums]  # If all numbers are the same, return a list of 0s.\n    else:\n        return [(num - min_num) / diff for num in nums]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(input_list):\n    filtered_integers = []\n    for value in input_list:\n        if isinstance(value, int):\n            filtered_integers.append(value)\n    return filtered_integers"}
{"task_id": "HumanEval/23", "completion": "\n\n    def string_length(input_string):\n        counter = 0\n        for char in input_string:\n            counter += 1\n        return counter"}
{"task_id": "HumanEval/24", "completion": "def smallest_divisor(n):\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return None"}
{"task_id": "HumanEval/25", "completion": "def prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def find_unique_numbers(numbers):\n    count_dict = {}\n    result = []\n    for num in numbers:\n        if num not in count_dict:\n            count_dict[num] = 1\n            result.append(num)\n        else:\n            count_dict[num] += 1\n            if count_dict[num] > 1 and num in result:\n                result.remove(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"}
{"task_id": "HumanEval/28", "completion": "def concatenate_strings(lst):\n    result = \"\"\n    for string in lst:\n        for char in string:\n            result += char\n    return result"}
{"task_id": "HumanEval/29", "completion": "def filter_strings(strings, prefix):\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "\n\n    def get_positive(l: list):\n        positive_numbers = []\n        for num in l:\n            if num > 0:\n                positive_numbers.append(num)\n        return positive_numbers"}
{"task_id": "HumanEval/31", "completion": "\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs, x):\n    return sum(coeff * x**power for coeff, power in zip(xs, range(len(xs))))\n\ndef derivative(xs):\n    return [coeff * power for coeff, power in zip(xs, range(len(xs)))]\n\ndef newton_raphson(f, x):\n    while abs(f(x)) > 1e-6:\n        x = x - f(x) / derivative(f(x))\n    return x\n\ndef solve_poly(xs):\n    def f(x):\n        return poly(xs, x)\n\n    return round(newton_raphson(f, 0), 2)"}
{"task_id": "HumanEval/33", "completion": "def rearrange_by_third(arr):\n    if len(arr) < 3:\n        return arr\n\n    third_elements = [arr[i] for i in range(2, len(arr), 3)]\n    third_elements.sort()\n\n    for i in range(2, len(arr), 3):\n        arr[i] = third_elements.pop(0)\n\n    return arr"}
{"task_id": "HumanEval/34", "completion": "def unique_sorted(lst):\n    unique_lst = []\n    for i in lst:\n        if i not in unique_lst:\n            unique_lst.append(i)\n    return sorted(unique_lst)"}
{"task_id": "HumanEval/35", "completion": "\n\n    def find_max(lst):\n        max_val = None\n        for i in lst:\n            if max_val is None or i > max_val:\n                max_val = i\n        return max_val"}
{"task_id": "HumanEval/36", "completion": "def count_sevens(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def rearrange_even_indices(arr):\n    if len(arr) < 2:\n        return arr\n    even_indices = [arr[i] for i in range(0, len(arr), 2)]\n    even_indices.sort()\n    arr_sorted = [None] * len(arr)\n    even_counter = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            arr_sorted[i] = even_indices[even_counter]\n            even_counter += 1\n        else:\n            arr_sorted[i] = arr[i]\n    return arr_sorted"}
{"task_id": "HumanEval/38", "completion": "def rearrange_string(s):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fibonacci(n):\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a\n    return None\n\nprint(prime_fibonacci(1))  # Output: 2\nprint(prime_fibonacci(5))  # Output: 7\nprint(prime_fibonacci(10))  # Output: 61"}
{"task_id": "HumanEval/40", "completion": "def three_sum(nums):\n    nums.sort()\n    for i in range(len(nums) - 2):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n        l, r = i + 1, len(nums) - 1\n        while l < r:\n            s = nums[i] + nums[l] + nums[r]\n            if s < 0:\n                l += 1\n            elif s > 0:\n                r -= 1\n            else:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def count_collisions(left_to_right_cars, right_to_left_cars):\n    collisions = 0\n    for left_car in left_to_right_cars:\n        for right_car in right_to_left_cars:\n            if left_car == right_car:\n                collisions += 1\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def increment_list(input_list):\n    return [x + 1 for x in input_list]\n\ndef palindrome_check(s):\n    s = s.lower()\n    s = ''.join(c for c in s if c.isalnum())\n    return s == s[::-1]\n\ndef longest_common_subsequence(s1, s2):\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if s1[i] == s2[j]:\n                dp[i][j] = dp[i + 1][j + 1] + 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n    i, j = 0, 0\n    res = []\n    while i < m and j < n:\n        if s1[i] == s2[j]:\n            res.append(s1[i])\n            i += 1\n            j += 1\n        elif dp[i + 1][j] >= dp[i][j + 1]:\n            i += 1\n        else:\n            j += 1\n    return ''.join(res)"}
{"task_id": "HumanEval/43", "completion": "def has_zero_sum_subset(arr):\n    seen = set()\n    for num in arr:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def int_to_base(x, base):\n    digits = \"0123456789\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        x = x // base\n        result = digits[remainder] + result\n    return result if x == 0 else \"Error, invalid input\""}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    fib_seq = [0, 0, 2, 0]\n    if n <= 3:\n        return fib_seq[n]\n    else:\n        for i in range(4, n+1):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2] + fib_seq[i-3] + fib_seq[i-4])\n        return fib_seq[-1]"}
{"task_id": "HumanEval/47", "completion": "def find_median(lst):\n    lst.sort()\n    length = len(lst)\n\n    if length % 2 == 1:\n        return lst[length // 2]\n    else:\n        return (lst[length // 2 - 1] + lst[length // 2]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    left, right = 0, len(text) - 1\n    while left <= right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True"}
{"task_id": "HumanEval/49", "completion": "def power_mod(n, p):\n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(s):\n    vowels = set('aeiouAEIOU')\n    return ''.join(ch for ch in s if ch not in vowels)\n\n# Test the function\nprint(remove_vowels('Hello World'))  # Expected output: 'Hll Wrld'"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "\n\n    def add(x: int, y: int) -> int:\n        return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fibonacci(n):\n    a, b = 0, 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "def is_balanced(brackets):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            else:\n                stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def first_Repeated_Char(str):\n    seen = set()\n    for char in str:\n        if char in seen:\n            return char\n        else:\n            seen.add(char)\n    return None\n\ndef is_monotonic(l):\n    direction = None\n    for i in range(len(l) - 1):\n        diff = l[i] - l[i + 1]\n        if diff == 0:\n            return True\n        if direction is None:\n            direction = diff\n        if direction != diff:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common_elements(l1, l2):\n    return sorted(list(set(l1).intersection(set(l2))))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    largest_factor = 1\n    while n % 2 == 0:\n        n = n / 2\n        largest_factor = 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n = n / i\n            largest_factor = i\n    if n > 2:\n        largest_factor = n\n    return largest_factor"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "def check_balance(brackets):\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(poly):\n    derivative_poly = []\n    for i in range(1, len(poly)):\n        derivative_poly.append(poly[i] * i)\n    return derivative_poly"}
{"task_id": "HumanEval/63", "completion": "def fib(n):\n    fib_seq = [0, 0, 1]\n    if n <= 2:\n        return fib_seq[n]\n    else:\n        for i in range(3, n+1):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2] + fib_seq[i-3])\n        return fib_seq[n]"}
{"task_id": "HumanEval/64", "completion": "def count_vowels(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    actual_shift = shift % len(x_str)\n    result = x_str[-actual_shift:] + x_str[:-actual_shift]\n    return result"}
{"task_id": "HumanEval/66", "completion": "def palindromeIndex(s):\n    if s == s[::-1]:\n        return -1\n    for i in range(len(s)):\n        if s[:i] + s[i+1:] == s[::-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/67", "completion": "def find_mango_fruits(input_string):\n    words = input_string.split()\n    apples = int(words[1])\n    oranges = int(words[4])\n    total_fruits = int(words[7])\n    mango_fruits = total_fruits - (apples + oranges)\n    return mango_fruits"}
{"task_id": "HumanEval/68", "completion": "def smallest_even(arr):\n    smallest_even_val = []\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and not smallest_even_val:\n            smallest_even_val = [num, i]\n        elif num < smallest_even_val[0] and num % 2 == 0:\n            smallest_even_val = [num, i]\n    return smallest_even_val"}
{"task_id": "HumanEval/69", "completion": "def most_frequent(nums):\n    if not nums:\n        return -1\n\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_count = max(count_dict.values())\n    max_nums = [num for num, count in count_dict.items() if count == max_count]\n\n    return max(max_nums)"}
{"task_id": "HumanEval/70", "completion": "def sort_list(input_list):\n    sorted_list = []\n    while input_list:\n        min_val = min(input_list)\n        max_val = max(input_list)\n        input_list.remove(min_val)\n        input_list.remove(max_val)\n        sorted_list.append(min_val)\n        sorted_list.append(max_val)\n    return sorted_list[::-1]"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n\n# Test the function\nprint(triangle_area(3, 4, 5))  # Output: 6.0\nprint(triangle_area(1, 2, 3))  # Output: 0.47\nprint(triangle_area(1, 2, 5))  # Output: -1"}
{"task_id": "HumanEval/72", "completion": "def can_carry(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def compare_lists(list1, list2):\n    total_chars1 = sum(len(s) for s in list1)\n    total_chars2 = sum(len(s) for s in list2)\n    if total_chars1 < total_chars2:\n        return list1\n    elif total_chars2 < total_chars1:\n        return list2\n    else:\n        return list1"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef product_of_three_primes(target):\n    primes = [n for n in range(2, 100) if is_prime(n)]\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == target:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def power_check(n, x):\n    i = 0\n    while n ** i <= x:\n        if n ** i == x:\n            return True\n        i += 1\n    return False"}
{"task_id": "HumanEval/77", "completion": "def is_perfect_cube(n):\n    cube = n**3\n    cube_root = round(cube**(1. / 3))\n    return cube_root**3 == cube"}
{"task_id": "HumanEval/78", "completion": "def count_prime_hexadecimal_digits(s):\n    prime_hexadecimal_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for char in s:\n        if char in prime_hexadecimal_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def dec_to_bin(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def gpa_to_letter_grades(gpa_list):\n    letter_grades = []\n    for gpa in gpa_list:\n        if gpa >= 90:\n            letter_grades.append('A')\n        elif gpa >= 80:\n            letter_grades.append('B')\n        elif gpa >= 70:\n            letter_grades.append('C')\n        elif gpa >= 60:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_string(s):\n    return is_prime(len(s))"}
{"task_id": "HumanEval/83", "completion": "def count_start_end_with_1(n):\n    if n == 1:\n        return 1\n\n    counter = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            counter += 1\n\n    return counter"}
{"task_id": "HumanEval/84", "completion": "def sum_of_digits_in_binary(N):\n    digits = list(str(N))\n    sum_of_digits = 0\n    for digit in digits:\n        sum_of_digits += int(digit, 2)\n    return bin(sum_of_digits)[2:]"}
{"task_id": "HumanEval/85", "completion": "def sum_even_odd_indices(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/86", "completion": "def sort_string(s):\n    return ' '.join(sorted(s.split(' ')))\n\nprint(sort_string(\"Hello, World!\"))"}
{"task_id": "HumanEval/87", "completion": "def find_coordinates(matrix, x):\n    coordinates = []\n    for row_idx, row in enumerate(matrix):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                coordinates.append((row_idx, col_idx))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def solve(array):\n    if len(array) <= 1:\n        return array\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt_string(input_string):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_result = ''\n    for i in range(len(input_string)):\n        index = (alphabet.index(input_string[i]) + (2 * (i % 2))) % len(alphabet)\n        encrypted_result += alphabet[index]\n    return encrypted_result"}
{"task_id": "HumanEval/90", "completion": "def second_smallest(numbers):\n    first, second = None, None\n    for n in numbers:\n        if first is None:\n            first = n\n        elif n < first:\n            second = first\n            first = n\n        elif second is None and n > first:\n            second = n\n    return second"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    count = 0\n    sentences = re.split('[.!?]', S)\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def is_pythagorean(a, b, c):\n    if not all(isinstance(i, int) for i in (a, b, c)):\n        return False\n    return a**2 + b**2 == c**2"}
{"task_id": "HumanEval/93", "completion": "def encode_message(message):\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = \"\"\n    for char in message:\n        if char in vowel_map:\n            encoded_message += vowel_map[char]\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef sum_of_digits(lst):\n    largest_prime = max(filter(is_prime, lst))\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "def is_mixed_case(d):\n    if not d:\n        return False\n    all_lower, all_upper = True, True\n    for key in d:\n        if not isinstance(key, str):\n            return False\n        if key != key.lower():\n            all_lower = False\n        if key != key.upper():\n            all_upper = False\n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef prime_numbers(n):\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def unit_product(num1, num2):\n    unit_digit1 = num1 % 10\n    unit_digit2 = num2 % 10\n    return unit_digit1 * unit_digit2"}
{"task_id": "HumanEval/98", "completion": "def count_consecutive_vowels(s):\n    counter = 0\n    temp_counter = 0\n    vowels = 'aeiou'\n    for char in s:\n        if char in vowels:\n            temp_counter += 1\n        else:\n            counter = max(counter, temp_counter)\n            temp_counter = 0\n    return max(counter, temp_counter)"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(s):\n    num = float(s)\n    if num > 0:\n        return int(num)\n    else:\n        return int(num) - 1"}
{"task_id": "HumanEval/100", "completion": "def number_of_stones(n):\n    stones = []\n    while n >= 1:\n        stones.append(n)\n        n = n + 2\n    return stones"}
{"task_id": "HumanEval/101", "completion": "\n\n    def words_string(s):\n        words = s.split(', ')\n        return words"}
{"task_id": "HumanEval/102", "completion": "def max_even(x, y):\n    max_even = -1\n    for i in range(y, x-1, -1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even"}
{"task_id": "HumanEval/103", "completion": "def avg_binary(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def no_even_digit(lst):\n    no_even = []\n    for num in lst:\n        str_num = str(num)\n        for digit in str_num:\n            if int(digit) % 2 == 0:\n                break\n        else:\n            no_even.append(num)\n    return sorted(no_even)"}
{"task_id": "HumanEval/105", "completion": "def reverse_numbers(arr):\n    num_dict = {}\n    for num in arr:\n        if 1 <= num <= 9:\n            num_dict[num] = \"one\" if num == 1 else \"two\" if num == 2 else \"three\" if num == 3 else \"four\" if num == 4 else \"five\" if num == 5 else \"six\" if num == 6 else \"seven\" if num == 7 else \"eight\" if num == 8 else \"nine\"\n    return list(num_dict.values())[::-1]"}
{"task_id": "HumanEval/106", "completion": "\n\n    def f(n):\n        result = []\n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                factorial = 1\n                for j in range(1, i + 1):\n                    factorial *= j\n                result.append(factorial)\n            else:\n                sum_i = 0\n                for j in range(1, i + 1):\n                    sum_i += j\n                result.append(sum_i)\n        return result"}
{"task_id": "HumanEval/107", "completion": "def palindrome_count(n):\n    even_count, odd_count = 0, 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_positive_sum(arr):\n    counter = 0\n    for num in arr:\n        digits = list(map(int, str(abs(num))))\n        if num < 0:\n            digits[0] = -digits[0]\n        if sum(digits) > 0:\n            counter += 1\n    return counter"}
{"task_id": "HumanEval/109", "completion": "def circularArrayLoop(nums):\n    if not nums:\n        return True\n    n = len(nums)\n    min_index = nums.index(min(nums))\n    if min_index == 0:\n        return True\n    slow, fast = nums[min_index], nums[min_index]\n    while True:\n        slow = nums[nums.index(slow)]\n        if slow == 0:\n            return True\n        fast = nums[nums.index(nums[nums.index(fast)])]\n        if slow == fast:\n            return True\n        if slow == nums[min_index]:\n            return False"}
{"task_id": "HumanEval/110", "completion": "def solve(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    if count_odd == 0:\n        return \"YES\"\n    else:\n        count_odd_lst2 = sum(num % 2 != 0 for num in lst2)\n        return \"YES\" if count_odd_lst2 >= count_odd else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def most_frequent_letters(s):\n    letter_counts = {}\n    for letter in s:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n\n    max_count = max(letter_counts.values())\n    most_frequent = {letter: count for letter, count in letter_counts.items() if count == max_count}\n\n    return most_frequent"}
{"task_id": "HumanEval/112", "completion": "def remove_chars(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result[::-1], result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "def count_odd_digits(strings):\n    result = []\n    for string in strings:\n        counter = 0\n        for char in string:\n            if int(char) % 2 == 1:\n                counter += 1\n        result.append(counter)\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArray(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "import math\n\ndef trap(height):\n    if not height:\n        return 0\n\n    total_water = 0\n    capacity = 2\n\n    for row in range(len(height)):\n        water_in_row = 0\n        for col in range(len(height[row])):\n            if height[row][col] == 1:\n                water_in_row += 1\n        total_water += math.ceil(water_in_row / capacity)\n\n    return total_water"}
{"task_id": "HumanEval/116", "completion": "def sort_by_ones_and_value(arr):\n    sorted_list = sorted([(bin(num).count('1'), num, num) for num in arr], key=lambda x: (x[0], x[1]))\n    return [num for _, _, num in sorted_list]"}
{"task_id": "HumanEval/117", "completion": "def words_with_n_consonants(text, n):\n    vowels = \"aeiou\"\n    words = text.split()\n    words_with_n_consonants = []\n\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.lower() not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            words_with_n_consonants.append(word)\n\n    return words_with_n_consonants"}
{"task_id": "HumanEval/118", "completion": "def last_vowel(word):\n    result = ''\n    vowels = set('aeiou')\n    for char in reversed(word):\n        if char.lower() in vowels:\n            if word.rindex(char) == len(word) - 1 or word[word.rindex(char) + 1].lower() not in vowels:\n                result = char\n                break\n    return result\n\nprint(last_vowel('hello'))  # Output: e\nprint(last_vowel('beautiful'))  # Output: i\nprint(last_vowel('world'))  # Output:"}
{"task_id": "HumanEval/119", "completion": "def is_good_parentheses(s1, s2):\n    counter = 0\n    for char in s1:\n        if char == '(':\n            counter += 1\n        elif char == ')':\n            counter -= 1\n        if counter < 0:\n            return 'No'\n    if counter == 0:\n        return 'Yes'\n    for char in s2:\n        if char == '(':\n            counter += 1\n        elif char == ')':\n            counter -= 1\n        if counter < 0:\n            return 'No'\n    return 'Yes' if counter == 0 else 'No'"}
{"task_id": "HumanEval/120", "completion": "def max_k_numbers(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(val for i, val in enumerate(lst) if i % 2 == 0 and val % 2 == 1)"}
{"task_id": "HumanEval/122", "completion": "def sum_two_digit_numbers(arr, k):\n    sum = 0\n    for i in range(k):\n        if arr[i] <= 99:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def collatz_sequence(n):\n    collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            collatz_list.append(n)\n        n = n // 2\n    collatz_list.append(1)\n    return sorted(collatz_list)"}
{"task_id": "HumanEval/124", "completion": "def is_valid_date(date_string):\n    valid_month_lengths = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n\n    date_parts = date_string.split('-')\n    if len(date_parts) != 3:\n        return False\n\n    month, day, year = int(date_parts[0]), int(date_parts[1]), int(date_parts[2])\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day > valid_month_lengths[month]:\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "def process_string(s):\n    if ' ' in s:\n        return s.split()\n    elif ',' in s:\n        return s.split(',')\n    else:\n        return sum(1 for c in s if c.islower() and (ord(c) - ord('a')) % 2 == 1)\n\n# Test the function\nprint(process_string(\"Hello, how are you?\"))\nprint(process_string(\"Hello how are you\"))\nprint(process_string(\"abcdefghijklmnopqrstuvwxyz\"))"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    previous = None\n    for i in lst:\n        if previous is not None:\n            if i == previous or i < previous:\n                return False\n        previous = i\n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef interval_intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start >= end:\n        return \"NO\"\n    \n    length = end - start\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def find_product_sign(nums):\n    result = 0\n    sign_product = 1\n    if not nums:\n        return None\n    for num in nums:\n        if num == 0:\n            return 0\n        if num > 0:\n            sign_product += 1\n        if num < 0:\n            sign_product *= -1\n        result += abs(num) * sign_product\n    return result"}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef shortest_path(grid, k):\n    m, n = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    heap = [(grid[0][0], [grid[0][0]])]\n    visited = {(0, 0): grid[0][0]}\n\n    while heap and len(heap[0][1]) < k:\n        cost, path = heapq.heappop(heap)\n        x, y = path[-1], path[-2] if len(path) > 1 else (0, 0)\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited or (nx, ny) in visited and visited[nx, ny] > cost + grid[nx][ny]:\n                visited[nx, ny] = cost + grid[nx][ny]\n                heapq.heappush(heap, (cost + grid[nx][ny], path + [grid[nx][ny]]))\n\n    return heap[0][1] if heap else []"}
{"task_id": "HumanEval/130", "completion": "def tribonacci(n):\n    if n == 0:\n        return [1, 3, 2]\n    elif n == 1:\n        return [1, 3, 2, 1]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8, 13]\n    \n    seq = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(seq[-1] + seq[-2] + seq[-3])\n    return seq"}
{"task_id": "HumanEval/131", "completion": "def product_of_odd_digits(n):\n    product = 1\n    for c in str(n):\n        if int(c) % 2 != 0:\n            product *= int(c)\n    return product - 1 if product != 1 else 0"}
{"task_id": "HumanEval/132", "completion": "def is_valid_brackets(s):\n    counter = 0\n    for char in s:\n        if char == '(':\n            counter += 1\n        elif char == ')':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_of_squares(lst):\n    sum = 0\n    for num in lst:\n        sum += math.ceil(num) ** 2\n    return sum"}
{"task_id": "HumanEval/134", "completion": "def ends_with_letter(s):\n    if not s:\n        return False\n    words = s.split(' ')\n    last_char = words[-1][-1]\n    return last_char.isalpha()"}
{"task_id": "HumanEval/135", "completion": "def find_index(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "def find_max_neg_min_pos(lst):\n    max_neg = None\n    min_pos = None\n\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n\n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "def max_of_two_numbers(a, b):\n    if type(a) != type(b):\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "def find_four_numbers(n):\n    if n < 10:\n        return False\n    for i in range(2, n + 1, 2):\n        for j in range(2, n + 1 - i, 2):\n            for k in range(2, n + 1 - i - j, 2):\n                l = n - i - j - k\n                if l % 2 == 0 and l >= 2:\n                    return True\n    return False\n\nprint(find_four_numbers(100))  # Example usage"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n        result = 1\n        for i in range(n, 0, -1):\n            result *= i\n        return result"}
{"task_id": "HumanEval/140", "completion": "def replace_spaces(text):\n    result = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            if i + 1 < len(text) and text[i + 1] == \" \":\n                result += \"-\"\n                continue\n            else:\n                result += \"_\"\n        else:\n            result += text[i]\n    return result"}
{"task_id": "HumanEval/141", "completion": "def is_valid_file_name(file_name):\n    digits = set()\n    dot_count = 0\n    letter_pos = None\n    for i, char in enumerate(file_name):\n        if char.isdigit():\n            digits.add(char)\n        elif char == '.':\n            dot_count += 1\n            if len(digits) > 3:\n                return 'No'\n        else:\n            if letter_pos is None:\n                letter_pos = i\n    if len(digits) > 3 or dot_count != 1:\n        return 'No'\n    if file_name[letter_pos] not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n    if file_name[letter_pos + 1:].split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def modified_sum(lst):\n    sum = 0\n    for i, entry in enumerate(lst):\n        if i % 3 == 0:\n            sum += entry ** 2\n        elif i % 4 == 0:\n            sum += entry ** 3\n        else:\n            sum += entry\n    return sum"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_words(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    new_num = x_num * n_num\n    new_den = x_den * n_den\n    return new_num % new_den == 0"}
{"task_id": "HumanEval/145", "completion": "def sort_numbers(numbers):\n    sorted_numbers = sorted([(sum(int(digit) for digit in str(num)), i, num) for i, num in enumerate(numbers)])\n    return [num for _, _, num in sorted_numbers]"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 == 1 and num // 10 % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def count_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            for k in range(j, n + 1):\n                if (i + j + k) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def planets_between(planet1, planet2, planet_list):\n    planet_list = [planet.lower() for planet in planet_list]\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n\n    if planet1 not in planet_list or planet2 not in planet_list:\n        return ()\n\n    index1 = planet_list.index(planet1)\n    index2 = planet_list.index(planet2)\n\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    return tuple(planet_list[index1:index2+1])\n\n# Example usage:\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nprint(planets_between(\"Earth\", \"Mars\", planets))  # Output: ('Earth', 'Mars')\nprint(planets_between(\"Jupiter\", \"Uranus\", planets))  # Output: ('Jupiter', 'Saturn', 'Uranus')\nprint(planets_between(\"Pluto\", \"Neptune\", planets))  # Output: ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n        even_length_strings = [s for s in lst if len(s) % 2 == 0]\n        even_length_strings.sort(key=lambda s: (len(s), s))\n        return even_length_strings"}
{"task_id": "HumanEval/150", "completion": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nif is_prime(n):\n    return x\nelse:\n    return y"}
{"task_id": "HumanEval/151", "completion": "def sum_of_squares_of_odd_numbers(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "def score_differences(scores, guesses):\n    results = []\n    for score, guess in zip(scores, guesses):\n        if score == guess:\n            results.append(0)\n        else:\n            results.append(abs(score - guess))\n    return results"}
{"task_id": "HumanEval/153", "completion": "def strongest_extension(extensions):\n    strongest_ext = extensions[0]\n    strongest_strength = sum(1 for c in strongest_ext if c.isupper()) - sum(1 for c in strongest_ext if c.islower())\n\n    for ext in extensions[1:]:\n        strength = sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n        if strength > strongest_strength:\n            strongest_ext = ext\n            strongest_strength = strength\n\n    return f\"Strongest extension: {strongest_ext}\"\n\n# Test the function\nextensions = [\"Ext1\", \"ext2\", \"EXt3\", \"exT4\", \"Ext5\", \"EXT6\", \"ext7\", \"EXt8\", \"exT9\", \"Ext10\"]\nprint(strongest_extension(extensions))"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a , b):\n    found = False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            found = True\n            break\n    return found"}
{"task_id": "HumanEval/155", "completion": "def count_even_odd(num):\n    num = abs(num)  # Convert the number to positive\n    num_str = str(num)  # Convert the number to string\n    even_counter = 0\n    odd_counter = 0\n\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_counter += 1\n        else:\n            odd_counter += 1\n\n    return (even_counter, odd_counter)"}
{"task_id": "HumanEval/156", "completion": "def intToRoman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    longest_side = max(a, b, c)\n    for side in (a, b, c):\n        if side > longest_side:\n            longest_side = side\n    return longest_side == c"}
{"task_id": "HumanEval/158", "completion": "def word_with_most_unique_chars(words):\n    max_unique_chars = 0\n    max_word = None\n\n    for word in words:\n        unique_chars = len(set(word))\n\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            if word < max_word:\n                max_word = word\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat_carrots(remaining_carrots, need_carrots):\n    total_eaten = 0\n    if need_carrots > remaining_carrots:\n        total_eaten += remaining_carrots\n        remaining_carrots = 0\n    else:\n        total_eaten += need_carrots\n        remaining_carrots -= need_carrots\n    return [total_eaten, remaining_carrots]"}
{"task_id": "HumanEval/160", "completion": "def calculate(operands, operators):\n    result = operands[0]\n    for operator, operand in zip(operators, operands[1:]):\n        if operator == '+':\n            result += operand\n        elif operator == '-':\n            result -= operand\n        elif operator == '*':\n            result *= operand\n        elif operator == '//':\n            result //= operand\n        elif operator == '**':\n            result **= operand\n    return result"}
{"task_id": "HumanEval/161", "completion": "def reverse_case(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result if result else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef md5_hash(input_string):\n    if not input_string:\n        return None\n    md5 = hashlib.md5()\n    md5.update(input_string.encode('utf-8'))\n    return md5.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def even_digits(a, b):\n    even_digits = []\n    a, b = min(a, b), max(a, b)\n    for num in range(a, b + 1):\n        for digit in str(num):\n            if digit not in '13579':\n                even_digits.append(int(digit))\n    return sorted(even_digits)"}