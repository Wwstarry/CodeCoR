{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if any two numbers in the list are closer to each other than the given threshold.\n\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    \n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those groups into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    balance = 0\n    current_group = []\n\n    for char in paren_string:\n        if char == ' ':\n            continue\n        current_group.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance == 0 and current_group:\n            result.append(''.join(current_group))\n            current_group = []\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "import math\n\ndef truncate_number(number: float) -> float:\n    fractional_part, _ = math.modf(number)\n    return fractional_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(nums):\n    balance = 0\n    for num in nums:\n        balance += num\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0\n    \n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    interspersed_list = []\n    for i in range(len(numbers)):\n        interspersed_list.append(numbers[i])\n        if i < len(numbers) - 1:  # Check if not the last element\n            interspersed_list.append(delimeter)\n    return interspersed_list"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Parses a string of groups of nested parentheses and returns the deepest level of nesting for each group.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    results = []\n    groups = paren_string.split()\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        \n        results.append(max_depth)\n    \n    return results"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings, substring):\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring\n\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    >>> filter_by_substring(['python', 'java', 'javascript'], 'java')\n    ['java', 'javascript']\n    >>> filter_by_substring(['hello', 'world', 'python'], 'xyz')\n    []\n    \"\"\"\n\n    filtered_strings = []\n    for s in strings:\n        if substring in s:\n            filtered_strings.append(s)\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in the list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    \n    sum_value = 0\n    product_value = 1\n    \n    for num in numbers:\n        sum_value += num\n        product_value *= num\n    \n    return (sum_value, product_value)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    current_max = float('-inf')  # Initialize current_max to negative infinity\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    \n    return result"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Returns the shortest palindrome that begins with the given string.\n    \"\"\"\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    if not string:\n        return ''\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    # If no palindromic suffix found, return string itself reversed\n    return string + string[:-1][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for bit_a, bit_b in zip(a, b):\n        result += '1' if bit_a != bit_b else '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    \n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    max_length_str = strings[0]\n    max_length = len(strings[0])\n    \n    for s in strings[1:]:\n        if len(s) > max_length:\n            max_length_str = s\n            max_length = len(s)\n    \n    return max_length_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of two integers a and b.\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string\n    \n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of.\n    \"\"\"\n    # Convert string to lowercase to make the counting case insensitive\n    string = string.lower()\n    \n    # Use a set to store unique characters\n    unique_chars = set()\n    \n    # Iterate through each character in the string\n    for char in string:\n        unique_chars.add(char)\n    \n    # Return the number of unique characters\n    return len(unique_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parse a string representing musical notes and return a list of integers indicating beat counts.\n    \n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    \n    beat_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    beats = []\n    notes = music_string.split()\n    \n    for note in notes:\n        if note in beat_map:\n            beats.append(beat_map[note])\n        else:\n            raise ValueError(f\"Invalid note found: {note}\")\n    \n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    if len(substring) == 0 or len(substring) > len(string):\n        return 0\n\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda word: num_map[word])\n    return ' '.join(sorted_words)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    # Handle case where all numbers are the same\n    if min_value == max_value:\n        return [0.0] * len(numbers)\n    \n    value_range = max_value - min_value\n    scaled_numbers = [(num - min_value) / value_range for num in numbers]\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string.\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    >>> largest_divisor(15)\n    5\n    >>> largest_divisor(64)\n    32\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    \n    Examples:\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    \n    factors = []\n    # Check for number of 2s\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    \n    # Check for odd factors from 3 upwards\n    divisor = 3\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 2\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    \n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    >>> flip_case('WORLD')\n    'world'\n    >>> flip_case('python')\n    'PYTHON'\n    >>> flip_case('PyThOn')\n    'pYtHoN'\n    >>> flip_case('12345')\n    '12345'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into a single string.\n\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = ''\n    for s in strings:\n        result += s\n    return result"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n    ['bcd']\n    \"\"\"\n    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"\n    Return True if a given number is prime, and False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True  # 2 is a prime number\n    if n % 2 == 0:\n        return False  # Other even numbers are not prime\n\n    # Check for odd divisors from 3 up to sqrt(n)\n    limit = int(n**0.5) + 1\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return False\n\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs, x):\n    # Define your polynomial function here\n    # This is a placeholder for your actual polynomial function\n    pass\n\ndef find_zero(xs: list):\n    a, b = -1, 1\n    while poly(xs, a) * poly(xs, b) > 0:\n        a -= 1\n        b += 1\n    while b - a > 0.00001:\n        mid = (a + b) / 2\n        if poly(xs, a) * poly(xs, mid) < 0:\n            b = mid\n        else:\n            a = mid\n    return a"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_sorted = l[:]  # Create a copy of the list to avoid modifying the original\n    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    \n    for idx in indices_divisible_by_three:\n        l_sorted[idx] = sorted(l_sorted[idx])  # Use l_sorted instead of l\n    \n    return l_sorted"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n# Testing the Function\nassert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\nassert unique([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\nassert unique([10, 9, 8, 7, 6, 5]) == [5, 6, 7, 8, 9, 10]\nassert unique([1, 1, 1, 1, 1]) == [1]\nassert unique([]) == []\nassert unique([-1, -2, -3, -1, -2, -3]) == [-3, -2, -1]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"\n    Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_value = float('-inf')  # Start with a very small number\n    for num in l:\n        if num > max_value:\n            max_value = num\n    return max_value"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            count += str(num).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"\n    Returns a modified list where values at odd indices are unchanged,\n    and values at even indices are sorted.\n\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    if len(l) <= 1:\n        return l\n    \n    # Separate odd and even indexed elements\n    odd_indices = l[0::2]  # Elements at 0, 2, 4, ... indices\n    even_indices = sorted(l[1::2])  # Elements at 1, 3, 5, ... indices sorted\n    \n    # Combine odd and sorted even indexed elements\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(odd_indices[i//2])\n        else:\n            result.append(even_indices[(i-1)//2])\n    \n    return result"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    >>> encode_cyclic(\"abcdef\")\n    'bcdaef'\n    >>> encode_cyclic(\"pythonista\")\n    'ythpnotisa'\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n):\n    fib1, fib2 = 0, 1\n    prime_fib_count = 0\n    while True:\n        fib = fib1 + fib2\n        fib1, fib2 = fib2, fib\n        if is_prime(fib):\n            prime_fib_count += 1\n            if prime_fib_count == n:\n                return fib\n\n### Testing the Function:\nassert prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(4) == 13\nassert prime_fib(5) == 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue  # Skip the same element to avoid duplicate triples\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Returns the number of collisions when n cars on the left side pass n cars on the right side.\n    \"\"\"\n    return n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"\n    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    Return True if there are two distinct elements in the list that sum to zero, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"\n    Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    \"\"\"\n    if x == 0:\n        return '0'\n\n    digits = []\n    while x > 0:\n        remainder = x % base\n        if remainder < 10:\n            digits.append(str(remainder))\n        else:\n            digits.append(chr(ord('A') + remainder - 10))\n        x = x // base\n    \n    digits.reverse()\n    \n    return ''.join(digits)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"\n    Given length of a side and height, return the area of a triangle.\n\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib_seq = [0, 0, 2, 0]\n\n    for i in range(4, n + 1):\n        next_value = fib_seq[-1] + fib_seq[-2] + fib_seq[-3] + fib_seq[-4]\n        fib_seq.append(next_value)\n\n    return fib_seq[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"\n    Return median of elements in the list l.\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    >>> decode_shift('fghij')\n    'abcde'\n    >>> decode_shift('xyzabc')\n    'stuvwx'\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n\n# Testing the function\nassert remove_vowels('') == ''\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\nassert remove_vowels('abcdef') == 'bcdf'\nassert remove_vowels('aaaaa') == ''\nassert remove_vowels('aaBAA') == 'B'\nassert remove_vowels('zbcd') == 'zbcd'"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters with the same frequencies.\n    \"\"\"\n    return Counter(s0) == Counter(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Memoization dictionary\n    memo = {}\n    \n    # Recursive function with memoization\n    def fibonacci(n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            memo[n] = fibonacci(n-1) + fibonacci(n-2)\n            return memo[n]\n    \n    return fibonacci(n)\n\n# Test cases\nassert fib(0) == 0  # fib(0) should return 0\nassert fib(1) == 1  # fib(1) should return 1\nassert fib(2) == 1  # fib(2) should return 1\nassert fib(5) == 5  # fib(5) should return 5\nassert fib(10) == 55  # fib(10) should return 55"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    Return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    \n    # Check if the list is monotonically increasing\n    is_increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    if is_increasing:\n        return True\n    \n    # Check if the list is monotonically decreasing\n    is_decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n    if is_decreasing:\n        return True\n    \n    return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"\n    Return sorted unique common elements for two lists.\n\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert lists to sets to find unique elements efficiently\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find intersection of the two sets\n    common_elements = set1 & set2\n    \n    # Convert set to sorted list\n    result = sorted(common_elements)\n    \n    return result"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Start with the smallest prime factor\n    largest_factor = 1\n    # Check for the number of 2s that divide n\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    # n must be odd at this point, thus a step of 2 (i.e., 3, 5, 7, ...)\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    # This condition is to handle the case when n is a prime number\n    # greater than 2\n    if n > 2:\n        largest_factor = n\n    return largest_factor"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n):\n    \"\"\"\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n <= 0:\n        return 0\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    Check if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"\n    Return the n-th element of the FibFib number sequence.\n\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    fibfib_arr = [0] * (n + 1)\n    fibfib_arr[0] = 0\n    fibfib_arr[1] = 0\n    fibfib_arr[2] = 1\n    \n    for i in range(3, n + 1):\n        fibfib_arr[i] = fibfib_arr[i-1] + fibfib_arr[i-2] + fibfib_arr[i-3]\n    \n    return fibfib_arr[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"\n    Returns the number of vowels in the string s.\n    \n    Vowels are 'a', 'e', 'i', 'o', 'u'. Additionally, 'y' is considered a vowel\n    only if it appears at the end of the word.\n\n    Examples:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    s = s.lower()  # Convert the string to lowercase to make it case insensitive\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        elif s[i] == 'y' and i == len(s) - 1:  # 'y' is a vowel only at the end of the word\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    length = len(x_str)\n    \n    if shift > length:\n        return x_str[::-1]\n    else:\n        shifted_str = x_str[-shift:] + x_str[:-shift]\n        return shifted_str"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"\n    Return the sum of ASCII values of uppercase letters in the input string s.\n    \n    >>> digitSum(\"\") => 0\n    >>> digitSum(\"abAB\") => 131\n    >>> digitSum(\"abcCd\") => 67\n    >>> digitSum(\"helloE\") => 69\n    >>> digitSum(\"woArBld\") => 131\n    >>> digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum_ascii = 0\n    for char in s:\n        if char.isupper():\n            sum_ascii += ord(char)\n    return sum_ascii"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    \"\"\"\n    Return the number of mango fruits in the basket.\n\n    Parameters:\n    - s (str): String representation of apples and oranges, e.g., \"5 apples and 6 oranges\".\n    - n (int): Total number of fruits in the basket.\n\n    Returns:\n    - int: Number of mango fruits.\n\n    Examples:\n    >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n    19\n    \"\"\"\n    # Split the string by spaces\n    parts = s.split()\n    # Extract numbers from the string parts\n    apples = int(parts[0]) if parts[0].isdigit() else 0\n    oranges = int(parts[3]) if parts[3].isdigit() else 0\n    # Calculate mango fruits\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example:\n        Input: []\n        Output: []\n\n    Example:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    smallest_value = None\n    smallest_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # check if the value is even\n            if smallest_value is None or value < smallest_value or (value == smallest_value and index < smallest_index):\n                smallest_value = value\n                smallest_index = index\n\n    if smallest_value is None:\n        return []\n    else:\n        return [smallest_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    \"\"\"\n    Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself.\n    If no such value exists, return -1.\n    \n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frequency = {}\n    \n    # Count frequencies of each integer in the list\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Find the largest integer that satisfies the condition\n    result = -1\n    for num, freq in frequency.items():\n        if num > 0 and freq >= num:\n            if num > result:\n                result = num\n    \n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    lst.sort()  # Sort the input list in ascending order\n    \n    while lst:\n        result.append(lst.pop(0))  # Add the smallest remaining element\n        if lst:\n            result.append(lst.pop())  # Add the largest remaining element\n    \n    return result"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle, calculate the area\n    of the triangle rounded to 2 decimal points if it's a valid triangle.\n    Return -1 if the sides do not form a valid triangle.\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    \n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    \"\"\"\n    Return True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list)\n    and the sum of its elements is less than or equal the maximum possible weight w.\n    \"\"\"\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n        \n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    \"\"\"\n    Return the list with the total number of characters in its strings less than the other list,\n    or the first list if they have the same number of characters.\n\n    Args:\n    - lst1: First list of strings\n    - lst2: Second list of strings\n\n    Returns:\n    - List: The list with fewer total characters or the first list if they are equal.\n    \"\"\"\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    \n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"\n    Returns True if the given number is the multiplication of 3 prime numbers less than 100, False otherwise.\n    >>> is_multiply_prime(30)\n    True\n    \"\"\"\n    # Hardcoded list of prime numbers less than 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Check all combinations of three primes\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n, False otherwise.\n    A number x is a simple power of n if x = n^k for some integer k.\n    \"\"\"\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    \n    original_x = x\n    while x > 1:\n        if x % n != 0:\n            return False\n        x //= n\n    \n    return original_x % n == 0"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    \"\"\"\n    Return True if a is a cube of some integer number, False otherwise.\n    \"\"\"\n    if a < 0:\n        a = -a  # take absolute value for negative numbers\n    cube_root = round(a ** (1/3))  # find the cube root and round to nearest integer\n    return cube_root ** 3 == a  # check if cube of the rounded root equals a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"\n    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert a decimal number to a binary string format surrounded by 'db' at both ends.\n    Each character in the resulting string represents a binary digit ('0' or '1').\n\n    Examples:\n    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n    'db100000db'\n    \"\"\"\n    binary_representation = bin(decimal)[2:]  # Get binary string without '0b' prefix\n    return f\"db{binary_representation}db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"\n    Check if the given string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2, 3):\n        if s[i]==s[i+1] or s[i]==s[i+2] or s[i+1]==s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert a list of GPAs to corresponding letter grades based on predefined thresholds.\n    \n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    result = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            result.append('A+')\n        elif gpa >= 3.7:\n            result.append('A')\n        elif gpa >= 3.3:\n            result.append('A-')\n        elif gpa >= 3.0:\n            result.append('B+')\n        elif gpa >= 2.7:\n            result.append('B')\n        elif gpa >= 2.3:\n            result.append('B-')\n        elif gpa >= 2.0:\n            result.append('C+')\n        elif gpa >= 1.7:\n            result.append('C')\n        elif gpa >= 1.3:\n            result.append('C-')\n        elif gpa >= 1.0:\n            result.append('D+')\n        elif gpa >= 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"\n    Return True if the length of the string is a prime number, False otherwise.\n    \n    Examples:\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    n = len(string)\n    \n    if n <= 1:\n        return False\n    \n    # Check for prime number\n    if n == 2:\n        return True\n    \n    if n % 2 == 0:\n        return False\n    \n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 2  # Numbers: 1, 11\n    \n    start_with_1 = 9 * 10**(n-1)  # Numbers that start with 1\n    end_with_1 = 10**(n-1)       # Numbers that end with 1\n    \n    return start_with_1 + end_with_1"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_representation = bin(N)[2:]\n    sum_of_digits = sum(int(digit) for digit in binary_representation)\n    binary_sum_string = bin(sum_of_digits)[2:]\n    return binary_sum_string"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    total_sum = 0\n    for i in range(1, len(lst), 2):  # Start from index 1 and step by 2 to get odd indices\n        if lst[i] % 2 == 0:\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    Given a 2-dimensional list lst and integer x, find occurrences of x\n    and return list of tuples [(x1, y1), (x2, y2) ...] such that each tuple\n    is a coordinate - (row, column), starting with 0. Coordinates are sorted\n    initially by rows in ascending order and by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    \n    for row_index, row in enumerate(lst):\n        for col_index, value in sorted(enumerate(row), key=lambda x: -x[0]):\n            if value == x:\n                result.append((row_index, col_index))\n    \n    result.sort(key=lambda x: (x[0], -x[1]))\n    \n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n    first = array[0]\n    last = array[-1]\n    sum_first_last = first + last\n\n    if sum_first_last % 2 == 1:  # odd sum\n        return sorted(array)\n    else:  # even sum\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    crypted = ''\n    for char in s:\n        crypted += chr((ord(char) - 97 + 4) % 26 + 97)\n    return crypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    >>> next_smallest([1, 2, 3, 4, 5])\n    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1, 1])\n    None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    unique_elements = sorted(set(lst))\n    \n    if len(unique_elements) < 2:\n        return None\n    \n    return unique_elements[1]\n\n# Testing the function\nassert next_smallest([1, 2, 3, 4, 5]) == 2  # Second smallest is 2\nassert next_smallest([5, 1, 4, 3, 2]) == 2  # Second smallest is 2\nassert next_smallest([]) == None  # Empty list, return None\nassert next_smallest([1, 1]) == None  # Only one unique element, return None\nassert next_smallest([3, 1, 4, 2, 2, 5]) == 2  # Second smallest is 2\nassert next_smallest([10, 20, 10, 30, 40]) == 20  # Second smallest is 20"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\" \n    Count the number of boredoms in S.\n    \"\"\"\n    S = S.replace('?', '.').replace('!', '.')\n    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    \"\"\"\n    Returns True if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns False otherwise.\n    \"\"\"\n    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowel_map = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    encoded_message = []\n    for char in message:\n        if char.lower() in vowel_map:\n            encoded_message.append(vowel_map[char.lower()])\n        else:\n            encoded_message.append(char.swapcase())\n    \n    return ''.join(encoded_message)"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime in the list and return the sum of its digits.\"\"\"\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    if largest_prime == -1:\n        return 0\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    \n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    \n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"\n    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"\n    if n < 2:\n        return []\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # Define uppercase vowels\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    \n    # Iterate over even indices\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    \"\"\"\n    Return the closest integer to the given value (string).\n\n    Examples:\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    >>> closest_integer(\"3.5\")\n    4\n    \"\"\"\n    # Convert input to float\n    num = float(value)\n    \n    # Determine the two closest integers\n    lower_int = int(num)\n    upper_int = lower_int + 1\n    \n    # Calculate distances from num to the two integers\n    distance_lower = abs(num - lower_int)\n    distance_upper = abs(num - upper_int)\n    \n    # Choose the closest integer based on the distance\n    if distance_lower < distance_upper:\n        closest = lower_int\n    elif distance_upper < distance_lower:\n        closest = upper_int\n    else:\n        # If equidistant, round away from zero\n        closest = upper_int if num >= 0 else lower_int\n    \n    return closest"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, create a pile of stones with n levels.\n    The first level has n stones.\n    Subsequent levels increase by the next odd number if n is odd,\n    or the next even number if n is even.\n    Return the list of stone counts for each level.\n    \"\"\"\n    result = []\n    current_stones = n\n    \n    for i in range(n):\n        result.append(current_stones)\n        if n % 2 == 0:\n            current_stones += 1\n        else:\n            current_stones += 2\n    \n    return result"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    \"\"\"\n    Split the input string into words separated by commas or spaces.\n    \n    Example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string by spaces or commas\n    words = re.split(r'[,\\s]+', s)\n    \n    # Remove empty strings and strip commas from words\n    words = [word.strip(',') for word in words if word.strip()]\n    \n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"\n    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    elif (y - 1) >= x:\n        return y - 1\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    \n    if count == 0:\n        return -1  # Prevent division by zero in case of unexpected input\n    \n    average = round(total_sum / count)\n    \n    return bin(average)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result=[i for i in x if all(int(ch)%2 for ch in str(i))]\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    digit_to_word = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", \n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter and sort valid digits\n    valid_digits = sorted([num for num in arr if 1 <= num <= 9])\n    \n    # Reverse the sorted list\n    valid_digits.reverse()\n    \n    # Map digits to words\n    result = [digit_to_word[num] for num in valid_digits]\n    \n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    \"\"\"\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    \"\"\"\n    def factorial(i):\n        \"\"\"Helper function to compute factorial of i.\"\"\"\n        result = 1\n        for num in range(1, i + 1):\n            result *= num\n        return result\n    \n    def sum_up_to(i):\n        \"\"\"Helper function to compute sum of numbers from 1 to i.\"\"\"\n        return i * (i + 1) // 2\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_up_to(i))\n    \n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    for num in range(1, n+1):\n        if str(num) == str(num)[::-1]:  # Check if the number is a palindrome\n            if num % 2 == 0:  # Check if the number is even\n                even_count += 1\n            else:  # The number is odd\n                odd_count += 1\n    \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Count the number of elements in the array `arr` whose sum of digits is greater than 0.\n    \n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_of_digits(num):\n        num = abs(num)\n        sum_digits = 0\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        return sum_digits\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True  # Empty or one element array is already sorted\n\n    for i in range(n):\n        # Check if array from index i to end followed by start to i-1 is sorted\n        rotated_arr = arr[i:] + arr[:i]\n        if all(rotated_arr[j] <= rotated_arr[j+1] for j in range(n-1)):\n            # If this rotation results in a sorted array\n            return True\n    \n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    from collections import Counter\n    \n    if not test:\n        return {}\n    \n    # Split the input string and count the occurrences of each letter\n    letter_list = test.split()\n    letter_counts = Counter(letter_list)\n    \n    # Find the maximum count\n    max_count = max(letter_counts.values())\n    \n    # Create a dictionary with letters that have the maximum count\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"\n    Given two strings s and c, delete all characters in s that are in c,\n    then check if the result string is palindrome.\n\n    Returns a tuple (result_string, is_palindrome).\n    \"\"\"\n    result_chars = []\n    for char in s:\n        if char not in c:\n            result_chars.append(char)\n    \n    result_string = ''.join(result_chars)\n    \n    is_palindrome = result_string == result_string[::-1]\n    \n    return (result_string, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for num in lst:\n        odd_digits = sum(c in '13579' for c in num)\n        result.append(\"The number of odd elements in the string '{}' of the input is {}.\".format(num, odd_digits))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    >>> minSubArraySum([1,2,-1])\n    -1\n    >>> minSubArraySum([-5,-2,-3,-4])\n    -14\n    \"\"\"\n    current_min = global_min = nums[0]\n    for i in range(1, len(nums)):\n        current_min = min(nums[i], current_min + nums[i])\n        global_min = min(global_min, current_min)\n    return global_min"}
{"task_id": "HumanEval/115", "completion": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    Given a rectangular grid of wells represented by 0s and 1s,\n    and a bucket capacity, return the number of times you need to\n    lower the buckets to empty all wells.\n\n    Args:\n    - grid: List[List[int]] - a grid where each inner list represents a row of wells (1s for water, 0s for no water)\n    - capacity: int - capacity of each bucket (maximum units of water it can hold)\n\n    Returns:\n    - int - the number of times you need to lower the buckets\n    \"\"\"\n\n    total_operations = 0\n\n    for row in grid:\n        total_units = sum(row)\n        total_operations += math.ceil(total_units / capacity)\n\n    return total_operations"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr)"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    vowels = 'aeiou'\n    selected_words = []\n    for word in words:\n        consonant_count = sum(1 for letter in word.lower() if letter not in vowels)\n        if consonant_count == n:\n            selected_words.append(word)\n    return selected_words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"\n    Return the closest vowel that stands between two consonants from the right side of the word.\n    If no such vowel exists, return an empty string.\n    \"\"\"\n    vowels = set('aeiouAEIOU')\n    consonants_seen = False\n    \n    # Iterate over the word in reverse\n    for char in reversed(word):\n        if char in vowels and consonants_seen:\n            return char\n        elif char not in vowels:\n            consonants_seen = True\n    \n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    '''\n    Return 'Yes' if it's possible to concatenate the two strings in `lst` in some order\n    to form a balanced parentheses sequence, otherwise return 'No'.\n    '''\n    count_open = lst[0].count('(') + lst[1].count('(')\n    count_close = lst[0].count(')') + lst[1].count(')')\n    \n    if count_open == count_close:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n\n    return sorted(sorted(arr, reverse=True)[:k])"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):  # iterate through even indices only\n        if lst[i] % 2 != 0:  # check if the element at the even index is odd\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    total_sum = 0\n    for i in range(k):\n        if 1 <= arr[i] < 100:  # Sum elements with at most two digits\n            total_sum += arr[i]\n    return total_sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_numbers = []\n    \n    while n != 1:\n        if n % 2 != 0:  # n is odd\n            odd_numbers.append(n)\n        else:  # n is even\n            n = n // 2\n            continue\n        \n        n = 3 * n + 1\n    \n    odd_numbers.append(1)  # Adding 1 since Collatz(1) = [1]\n    \n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    Validate a date string in the format 'mm-dd-yyyy'.\n    Return True if valid, False otherwise.\n    \"\"\"\n    if not date:\n        return False\n    \n    # Split the date into components\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    # Validate month\n    if month < 1 or month > 12:\n        return False\n    \n    # Validate day based on month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:  # February (month 2)\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            max_days = 29  # Leap year\n        else:\n            max_days = 28  # Non-leap year\n    \n    if day < 1 or day > max_days:\n        return False\n    \n    # Validate year (not strictly necessary for this problem statement)\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    \"\"\"\n    # Check if list is sorted\n    if lst != sorted(lst):\n        return False\n    \n    # Check for more than one duplicate\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    \n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start >= end:\n        return \"NO\"\n    elif is_prime(end - start):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        # If num == 0, sign_product remains unchanged\n        \n        magnitude_sum += abs(num)\n    \n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    pq = []\n    for i in range(n):\n        for j in range(n):\n            heapq.heappush(pq, (grid[i][j], [(i, j)], [grid[i][j]]))\n    \n    while pq:\n        _, path, values = heapq.heappop(pq)\n        if len(path) == k:\n            return values\n        \n        last_i, last_j = path[-1]\n        for di, dj in directions:\n            ni, nj = last_i + di, last_j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in path:\n                new_path = path + [(ni, nj)]\n                new_values = values + [grid[ni][nj]]\n                heapq.heappush(pq, (sum(new_values), new_path, new_values))\n    \n    return []"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"\n    Return a list of the first n + 1 numbers of the Tribonacci sequence.\n    >>> tri(3)\n    [3, 1, 2, 6]\n    >>> tri(0)\n    [3]\n    \"\"\"\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    \n    sequence = [3, 1, 2]  # Initialize with T(0), T(1), T(2)\n    \n    for i in range(3, n+1):\n        tri_n = sequence[-1] + sequence[-2] + sequence[-3]\n        sequence.append(tri_n)\n    \n    return sequence[:n+1]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"\n    n_str = str(n)\n    product = 1\n    all_even = True  # Flag to track if all digits are even\n    \n    for char in n_str:\n        digit = int(char)\n        if digit % 2 != 0:\n            product *= digit\n            all_even = False\n    \n    if all_even:\n        return 0\n    else:\n        return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    opening = '([{'\n    closing = ')]}'\n    matches = {')': '(', ']': '[', '}': '{'}\n    \n    for char in string:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack or stack[-1] != matches[char]:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    Return the sum of squared numbers in the given list,\n    rounding each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    total_sum = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        squared_num = rounded_num ** 2\n        total_sum += squared_num\n    return total_sum"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Returns True if the last character of a given string is an alphabetical character\n    and is not a part of a word, and False otherwise.\n    \n    Note: \"word\" is a group of characters separated by space.\n    \"\"\"\n    # Trim trailing whitespace\n    txt = txt.rstrip()\n    \n    # Check if the string is empty\n    if not txt:\n        return False\n    \n    # Get the last character\n    last_char = txt[-1]\n    \n    # Check if it's alphabetical\n    if last_char.isalpha():\n        # Find the last non-alphabetical character before the last character\n        idx = len(txt) - 2\n        while idx >= 0 and txt[idx].isalpha():\n            idx -= 1\n        \n        # If the last non-alphabetical character is a space or doesn't exist (idx == -1), it's not part of a word\n        if idx == -1 or txt[idx].isspace():\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i\n    return index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    \"\"\"\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([-2, -4, -1, -3, -5, -7])\n    (-1, None)\n    \"\"\"\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    # Convert a to appropriate type for comparison\n    if isinstance(a, str):\n        if ',' in a:\n            a = float(a.replace(',', '.'))\n        else:\n            a = float(a)\n    \n    # Convert b to appropriate type for comparison\n    if isinstance(b, str):\n        if ',' in b:\n            b = float(b.replace(',', '.'))\n        else:\n            b = float(b)\n    \n    # Compare values\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"\n    >>> is_equal_to_sum_even(4)\n    False\n    >>> is_equal_to_sum_even(8)\n    True\n    >>> is_equal_to_sum_even(10)\n    True\n    >>> is_equal_to_sum_even(7)\n    False\n    \"\"\"\n    if n < 8:\n        return False\n    return n % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    \n    def factorial(n):\n        \"\"\"Compute the factorial of n.\"\"\"\n        if n == 0:\n            return 1\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    \n    return result\n\n# Testing the Function\nassert special_factorial(1) == 1  # 1! = 1\nassert special_factorial(2) == 2  # 2! * 1! = 2 * 1 = 2\nassert special_factorial(3) == 12  # 3! * 2! * 1! = 6 * 2 * 1 = 12\nassert special_factorial(4) == 288  # 4! * 3! * 2! * 1! = 24 * 6 * 2 * 1 = 288\nassert special_factorial(5) == 34560  # 5! * 4! * 3! * 2! * 1! = 120 * 24 * 6 * 2 * 1 = 34560"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces == 2:\n                if result and result[-1] != '_':\n                    result.append('_')\n            elif consecutive_spaces > 2:\n                continue  # skip adding further spaces to result\n            else:\n                result.append('_')\n        else:\n            if consecutive_spaces > 2:\n                result.append('-')\n            result.append(char)\n            consecutive_spaces = 0\n    \n    # Check for trailing spaces after processing\n    if result and result[-1] == ' ':\n        result.pop()  # remove trailing space\n    \n    # Check for leading spaces\n    if text[0] == ' ':\n        result.insert(0, '_')\n    \n    return ''.join(result)"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n\n    name_part, ext_part = file_name.split('.')\n    \n    # Check if name_part starts with an alphabetic character or underscore\n    if len(name_part) == 0 or not (name_part[0].isalpha() or name_part[0] == '_'):\n        return 'No'\n\n    valid_extensions = ['txt', 'exe', 'dll']\n    # Check extension case insensitively\n    if ext_part.lower() not in valid_extensions:\n        return 'No'\n\n    # Count digits only in the name_part, not in the whole file_name\n    digit_count = sum(1 for char in name_part if char.isdigit())\n    if digit_count > 3:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of integers. For each entry in the list,\n    it squares the integer if its index is a multiple of 3, and cubes the\n    integer if its index is a multiple of 4 but not a multiple of 3.\n    It returns the sum of all modified entries.\n\n    Examples:\n    For lst = [1, 2, 3], the output should be 6\n    For lst = [], the output should be 0\n    For lst = [-1, -5, 2, -1, -5], the output should be -126\n    \"\"\"\n    total_sum = 0\n    for i in range(len(lst)):\n        if (i + 1) % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif (i + 1) % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    Returns a string containing words from the original sentence whose lengths are prime numbers,\n    in the same order as they appear in the original sentence.\n    \n    Example:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n    \"\"\"\n    def is_prime(n):\n        \"\"\" Check if a number n is prime. \"\"\"\n        if n <= 1:\n            return False\n        if n == 2:\n            return True  # 2 is the only even prime number\n        if n % 2 == 0:\n            return False  # other even numbers are not prime\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"\n    Return True if the simplified expression x * n evaluates to a whole number, False otherwise.\n    >>> simplify(\"1/5\", \"5/1\")\n    True\n    >>> simplify(\"1/6\", \"2/1\")\n    False\n    \"\"\"\n    num_x, den_x = map(int, x.split(\"/\"))\n    num_n, den_n = map(int, n.split(\"/\"))\n    result_num = num_x * num_n\n    result_den = den_x * den_n\n    if result_num % result_den == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \n    Args:\n    - nums: List of integers\n    \n    Returns:\n    - List of integers sorted by the sum of their digits in ascending order\n    \"\"\"\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    indexed_nums = [(digit_sum(nums[i]), i, nums[i]) for i in range(len(nums))]\n    indexed_nums.sort(key=lambda x: (x[0], x[1]))  # Sort primarily by digit_sum, secondarily by original index\n    \n    return [x[2] for x in indexed_nums]  # Extract the sorted numbers"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    Return the number of triples (a[i], a[j], a[k]) of array a where i < j < k \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \n    Args:\n    - n (int): Length of the array a\n    \n    Returns:\n    - int: Number of valid triples\n    \"\"\"\n    # Step 1: Generate the array a\n    a = [0] * (n + 1)\n    for i in range(1, n + 1):\n        a[i] = i * i - i + 1\n    \n    # Step 2: Count valid triples\n    count = 0\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):  # Corrected range for k\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    # Step 3: Return the result\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    \n    index1 = planets_order.index(planet1)\n    index2 = planets_order.index(planet2)\n    \n    start_index = min(index1, index2)\n    end_index = max(index1, index2)\n    \n    planets_between = planets_order[start_index+1:end_index]\n    \n    return tuple(planets_between)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"\n    Deletes strings with odd lengths from the input list, sorts the remaining strings\n    primarily by their length in ascending order. If strings have the same length, they\n    are sorted alphabetically.\n    \n    Args:\n    - lst (list of str): List of strings\n    \n    Returns:\n    - sorted_lst (list of str): Sorted list of strings by length and alphabetically\n    \"\"\"\n    # Filter strings by odd length\n    filtered_lst = [string for string in lst if len(string) % 2 == 1]\n    \n    # Sort filtered list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    Determine how far off each guess was from the actual scores in a series of matches.\n\n    Parameters:\n    game (list of int): Actual scores of the matches.\n    guess (list of int): Guessed scores for the matches.\n\n    Returns:\n    list of int: Absolute differences between guessed and actual scores for each match.\n    \"\"\"\n    differences = []\n    for i in range(len(game)):\n        differences.append(abs(game[i] - guess[i]))\n    return differences"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n        elif strength == max_strength:\n            if extension < strongest_extension:\n                strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    # Concatenate the second string to itself\n    double_b = b + b\n    # Check if the first string is a substring of the concatenated string\n    return a in double_b"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num) # take the absolute value to handle negative numbers\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(num): # convert number to string to iterate over digits\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    result = ''\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if they form a right-angled triangle,\n    False otherwise.\n    \n    Args:\n    - a, b, c: Lengths of the sides of the triangle\n    \n    Returns:\n    - True if the triangle is a right-angled triangle, False otherwise\n    \"\"\"\n    # Calculate squares of sides\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n    \n    # Check if it satisfies the Pythagorean theorem\n    if c_squared == a_squared + b_squared:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        num_unique = len(unique_chars)\n\n        if num_unique > max_unique_chars:\n            max_unique_chars = num_unique\n            max_word = word\n        elif num_unique == max_unique_chars:\n            if word < max_word:\n                max_word = word\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    Return an array of [ total number of eaten carrots after your meals,\n                        the number of carrots left after your meals ]\n    If there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \"\"\"\n    if remaining >= need:\n        carrots_eaten = need\n    else:\n        carrots_eaten = remaining\n    \n    total_eaten = number + carrots_eaten\n    carrots_left = remaining - carrots_eaten\n    \n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operand) == 0:\n        raise ValueError(\"At least one operand is required\")\n    \n    if len(operator) + 1 != len(operand):\n        raise ValueError(\"Number of operators should be one less than number of operands\")\n    \n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += ' ' + operator[i] + ' ' + str(operand[i + 1])\n    \n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"\n    Given a string s, reverse the case of letters and reverse the string if no letters are present.\n    \"\"\"\n    result = []\n    letter_found = False\n    \n    for char in s:\n        if char.isalpha():\n            letter_found = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    \n    if not letter_found:\n        result.reverse()\n    \n    return ''.join(result)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    Example:\n    >>> string_to_md5('Hello world')\n    '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    \n    # Calculate the MD5 hash\n    hash_object = hashlib.md5(text.encode('utf-8'))\n    return hash_object.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    result = []\n    if a > b:\n        a, b = b, a  # Swap a and b if a is greater than b\n\n    for i in range(a, b + 1):\n        # Check each digit of i to see if it's even\n        digits = str(i)\n        for digit in digits:\n            if int(digit) % 2 == 0:\n                result.append(int(digit))\n    \n    return sorted(result)  # Sort the result in ascending order"}
