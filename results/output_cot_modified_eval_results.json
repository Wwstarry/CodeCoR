{"date": "2024-06-30 12:24", "hash": "ebe95df0d5220f00cedd6f4bddea35e4", "eval": {"Mbpp/94": [{"task_id": "Mbpp/94", "solution": "def min_tuple(test_list, index):\n    min_value = float('inf')\n    min_index = None\n    for i, tup in enumerate(test_list):\n        value = tup[index]\n        if value < min_value:\n            min_value = value\n            min_index = i\n    return test_list[min_index]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "from collections import Counter\n\ndef check_occurences(test_list):\n    counter_obj = Counter()\n    for tup in test_list:\n        counter_obj.update(tup)\n    result = {k: v for k, v in counter_obj.items() if v >= 2}\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "def find_Max_Num(arr): \n    all_nums = []\n    def generate_nums(current_num, remaining_digits):\n        if len(remaining_digits) == 0:\n            all_nums.append(int(current_num))\n            return\n        for i in range(len(remaining_digits)):\n            generate_nums(current_num + str(remaining_digits[i]), remaining_digits[:i] + remaining_digits[i+1:])\n    generate_nums(\"\", arr)\n    all_nums.sort(reverse=True)\n    return all_nums[0]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[9, 8, 7, 6, 5, 4, 3, 2, 1]]]}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrix(M):\n    row_sums = [(row, sum(row)) for row in M]\n    row_sums = sorted(row_sums, key=lambda x: x[1])\n    sorted_matrix = [row for row, _ in row_sums]\n    return sorted_matrix", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def str_to_list(string):\n    res = [0] * 256\n    for i in string:\n        res[ord(i)] += 1\n    return res\n\ndef remove_chars(str1, str2):\n    str2_list = str_to_list(str2)\n    res = \"\"\n    for i in str1:\n        if str2_list[ord(i)] == 0:\n            res += i\n    return res", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    if side_length <= 0:\n        return \"Error: The side length should be a positive number.\"\n    else:\n        return 4 * side_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "def is_monotonic(A):\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        elif A[i] < A[i + 1]:\n            decreasing = False\n    return increasing or decreasing", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "def is_majority(arr, x):\n    n = len(arr)\n    start = 0\n    end = 0\n    for i in range(n):\n        if arr[i] == x:\n            end += 1\n        else:\n            start += 1\n            end += 1\n        if end - start + 1 > n // 2:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def count_positive_numbers(list):\n    counter = 0\n    for num in list:\n        if num > 0:\n            counter += 1\n    return counter", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    n = str(n)\n    for i in range(len(n) - 1):\n        if abs(int(n[i]) - int(n[i+1])) > 1:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2121212121212122]]}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "def remove_chars(s, ch):\n    if len(s) == 0 or s[0] != ch:\n        result = s\n    else:\n        result = s[1:]\n\n    result = ch.join([word for word in result.split(ch) if word])\n\n    if result.endswith(ch):\n        result = result[:-1]\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "def sort_sublist(lst):\n    return [sorted(sublist, key=lambda x: len(x)) for sublist in lst]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "def is_substring_in_list(str1, sub_str):\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "def all_equal_length(tuples):\n    if not tuples:\n        return True\n    len_first = len(tuples[0])\n    for t in tuples:\n        if len(t) != len_first:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def sum_list(data_list):\n    if not isinstance(data_list, list):\n        return data_list\n    elif len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + sum_list(data_list[1:])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    x, y = 0, 0\n    while True:\n        if a*x + b*y == n:\n            return (x, y)\n        x += 1\n        if a*x + b*y == n:\n            return (x, y)\n        y = (n - a*x) / b\n        if a*x + b*y == n:\n            return (x, y)\n        x, y = 0, y+1\n        if y == n/b:\n            return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def min_rotations(str):\n    index_dict = {}\n    for i in range(len(str)):\n        if str[i] in index_dict:\n            return i - index_dict[str[i]]\n        else:\n            index_dict[str[i]] = i\n    return -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "def check_same_type(test_tuple):\n    first_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "def is_difference_of_squares(n):\n    squares = {i**2 for i in range(int(n**0.5) + 1)}\n    return n in squares or any(n - x in squares for x in squares)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    n += 1\n    while True:\n        str_n = str(n)\n        mid = len(str_n) // 2\n        if str_n[:mid] == str_n[mid:][::-1]:\n            return n\n        n += 1\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "def find_frequency(list1):\n    freq_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in freq_count:\n            freq_count[sublist_tuple] += 1\n        else:\n            freq_count[sublist_tuple] = 1\n    return freq_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def volume_of_triangular_prism(l, b, h):\n    area_of_triangle = 0.5 * l * b\n    volume = area_of_triangle * h\n    return volume", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "def count_std(string):\n    count_dict = {'s': 0, 't': 0, 'd': 0}\n    for char in string:\n        if char in count_dict:\n            count_dict[char] += 1\n    return count_dict", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return list(map(lambda x: x**2, nums))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "def min_sublist_length(lst):\n    return min(len(sublist) for sublist in lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "def avg_product(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)\n\n# Test the function\ntext = \"hello world, python is a great programming language.\"\nprint(find_char_long(text))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def longest_word_length(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(a):\n    # The perimeter of a pentagon is calculated by the formula: 5 * side\n    perimeter = 5 * a\n    return perimeter\n\n# Test the function\nprint(perimeter_pentagon(4)) # The output should be 20", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(N):\n    smaller_nums = [num for num in range(0, N) if num < N]\n    return max(smaller_nums)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "from collections import Counter\n\ndef freq_count(list1):\n    return Counter(list1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "def is_One_Bit_Difference(x, y):\n    # Convert the numbers to binary representation\n    x_bin = bin(x)\n    y_bin = bin(y)\n\n    # Compare the binary representation\n    if len(x_bin) != len(y_bin):\n        return False\n\n    # Count the number of differing bit positions\n    diff_count = 0\n    for i in range(2, len(x_bin)):\n        if x_bin[i] != y_bin[i]:\n            diff_count += 1\n\n    # Check if the count is exactly 1\n    if diff_count == 1:\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def max_diff(test_list):\n    max_diff = 0\n    min_element = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i] < min_element:\n            min_element = test_list[i]\n        elif test_list[i] - min_element > max_diff:\n            max_diff = test_list[i] - min_element\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "def sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def find_smallest_number(lst):\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    return n * (n + 1) * (n + 2) // 6", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[false]]}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "def similar_elements(tuple_list1, tuple_list2):\n    set1 = set(tuple_list1)\n    similar = [element for element in tuple_list2 if element in set1]\n    return similar", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "from collections import defaultdict\n\ndef count_Substrings(s, n):\n    count = 0\n    dp = defaultdict(int)\n    dp[0] = 1\n    sum = 0\n    for i in range(n):\n        sum += int(s[i])\n        if (sum - n + i + 1) >= 0:\n            count += dp[sum - n + i + 1]\n        dp[sum] += 1\n    return count\n\ns = \"123\"\nn = len(s)\nprint(count_Substrings(s,n))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in [dict1, dict2, dict3]:\n        merged_dict.update(d)\n    return merged_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef n_largest_numbers(lst, n):\n    return heapq.nlargest(n, lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "def nth_octagonal(n):\n    if n < 1:\n        return \"Error: Input must be a positive integer.\"\n    else:\n        return n * (3 * n - 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "def check_color_sequence(colors, patterns):\n    current_color = colors[0]\n    for pattern in patterns:\n        if current_color not in pattern:\n            return False\n        current_color = pattern[pattern.index(current_color) + 1]\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "def nth_centered_hexagonal(n):\n    if n <= 0:\n        return 0\n    else:\n        return n * (2*n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "def count_non_empty_substrings(str):\n    counter = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            if str[i:j] != '':\n                counter += 1\n    return counter", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "import math\n\ndef is_not_prime(n):\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "def smallest_power_of_two(n):\n    result = 1\n    while result < n:\n        result *= 2\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math\n\ndef sphere_surface_area(r):\n    return 4 * math.pi * r ** 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(nums):\n    gap = len(nums)\n    while gap > 1:\n        gap = gap // 1.3\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    for i in range(len(nums) - 1):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def check_opposite_sign(a, b):\n    result = False\n    if a == 0 or b == 0:\n        return False\n    else:\n        if (a > 0 and b < 0) or (a < 0 and b > 0):\n            result = True\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def is_one_less_than_twice_reverse(num):\n    num_str = str(num)\n    reversed_str = num_str[::-1]\n    reversed_num = int(reversed_str)\n    return num == 2 * reversed_num - 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n\nprint(odd_values_string(\"Hello, World!\")) # Expected output: \"HloWrd!\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "def find_kth_element(arr, n, k):\n    if k < 0 or k >= n:\n        return None\n    else:\n        return arr[k]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "def count_integer(list1):\n    counter = 0\n    for element in list1:\n        if isinstance(element, int):\n            counter += 1\n    return counter\n\nlist1 = [1, 2, 'a', 3.5, 4, 'b', 5, 6.7, 'c']\nprint(count_integer(list1))  # Output: 6", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    # Step 1: Initialize sequence\n    sequence = [1, 1]\n\n    # Step 2: Iterate from 3 to n\n    for i in range(2, n):\n        # Step 3: Calculate parent numbers\n        parent1 = sequence[sequence[i-1]-1]\n        parent2 = sequence[sequence[i-2]-1]\n\n        # Step 4: Find parent values in sequence\n        parent_value = parent1 + parent2\n\n        # Step 5: Add to sequence\n        sequence.append(parent_value)\n\n    # Step 6: Return n-th number\n    return sequence[n-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "def max_diff(arr):\n    max_diff = None\n    min_element = None\n\n    for element in arr:\n        if min_element is None:\n            min_element = element\n        else:\n            if max_diff is None or element - min_element > max_diff:\n                max_diff = element - min_element\n\n    return max_diff if max_diff is not None else 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "def find_divisible_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        flag = True\n        for elem in tup:\n            if elem % K != 0:\n                flag = False\n                break\n        if flag:\n            result.append(tup)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "def count_pairs_with_even_xor(A):\n    bit_count = {i: [0, 0] for i in range(32)}\n    for num in A:\n        for i in range(32):\n            bit_count[i][num & 1] += 1\n            num >>= 1\n    even_pairs = 0\n    for count0, count1 in bit_count.values():\n        even_pairs += count0 * count1\n    return even_pairs", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/143": [{"task_id": "Mbpp/143", "solution": "def count_lists(Input):\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_of_sphere(r):\n    return (4/3) * math.pi * r**3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "def insert_element(list, element):\n    return [[element, i] for i in list]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-94.19039842971628, -3.4031380684866406, -22.045351968568852, -94.19039842971628], "a"]]}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "def is_woodall(x):\n    sum_of_digits = 0\n    for digit in str(x):\n        sum_of_digits += int(digit)\n    while sum_of_digits % 2 == 0:\n        sum_of_digits /= 2\n    return sum_of_digits == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-71]]}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "def count_same_pairs(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)-1):\n        pair = (list1[i], list1[i+1])\n        if pair in list2 and pair in list3:\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def has_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "def find_minimum(a, b, c):\n    min_val = a\n    if b < min_val:\n        min_val = b\n    if c < min_val:\n        min_val = c\n    return min_val", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n\ntup = (1, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2)\nx = 2\nprint(count_X(tup, x))  # Output: 5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "def count_chars(str1):\n    count_dict = {}\n    for i in range(len(str1)):\n        char = str1[i].lower()\n        if char.isalpha():\n            pos = ord(char) - ord('a') + 1\n            if pos not in count_dict:\n                count_dict[pos] = 0\n            count_dict[pos] += 1\n    return count_dict", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def first_repeated_char(word):\n    seen = set()\n    for char in word:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\n# Test the function\nprint(first_repeated_char(\"hello\"))  # Output: 'l'\nprint(first_repeated_char(\"world\"))  # Output: 'w'\nprint(first_repeated_char(\"python\"))  # Output: 'p'\nprint(first_repeated_char(\"apple\"))  # Output: 'p'\nprint(first_repeated_char(\"banana\"))  # Output: 'a'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    n = len(arr)\n \n    # Iterate over all elements in array\n    for i in range(n, 0, -1):\n        # Find index of the maximum element\n        max_idx = arr.index(max(arr[:i]))\n \n        # If maximum element is not at the end of array, move it to end by flipping\n        if max_idx != i-1:\n            arr[:i] = arr[max_idx:i][::-1] + arr[max_idx+1:i]\n \n        # Reverse the elements so far\n        arr[:i] = arr[:i][::-1]\n \n    return arr", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/83": [{"task_id": "Mbpp/83", "solution": "def add_chars(strr):\n    result = \"\"\n    for char in strr:\n        result += chr(ord(char) + 1)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "def find_difference(n):\n    even_sum = 0\n    odd_sum = 0\n    str_n = str(n)\n    for digit in str_n:\n        int_digit = int(digit)\n        if int_digit % 2 == 0:\n            even_sum += int_digit\n        else:\n            odd_sum += int_digit\n    return even_sum - odd_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    result = 1\n    if b == 0:\n        return 1\n    elif b < 0:\n        a = 1/a\n        b = abs(b)\n    for _ in range(b):\n        result *= a\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[5, -2]]}], "Mbpp/249": [{"task_id": "Mbpp/249", "solution": "def array_intersection(arr1, arr2):\n    return list(set(arr1).intersection(arr2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "def extract_singly(test_list):\n    count_dict = {}\n    for tup in test_list:\n        for elem in tup:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n\n    singly_list = []\n    for elem, count in count_dict.items():\n        if count == 1:\n            singly_list.append(elem)\n\n    return singly_list\n\ntest_list = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8), (7, 8, 9), (8, 9, 10), (9, 10, 1), (10, 1, 2)]\nprint(extract_singly(test_list))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def contains_sublist(l, s):\n    pos = 0\n    for i in l:\n        if i == s[0]:\n            if l[pos:pos+len(s)] == s:\n                return True\n        pos += 1\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"[a-z]+(_[a-z]+)*\"\n    result = re.findall(pattern, text)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "import math\n\n    def calculate_circumference(r):\n        circumference = 2 * math.pi * r\n        return circumference", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "def longest_palindromic_subsequence(str):\n    n = len(str)\n    lps_array = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        lps_array[i][i] = 1\n\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                lps_array[i][j] = 2\n            elif str[i] == str[j]:\n                lps_array[i][j] = lps_array[i + 1][j - 1] + 2\n            else:\n                lps_array[i][j] = max(lps_array[i][j - 1], lps_array[i + 1][j])\n\n    return lps_array[0][n - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    return list(string)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "def max_product(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        max_product = max(max_product, list1[i][0] * list1[i][1])\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    current_sum = n\n    i = 1\n    while current_sum > 0:\n        current_power = 2 ** i\n        if current_power > current_sum:\n            break\n        if current_sum - current_power >= 0:\n            current_sum -= current_power\n        else:\n            break\n        if current_sum == 0:\n            return True\n        i += 1\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[123456788]]}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "def max_sum_bitonic(arr):\n    max_sum = float('-inf')\n    curr_inc_sum = 0\n    curr_dec_sum = 0\n\n    for i in range(len(arr)):\n        if i > 0 and arr[i] > arr[i - 1]:\n            curr_inc_sum += arr[i]\n        elif i > 0 and arr[i] < arr[i - 1]:\n            curr_dec_sum += arr[i]\n        else:\n            continue\n\n        if curr_dec_sum > curr_inc_sum:\n            curr_inc_sum, curr_dec_sum = curr_dec_sum, curr_inc_sum\n\n        max_sum = max(max_sum, curr_inc_sum + curr_dec_sum)\n\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/117": [{"task_id": "Mbpp/117", "solution": "def convert_to_float(test_list):\n    converted_list = []\n    for element in test_list:\n        try:\n            float_element = float(element)\n            converted_list.append(float_element)\n        except ValueError:\n            converted_list.append(element)\n    return converted_list", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += i\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "def max_diff(string):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n    max_diff = max(max_diff, abs(count_0 - count_1))\n\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/164": [{"task_id": "Mbpp/164", "solution": "import math\n\ndef divSum(n):\n    sum1 = 0\n    for i in range(1, math.isqrt(n) + 1):\n        if n % i == 0:\n            sum1 += i\n            if i != n // i:\n                sum1 += n // i\n    return sum1\n\ndef checkDivisorsSum(n):\n    sum1 = divSum(n)\n    sum2 = n - sum1\n    if sum1 == sum2:\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "def zero_ratio(nums):\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    zero_ratio = zero_count / len(nums)\n    return zero_ratio", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "def convert_tuple_to_int(tup):\n    return int(''.join(map(str, tup)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_perfect_square(N):\n    sqrt = math.sqrt(N)\n    if sqrt.is_integer():\n        return (sqrt + 1) ** 2\n    else:\n        return (math.ceil(sqrt) + 1) ** 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/115": [{"task_id": "Mbpp/115", "solution": "def all_empty(list1):\n    all_empty = True\n    for dic in list1:\n        if dic:\n            all_empty = False\n            break\n    return all_empty", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "def amicable_numbers(limit):\n    sum_of_divisors = {}\n\n    def calculate_sum_of_divisors(num):\n        sum = 0\n        for i in range(1, num // 2 + 1):\n            if num % i == 0:\n                sum += i\n        return sum\n\n    for num in range(1, limit + 1):\n        sum_of_divisors[num] = calculate_sum_of_divisors(num)\n\n    sum_of_amicable_numbers = 0\n\n    for num in sum_of_divisors:\n        if sum_of_divisors[num] != num and sum_of_divisors[sum_of_divisors[num]] == num:\n            sum_of_amicable_numbers += num\n\n    return sum_of_amicable_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "def sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "def number_of_ways(n):\n    bell_number = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        bell_number[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            bell_number[i][j] = bell_number[i-1][j-1] + bell_number[i-1][j]\n    return bell_number[n][n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "def is_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\nprint(count_charac(\"Hello, World!\")) # Output: 13", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "def tup_string(tup1):\n    str1 = ''\n    for i in tup1:\n        if isinstance(i, tuple):\n            str1 += tup_string(i)\n        elif isinstance(i, str):\n            str1 += i\n        else:\n            str1 += str(i)\n    return str1\n\nprint(tup_string(('Hello', 'World', (1, 2, ('Nested', 'Tuple')))))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "def flatten(nested_list):\n    flattened = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened.extend(flatten(item))\n        else:\n            flattened.append(item)\n    return flattened\n\ndef common_in_nested_lists(nested_list):\n    common_elements = set()\n    flattened_list = flatten(nested_list)\n    for element in flattened_list:\n        if element in common_elements:\n            continue\n        else:\n            common_elements.add(element)\n    return common_elements", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "def reverse_vowels(str1):\n    vowels = []\n    for char in str1:\n        if char.lower() in 'aeiou':\n            vowels.append(char)\n    vowels = vowels[::-1]\n    result = ''\n    for char in str1:\n        if char.lower() in 'aeiou':\n            result += vowels.pop()\n        else:\n            result += char\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["USA"]], "plus_fail_tests": [["FIswIZeBBCBDCBDFCBCDFCCGBCDCBDFGCBCDFCFDBFCCDCBDFCD"]]}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "def count_rotations(s):\n    seen = set()\n    count = 0\n    for rotation in generate_all_rotations(s):\n        binary_string = convert_to_binary_string(rotation)\n        if len(binary_string) % 2 == 0:\n            if binary_string not in seen:\n                seen.add(binary_string)\n                if int(binary_string, 2) % 2 == 1:\n                    count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "def replace_last_element(lst, new_lst):\n    if len(lst) < 2:\n        return lst\n    else:\n        lst[-1] = new_lst\n        return lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "import heapq\n\ndef merge_sorted_lists(num1, num2, num3):\n    sorted_iterator = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 or num2 or num3:\n        if num1:\n            sorted_iterator.append(heapq.heappop(num1))\n        if num2:\n            sorted_iterator.append(heapq.heappop(num2))\n        if num3:\n            sorted_iterator.append(heapq.heappop(num3))\n    return sorted_iterator", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_item = None\n    max_freq = 0\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "\n\n```python\ndef calculate_magic_square(n):\n    magic_square = [[0 for i in range(n)] for j in range(n)]\n    num = 1\n    i = n // 2\n    j = n - 1\n\n    while num <= n * n:\n        if i < 0 or j < 0 or i >= n or j >= n or magic_square[i][j] != 0:\n            if j == n - 1:\n                j = n - 2\n            else:\n                j = 0\n            i += 1\n        else:\n            magic_square[i][j] = num\n            num += 1\n\n        i -= 1\n        j += 1\n\n    return magic_square", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "def add_lists(test_list, test_tup):\n    new_tup = []\n    for i in test_tup:\n        new_tup.append(i + test_list)\n    return tuple(new_tup)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "def long_words(words, n):\n    return [word for word in words if len(word) > n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "def count_true(lst):\n    return sum(1 for element in lst if element)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "def set_even_bits(num):\n    return num | 0x55555555", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "def eulerian_number(n, m):\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, min(i, m)+1):\n            if j % 2 == 0:\n                dp[i][j] = dp[i][j-1] + dp[i-1][j//2-1] if j//2-1 >= 0 else dp[i-1][0]\n    return dp[n][m]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "def volume_of_cube(side_length):\n    if side_length > 0:\n        return side_length ** 3\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "def multiply(x, y):\n    result = 0\n    for _ in range(abs(y)):\n        result += x\n    if y < 0:\n        result = -result\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    common_divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n    return sum(common_divisors)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "def snake_to_camel(word):\n    return ''.join(w.capitalize() if i > 0 else w for i, w in enumerate(word.split('_')))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "import heapq\n\ndef get_n_largest_items(n, list1):\n    return heapq.nlargest(n, list1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "import cmath\n\ndef angle_complex(a, b):\n    c_num = complex(a, b)\n    radians = cmath.phase(c_num)\n    degrees = radians * (180.0 / cmath.pi)\n    return degrees", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "def num_of_sequences(n, m):\n    def recurse(start, length, max_val):\n        if length == 0:\n            return 1\n        total = 0\n        for i in range(start, max_val + 1):\n            total += recurse(i * 2, length - 1, max_val)\n        return total\n\n    total = 0\n    for i in range(1, m // 2 + 1):\n        total += recurse(i, n, m)\n    return total", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return int(binary)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/229": [{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr):\n    return [num for num in arr if num < 0] + [num for num in arr if num >= 0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "def replace_spaces(s, char):\n    result = \"\"\n    for c in s:\n        if c == \" \":\n            result += char\n        else:\n            result += c\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "def find_unique(arr):\n    if not arr:\n        return None\n\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    for num, count in count_dict.items():\n        if count == 1:\n            return num\n\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/295": [{"task_id": "Mbpp/295", "solution": "def sum_divisors(number):\n    sum_divisors = 0\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            sum_divisors += i\n            if i != number // i:\n                sum_divisors += number // i\n    return sum_divisors", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "def count_first_elements(test_tup):\n    element_count = {}\n    for element in test_tup:\n        if element not in element_count:\n            element_count[element] = 1\n        else:\n            element_count[element] += 1\n\n    max_count = max(element_count.values())\n    max_element = [k for k, v in element_count.items() if v == max_count][0]\n\n    return max_count, max_element", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "import math\n\ndef calculate_cylinder_volume(r, h):\n    volume = math.pi * r**2 * h\n    return volume", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "def all_equal(list, element):\n    found_match = False\n    for item in list:\n        if item == element:\n            found_match = True\n            break\n    if found_match:\n        return True\n    else:\n        return False\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "def filter_dict_by_value(input_dict, n):\n    filtered_dict = {}\n    for key, value in input_dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "def substract_elements(test_tup1, test_tup2):\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "def check_digit_frequency(n):\n    freq_dict = {}\n    str_n = str(n)\n\n    for digit in str_n:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n\n    for key, value in freq_dict.items():\n        if value > int(key):\n            return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "def find_p_words(words):\n    p_words = [word for word in words if word.startswith('p') or word.startswith('P')]\n    return p_words[:2] if len(p_words) >= 2 else \"Less than two words start with 'p'.\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "def find_largest_products(nums1, nums2, N):\n    products = [num1 * num2 for num1 in nums1 for num2 in nums2]\n    products.sort(reverse=True)\n    return products[:N]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    a, b = b, a\n    return a, b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "def sum_of_fifth_power_of_even_numbers(n):\n    return sum(i**5 for i in range(2, 2*n, 2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    decagonal_num = n * (3 * n - 2) / 2\n    return decagonal_num.is_integer()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "def max_val(listval):\n    max_val = None\n    for val in listval:\n        if isinstance(val, list):\n            max_val_sublist = max_val(val)\n            if max_val is None or (max_val_sublist is not None and max_val_sublist > max_val):\n                max_val = max_val_sublist\n        elif isinstance(val, (int, float)):\n            if max_val is None or val > max_val:\n                max_val = val\n    return max_val", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "def extract_rear_elements(test_list):\n    rear_elements = [tup[-1] for tup in test_list]\n    return rear_elements", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "import math\n\ndef find_third_side(w, h):\n    c = math.sqrt(w**2 + h**2)\n    return c", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "def subtract_lists(nums1, nums2):\n    return list(map(lambda x, y: x - y, nums1, nums2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "def check_unique(test_list):\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        else:\n            seen.add(element)\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "def find_quotient(n, m):\n    if m == 0:\n        return \"Error: Division by zero is undefined.\"\n    else:\n        return n / m", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "def sum_even_numbers_at_even_positions(arr):\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "def flatten_list(list1):\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "def split_list(lst, L):\n    if L > len(lst):\n        return \"Error: Length of the first part is greater than the length of the list.\"\n    else:\n        return (lst[:L], lst[L:])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "import re\n\ndef match_pattern(text):\n    pattern = re.compile(r'ab{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "def lateral_surface_area_of_cube(l):\n    return 4 * l ** 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "def nested_dict_depth(d):\n    depth = 0\n\n    def calculate_depth(current_dict, current_depth):\n        nonlocal depth\n        depth = max(depth, current_depth)\n        for value in current_dict.values():\n            if isinstance(value, dict):\n                calculate_depth(value, current_depth + 1)\n\n    calculate_depth(d, 1)\n    return depth", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "def division_elements(test_tup1, test_tup2):\n    division_results = {}\n    for i in test_tup1:\n        for j in test_tup2:\n            division_results[(i, j)] = i / j\n    return division_results", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_of_cone(r, h):\n    return (1/3) * math.pi * r**2 * h", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "def find_star_number(n):\n    count = 0\n    num = 1\n    while True:\n        digits = [int(i) for i in str(num)]\n        if sum(digits) == eval('*'.join(map(str, digits))):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "def find_ascii_value(k):\n    return ord(k)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "def highest_power_of_two(n):\n    highest_power = 1\n    i = 1\n    while True:\n        next_power = 2 ** i\n        if next_power > n:\n            break\n        highest_power = next_power\n        i += 1\n    return highest_power", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "def max_of_two_numbers(a, b):\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise ValueError(\"Both inputs must be numbers.\")\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return a", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "def find_max_length_lists(lst):\n    if not lst:\n        return []\n\n    max_length = 0\n    max_length_lists = []\n\n    for l in lst:\n        length = len(l)\n        if length > max_length:\n            max_length = length\n            max_length_lists = [l]\n        elif length == max_length:\n            max_length_lists.append(l)\n\n    return max_length_lists", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "def count_inversions(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    left_most_unset_bit = 1\n    for i in range(32):\n        if (n & (1 << i)) == 0:\n            left_most_unset_bit = 1 << i\n            break\n    return left_most_unset_bit", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregate = defaultdict(int)\n    for tup in stdata:\n        if tup[0] in aggregate:\n            aggregate[tup[0]] += tup[1]\n        else:\n            aggregate[tup[0]] = tup[1]\n    return max(aggregate.values())", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_modified(a, n):\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, n):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n\ndef max_sum_k_times(a, k, n):\n    # Initialize result\n    max_sum = 0\n\n    # Calculate sum of original array\n    original_sum = sum(a)\n\n    # If sum of original array is 0, return k*original_sum\n    if original_sum == 0:\n        return k * original_sum\n\n    # Calculate max sum of subarray in original array\n    max_sub_array_sum = max_sub_array_sum_modified(a, n)\n\n    # Calculate result\n    max_sum = k * original_sum + (k - 1) * max_sub_array_sum\n\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "def maximize_tuples(tuple1, tuple2):\n    maximized_list = []\n    for i in range(len(tuple1)):\n        if tuple1[i] > tuple2[i]:\n            maximized_list.append(tuple1[i])\n        else:\n            maximized_list.append(tuple2[i])\n    return tuple(maximized_list)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef nth_newman_shanks_williams_prime(n):\n    count = 0\n    num = 1\n    while True:\n        num += 1\n        if is_prime(num) and is_palindrome(num):\n            count += 1\n            if count == n:\n                return num\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "def list_split(S, step):\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "def dog_age(h_age):\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["hello   world"]]}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "def count_primes(n):\n    counter = 0\n    for num in range(2, n):\n        if is_Prime(num):\n            counter += 1\n    return counter\n\ndef is_Prime(num):\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "def sequential_search(dlist, item):\n    index = 0\n    for element in dlist:\n        if element == item:\n            return index\n        index += 1\n    return -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "import math\n\ndef even_binomial_Coeff_Sum(n):  \n    sum = 0  \n    for i in range(0, n + 1, 2):  \n        sum += math.comb(n, i)  \n    return sum  \nprint(even_binomial_Coeff_Sum(5))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(a, n, index, k):\n    max_sum_list = []\n\n    for i in range(n):\n        current_sum = 0\n\n        for j in range(i, index+1):\n            if j > 0 and a[j] > a[j-1]:\n                current_sum += a[j]\n\n            if j == index:\n                max_sum_list.append(current_sum)\n\n    return max(max_sum_list)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "def count_sequences(n):\n    memo = {}\n\n    def count(pos, sum):\n        if pos == n:\n            return 1 if sum == n else 0\n        if (pos, sum) in memo:\n            return memo[(pos, sum)]\n        memo[(pos, sum)] = count(pos + 1, sum + 1) + count(pos + 1, sum - 1)\n        return memo[(pos, sum)]\n\n    return count(0, 0)\n\nprint(count_sequences(1))  # Output: 2\nprint(count_sequences(2))  # Output: 8\nprint(count_sequences(3))  # Output: 24", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+2, 2))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "def maxSum(n, dp={}):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n in dp:\n        return dp[n]\n    else:\n        dp[n] = max(n, maxSum(n//2, dp) + maxSum(n//3, dp) + maxSum(n//4, dp) + maxSum(n//5, dp))\n        return dp[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(l1, l2, l3):\n    result = {}\n    for i in range(len(l1)):\n        if l1[i] not in result:\n            result[l1[i]] = l2[i]\n        else:\n            result[l1[i]] = {l2[i]: l3[i]}\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "def remove_odd(str1):\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result\n\nprint(remove_odd(\"abcdefg\"))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Hello, world!"]]}], "Mbpp/442": [{"task_id": "Mbpp/442", "solution": "def positive_ratio(nums):\n    positive_count = sum(1 for num in nums if num > 0)\n    return positive_count / len(nums)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "def and_tuples(test_tup1, test_tup2):\n    result = [(i, j) for i in test_tup1 for j in test_tup2]\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "def extract_rear(test_tuple):\n    return [string[-1] for string in test_tuple]\n\ntest_tuple = (\"hello\", \"world\", \"python\")\nprint(extract_rear(test_tuple))  # Output: ['o', 'd', 'n']", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "def extract_nth_element(list1, n):\n    nth_elements = []\n    for tup in list1:\n        if len(tup) >= n:\n            nth_elements.append(tup[n-1])\n    return nth_elements", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[["John Doe", 78, 90, 82], ["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Emily Brown", 88, 91, 89]], 1]]}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "def concat_tuple(test_tup, delimiter):\n    return delimiter.join(test_tup)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "def neg_nos(list1):\n    neg_nums = [num for num in list1 if num < 0]\n    return neg_nums", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "def min_of_two_numbers(num1, num2):\n    if num1 < num2:\n        return num1\n    else:\n        return num2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "def check_distinct(test_tup):\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        else:\n            seen.add(elem)\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "def find_median(a, b, c):\n    # Arrange the numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Return the median (middle number)\n    return numbers[1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "def max_length_sublist(lst):\n    max_length = 0\n    max_sublist = []\n\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n\n    return max_sublist or None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "def first_non_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "def remove_odd_numbers(l):\n    return [num for num in l if num % 2 == 0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "def min_product(list1):\n    min_product = float('inf')\n    for tup in list1:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    return min_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "import re\n\ndef convert_date_format(dt):\n    pattern = re.compile(r'\\d{4}-\\d{2}-\\d{2}')\n    if not pattern.match(dt):\n        return \"Invalid date format. Please use yyyy-mm-dd.\"\n    year, month, day = map(int, dt.split('-'))\n    return '-'.join(map(str, [day, month, year]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "def index_multiplication(test_tup1, test_tup2):\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/400": [{"task_id": "Mbpp/400", "solution": "def extract_freq(test_list):\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return freq_dict", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "def find_directrix(a, b, c):\n    return f\"y = x - {c/b}\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/407": [{"task_id": "Mbpp/407", "solution": "def next_bigger_number(n):\n    digits = list(str(n))\n    digits.sort(reverse=True)\n\n    first_incorrect = None\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] < digits[i - 1]:\n            first_incorrect = i\n            break\n\n    if first_incorrect is None:\n        return -1\n\n    for i in range(len(digits) - 1, -1, -1):\n        if digits[i] > digits[first_incorrect]:\n            digits[i], digits[first_incorrect] = digits[first_incorrect], digits[i]\n            break\n\n    digits[first_incorrect:] = digits[first_incorrect:][::-1]\n    return int(''.join(digits))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "def nth_lucas(n):\n    if n < 0:\n        return \"Error: n must be a non-negative integer.\"\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return a", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "def count_sublists(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "def insert_string_beginning(list, string):\n    return [string + item for item in list]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "def check_value_exists(sequence, value):\n    exists = False\n    for lst in sequence:\n        for element in lst:\n            if element == value:\n                exists = True\n                break\n        if exists:\n            break\n    return exists", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "def find_min(lst):\n    min_val = None\n    for val in lst:\n        if isinstance(val, (int, float)):\n            if min_val is None or val < min_val:\n                min_val = val\n    return min_val", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "def sum_digits(nums):\n    result = []\n    for num in nums:\n        str_num = str(num)\n        sum_digits = 0\n        for char in str_num:\n            if char.isdigit():\n                sum_digits += int(char)\n        result.append(sum_digits)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/438": [{"task_id": "Mbpp/438", "solution": "def count_bidirectional_pairs(test_list):\n    tuple_pairs = {}\n    for tup in test_list:\n        if tup not in tuple_pairs:\n            tuple_pairs[tup] = 1\n        elif (tup[1], tup[0]) in tuple_pairs:\n            tuple_pairs[(tup[1], tup[0])] += 1\n        else:\n            tuple_pairs[tup] += 1\n    bidirectional_count = 0\n    for tup, count in tuple_pairs.items():\n        if count % 2 == 0:\n            bidirectional_count += 1\n    return bidirectional_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "def max_product_pair(nums):\n    if len(nums) < 2:\n        return None\n\n    max_product = float('-inf')\n    second_max_product = float('-inf')\n\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                second_max_product = max_product\n                max_product = product\n            elif product > second_max_product:\n                second_max_product = product\n\n    return (nums[i], nums[j]) if max_product > 0 else None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function checks whether an element exists within a tuple.\n    \"\"\"\n    # Iterate through each element in the tuple\n    for element in tuplex:\n        # If the element is in the given tuple, return True immediately\n        if element in tuple1:\n            return True\n\n    # If the loop finishes without finding a match, return False\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[["a", "b", "c"], {"name": "John", "age": 25}, true, 42.5], ["a", "b", "c"]]]}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "def surface_area_of_cube(l):\n    return 6 * l ** 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    cube_sum = 0\n    for i in range(2, 2 * n, 2):\n        cube_sum += i ** 3\n    return cube_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "def check_greater(number, arr):\n    for element in arr:\n        if not number > element:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "from collections import Counter\n\ndef count_elements(lst, tup):\n    count_obj = Counter(tup)\n    for i in lst:\n        if i in count_obj:\n            count_obj[i] += 1\n        else:\n            count_obj[i] = 1\n    return count_obj", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "def round_and_sum(list1):\n    rounded_numbers = [round(num) for num in list1]\n    sum_rounded_numbers = sum(rounded_numbers)\n    product = len(list1) * sum_rounded_numbers\n    return product\n\nlist1 = [1.2, 2.3, 3.4, 4.5]\nprint(round_and_sum(list1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "def multiple_to_single(L):\n    result = \"\"\n    for num in L:\n        result += str(num)\n    return int(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "def last_digit(n):\n    return int(str(n)[-1])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "def find_median_trapezium(base1, base2, height):\n    \"\"\"\n    This function calculates the median of a trapezium.\n    :param base1: float, the length of the first base of the trapezium.\n    :param base2: float, the length of the second base of the trapezium.\n    :param height: float, the height of the trapezium.\n    :return: float, the median of the trapezium.\n    \"\"\"\n    return height", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/396": [{"task_id": "Mbpp/396", "solution": "import re\n\ndef check_char(string):\n    regex = r\"^[a-z]$|^([a-z]).*\\1$\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "def find_adverb_position(text):\n    adverbs_positions = {}\n    words = text.split(' ')\n    for i, word in enumerate(words):\n        if word.endswith('ly'):\n            adverbs_positions[word] = i\n    return adverbs_positions\n\nprint(find_adverb_position(\"She is quickly running.\"))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/431": [{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    set1 = set(list1)\n    for element in list2:\n        if element in set1:\n            return True\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, [4, 5]], [[4, 5], 6, 7, 8]]]}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return list(map(lambda x: x**3, nums))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "def sum_perrin(n):\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        perrin_sum = 2\n        last_two = [0, 1]\n        for i in range(3, n+1):\n            current_perrin = last_two[0] + last_two[1]\n            perrin_sum += current_perrin\n            last_two[0] = last_two[1]\n            last_two[1] = current_perrin\n        return perrin_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "def extract_strings(string_list, size):\n    extracted_strings = [s for s in string_list if len(s) == size]\n    return extracted_strings", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "import re\n\ndef remove_uppercase_substrings(s):\n    return re.sub('[A-Z]+', '', s)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "def has_31_days(monthnum):\n    months_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum in months_31_days", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "import math\n\ndef sum_divisors(n):\n    sum = 0\n    for i in range(1, math.isqrt(n) + 1) : \n        if n % i == 0 : \n            if i % 2 == 0:\n                sum += i\n            if n // i != i and (n // i) % 2 == 0:\n                sum += n // i\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "def find_min_length_sublist(lst):\n    min_len = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    if min_sublist is None:\n        return None\n    else:\n        return min_sublist", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "def reverse_strings(stringlist):\n    return [string[::-1] for string in stringlist]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/461": [{"task_id": "Mbpp/461", "solution": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "def max_product_subarray(nums):\n    if not nums:\n        return 0\n\n    max_ending_here = min_ending_here = max_so_far = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        max_ending_here = max(nums[i], max_ending_here * nums[i])\n        min_ending_here = min(nums[i], min_ending_here * nums[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    words_with_z = re.findall(r'\\b\\w*z\\w*\\b', text)\n    return words_with_z", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    sum = 0\n    count = 0\n    while True:\n        count += 1\n        if count % 2 != 0:\n            sum += count ** 2\n        if count % 2 == 1 and count % 2 == 0:\n            return sum\n        if count > 2 * n:\n            return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        if product >= n:\n            product %= n\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "def rectangle_area(l, b):\n    return l * b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s', '', text)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\n\t"]]}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "def sum_largest_smallest(arr):\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n\n    return min_val + max_val", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "def drop_empty_items(dictionary):\n    non_empty_dict = {}\n    for key, value in dictionary.items():\n        if value not in [None, '', []]:\n            non_empty_dict[key] = value\n    return non_empty_dict", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                odd_count += 1\n                \n    return odd_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "def max_product_subsequence(nums):\n    max_ending_here = max_ending_prev = 1\n    max_product = 0\n\n    for num in nums:\n        if num > 1:\n            max_ending_here *= num\n            max_ending_prev = max(max_ending_prev, max_ending_here)\n        else:\n            max_ending_here = 1\n\n        max_product = max(max_product, max_ending_prev)\n\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "import itertools\n\ndef find_combinations(list1):\n    all_combinations = []\n    for r in range(1, len(list1) + 1):\n        for combination in itertools.combinations(list1, r):\n            all_combinations.append(combination)\n    return all_combinations", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "def split_odd(lst):\n    return [num for num in lst if num % 2 != 0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "def to_lower_case(string):\n    return string.lower()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] != lst[j]:\n                count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "import re\n\ndef remove_lowercase_substrings(str1):\n    result = \"\"\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    for substring in uppercase_substrings:\n        result += substring\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "def tuple_intersection(test_list1, test_list2):\n    set1 = set()\n    for tup in test_list1:\n        for elem in tup:\n            set1.add(elem)\n\n    intersect_list = []\n    for tup in test_list2:\n        for elem in tup:\n            if elem in set1:\n                intersect_list.append(elem)\n                set1.remove(elem)\n\n    # Step 6: After checking all tuples in the second list, return the intersecting elements list as a tuple.\n    return tuple(intersect_list)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Converting numbers to string for easier manipulation of digits\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Initializing the sum variable\n    sum_distance = 0\n    \n    # Checking the length of the two numbers\n    max_length = max(len(str_num1), len(str_num2))\n    \n    # Pad the shorter number with leading zeros if necessary\n    str_num1 = str_num1.zfill(max_length)\n    str_num2 = str_num2.zfill(max_length)\n    \n    # Calculating the per-digit difference and summing them up\n    for digit1, digit2 in zip(str_num1, str_num2):\n        sum_distance += abs(int(digit1) - int(digit2))\n    \n    return sum_distance", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12345, 9]]}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_squares = (n * (n + 1) // 2) ** 2 \n    sum_of_cubes = (n * (n + 1) // 2) * ((2 * n * n + 2 * n + 1) // 3) \n    return sum_of_cubes - sum_of_squares", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[10]]}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Convert tuples to sets, take union, and convert back to tuple\n    return tuple(sorted(set(tuple1).union(set(tuple2))))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "def has_consecutive_numbers(l):\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "def add_pairwise(test_tup):\n    result = []\n    for i in range(len(test_tup[0])):\n        result.append(test_tup[0][i] + test_tup[1][i])\n    return tuple(result)\n\nprint(add_pairwise((1, 2, 3), (4, 5, 6)))  # Output: (5, 7, 9)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    for sublst in lst:\n        sublst.sort()\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "def first_repeated_digit(n):\n    str_n = str(n)\n    seen_digits = set()\n    for char in str_n:\n        if char.isdigit():\n            if char in seen_digits:\n                return int(char)\n            else:\n                seen_digits.add(char)\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "def replace_char(str1, ch, newch):\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Check if a list is sorted in ascending order.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, size):\n    max_sum = arr[0]\n    current_sum = arr[0]\n\n    for i in range(1, size):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    # Create an empty set to store unique numbers\n    unique_numbers = set()\n    \n    # Iterate through the list and add unique numbers to the set\n    for num in lst:\n        unique_numbers.add(num)\n    \n    # Initialize product variable with 1\n    product = 1\n    \n    # Iterate through the unique numbers and multiply them\n    for num in unique_numbers:\n        product *= num\n    \n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/574": [{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    # Surface area formula for a cylinder: 2\u03c0r(r+h)\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return round(surface_area, 3)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    toggled_string = \"\"\n    \n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char.lower()\n    \n    return toggled_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    # Initialize sum\n    digit_sum = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Add the last digit to the sum\n        digit_sum += n % 10\n        # Remove the last digit from the number\n        n //= 10\n    \n    # Return the sum of digits\n    return digit_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "def remove_duplicate_nums(*lists):\n    unique_nums = set()\n    for lst in lists:\n        unique_nums.update(lst)\n    return list(unique_nums)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "def split(string):\n    return [char for char in string]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "def extract_values(input_string):\n    values = []\n    start = 0\n    while True:\n        start = input_string.find('\"', start)\n        if start == -1:\n            break\n        end = input_string.find('\"', start + 1)\n        if end == -1:\n            break\n        value = input_string[start + 1:end]\n        values.append(value)\n        start = end + 1\n    return values", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(lst, sub_lst):\n    # Check if sub_lst is empty\n    if len(sub_lst) == 0:\n        return True\n\n    # Check if lst is empty or sub_lst is larger than lst\n    if len(lst) == 0 or len(lst) < len(sub_lst):\n        return False\n\n    # Iterate through lst\n    for i in range(len(lst)):\n        # Check if sub_lst can fit starting from index i in lst\n        if lst[i:i+len(sub_lst)] == sub_lst:\n            return True\n\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [1, 3, 5]]]}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    if n < 0:\n        return None  # Factorial is not defined for negative numbers\n    elif n == 0 or n == 1:\n        return 1  # Factorial of 0 and 1 is 1\n\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n\n    last_digit = factorial % 10\n    return last_digit", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    side_area = base_edge**2\n    perimeter = 4 * base_edge\n    base_area = base_edge**2\n    lateral_area = (perimeter * height) / 2\n    surface_area = base_area + lateral_area\n    return surface_area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "def is_even(n):\n    return n % 2 == 0\n\ndef extract_even(t):\n    if isinstance(t, tuple):\n        return tuple(extract_even(e) for e in t if is_even(e))\n    else:\n        return t if is_even(t) else None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "def _dissimilar(tuple1, tuple2):\n    return tuple(sorted(set(tuple1) ^ set(tuple2)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/595": [{"task_id": "Mbpp/595", "solution": "def min_Swaps(num1, num2):\n    count1 = num1.count('1')\n    count2 = num2.count('1')\n    \n    # Check if the two binary numbers have the same number of 1s\n    if count1 != count2:\n        return \"Not Possible\"\n    \n    # Initialize the swap count\n    swaps = 0\n    \n    # Iterate through each index of the binary numbers\n    for i in range(len(num1)):\n        if num1[i] == '1' and num2[i] == '0':\n            swaps += 1\n    \n    return swaps", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["111", "000"]], "plus_fail_tests": [["1111111111111111111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000000000000000000"]]}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n            \n        if first_even is not None and first_odd is not None:\n            break\n            \n    if first_even is None or first_odd is None:\n        return 0  # If either even or odd number is not found, return 0 as difference\n    \n    return abs(first_even - first_odd)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 5, 3, 6, 1, 4, 9, 8, 7]]]}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Check if n is 0 or 1\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize the numerator and denominator\n    numerator = 1\n    denominator = 1\n    \n    # Calculate the factorial of 2n\n    for i in range(2, 2*n + 1):\n        numerator *= i\n    \n    # Calculate the factorial of n+1\n    for i in range(2, n + 2):\n        denominator *= i\n    \n    # Calculate the factorial of n\n    for i in range(2, n + 1):\n        denominator *= i\n    \n    # Calculate and return the nth Catalan number\n    return numerator // (denominator * denominator)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2]]}], "Mbpp/582": [{"task_id": "Mbpp/582", "solution": "def is_dict_empty(d):\n    return len(d) == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "import math\n\ndef binomial_coefficient(n, k):\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\ndef sum_of_product(n):\n    if n < 2:\n        return n\n\n    total = 0\n    for i in range(n):\n        total += binomial_coefficient(n, i) * binomial_coefficient(n, i + 1)\n    return total", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    part1 = arr[:n]\n    part2 = arr[n:]\n    new_arr = part2 + part1\n    return new_arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    result = []\n    for i in range(start, end+1):\n        if int(i**0.5)**2 == i:\n            result.append(i)\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of first n natural numbers\n    sum_of_numbers = (n * (n + 1)) // 2\n    \n    # Calculate the average of first n natural numbers\n    average_of_numbers = sum_of_numbers / n\n    \n    return sum_of_numbers, average_of_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    if not matrix or n >= len(matrix[0]) or n < 0:\n        return None\n    max_val = float('-inf')\n    for row in matrix:\n        if len(row) > n and row[n] > max_val:\n            max_val = row[n]\n    return max_val", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -1]]}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    def merge_and_find_kth(arr1, arr2, k):\n        len1, len2 = len(arr1), len(arr2)\n        if len1 == 0:\n            return arr2[k - 1]\n        if len2 == 0:\n            return arr1[k - 1]\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        i = min(len1, k // 2)\n        j = min(len2, k // 2)\n        if arr1[i - 1] < arr2[j - 1]:\n            return merge_and_find_kth(arr1[i:], arr2, k - i)\n        else:\n            return merge_and_find_kth(arr1, arr2[j:], k - j)\n    return merge_and_find_kth(arr1, arr2, k)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3], [true, true, false], 3]]}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "def get_ludic(limit):\n    ludic_numbers = []\n    for i in range(1, limit + 1):\n        if is_lucid(i):\n            ludic_numbers.append(i)\n    return ludic_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    parts = ip.split('.')\n    # Remove leading zeroes from each part of the IP address\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back together with '.' separator\n    new_ip = '.'.join(parts)\n    return new_ip", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    # Convert polar coordinates to rectangular coordinates\n    rect = cmath.rect(r, theta)\n    return (rect, cmath.polar(rect))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Calculate the number of digits in the number\n    num_str = str(num)\n    num_digits = len(num_str)\n    \n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_of_digits = sum(int(digit) ** num_digits for digit in num_str)\n    \n    # Check if the sum is equal to the original number\n    return sum_of_digits == num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "def is_even(num):\n    return num % 2 == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    # Create a dictionary to keep track of character counts\n    char_counts = {}\n\n    # Loop through each character in the string\n    for char in s:\n        # If the character is already in the dictionary, it is repeated\n        if char in char_counts:\n            return char\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_counts[char] = 1\n\n    # If no repeated character is found, return None\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "def average_tuple(tuple_of_tuples):\n    averages = []\n    for tup in tuple_of_tuples:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "def reverse_words(input_string):\n    # Split the input string by spaces into a list of words\n    words = input_string.split()\n    \n    # Reverse the order of the words in the list\n    reversed_words = words[::-1]\n    \n    # Join the reversed words into a single string with spaces\n    reversed_string = ' '.join(reversed_words)\n    \n    return reversed_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    return [first_elements, second_elements]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return [elem for i, elem in enumerate(lst) if (i + 1) % k != 0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "def is_prime(num):\n    # Prime numbers are greater than 1\n    if num <= 1:\n        return False\n    # Check for factors from 2 to the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "import math\n\ndef degree_radian(degree):\n    radian = degree * (math.pi/180)\n    return radian", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    letters = []\n    numbers = []\n    for char in s:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            letters.append(char)\n    return ''.join(letters + numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end() - 1\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "def is_upper(string):\n    return string.upper()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    return tuple(x % y for x, y in zip(tuple1, tuple2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged_list = []\n    i = 0\n    j = 0\n    \n    while i < size and j < size:\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    \n    while i < size:\n        merged_list.append(list1[i])\n        i += 1\n    \n    while j < size:\n        merged_list.append(list2[j])\n        j += 1\n    \n    if size % 2 == 0:\n        median_index = size // 2\n        median = (merged_list[median_index - 1] + merged_list[median_index]) / 2\n    else:\n        median_index = size // 2\n        median = merged_list[median_index]\n    \n    return median", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divide two lists element-wise.\n    \n    Args:\n        list1 (list): The numerator list.\n        list2 (list): The denominator list.\n        \n    Returns:\n        list: A list containing the element-wise division result.\n        \n    Raises:\n        ValueError: If the lists are not of equal length.\n        ZeroDivisionError: If any element in list2 is 0.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length\")\n    \n    result = []\n    for num1, num2 in zip(list1, list2):\n        if num2 == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed\")\n        result.append(num1 / num2)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    # Create a dictionary to store the count of each number modulo 2\n    count = {}\n    for num in numbers:\n        if num % 2 == 0:\n            count[num] = count.get(num, 0) + 1\n    \n    # Find the maximum count in the dictionary\n    max_count = max(count.values()) if count else 0\n    \n    return max_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius <= 0:\n        return None\n    else:\n        side_length = math.sqrt(3) * radius\n        area = (math.sqrt(3) / 4) * side_length ** 2\n        return area", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[0]], "plus_fail_tests": [[0.5]]}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell_triangle = [[0] * (n+1) for _ in range(n+1)]\n    bell_triangle[0][0] = 1\n    \n    for i in range(1, n+1):\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        \n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i-1][j-1] + bell_triangle[i][j-1]\n            \n    return bell_triangle[n][0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "def find_Parity(x):\n    parity = 0\n    while x:\n        parity ^= x & 1\n        x >>= 1\n    return parity", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-10]]}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    zero_count = lst.count(0)  # Count the number of zeroes\n    lst = [x for x in lst if x != 0]  # Remove zeroes from the list\n    lst.extend([0] * zero_count)  # Append zeroes at the end\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += nums[i] ^ nums[j]\n    return xor_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "Here's the `replace_spaces` function code:\n\n```\ndef replace_spaces(input_str):\n    result = ''\n    for char in input_str:\n        if char == ' ':\n            result += '_'\n        elif char == '_':\n            result += ' '\n        else:\n            result += char\n    return result\n```", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(velocity, temperature):\n    if velocity <= 4.8 or temperature >= 10:\n        return temperature\n    wind_chill_index = 13.12 + (0.6215 * temperature) - (11.37 * (velocity ** 0.16)) + (0.3965 * temperature * (velocity ** 0.16))\n    return math.ceil(wind_chill_index)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "def nth_nonagonal(n):\n    return (5 * n ** 2 - 3 * n) // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["AbCdE", "fGH", "IJKLMnOp", "qrs", "TUVW", "xyz"]]]}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    # Create a max heap\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    \n    # Extract elements from the heap one by one\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap root (max element) with last element\n        heapify(arr, i, 0)  # Heapify the reduced heap\n    \n    return arr\n\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # Check if left child of root exists and is greater than the root\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n    \n    # Check if right child of root exists and is greater than the root\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n    \n    # Change root, if needed\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # Swap\n        heapify(arr, n, largest)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    \n    # Initialize a 2D array to store maximum average up to each cell\n    max_avg = [[0] * n for _ in range(n)]\n    \n    # Calculate maximum average for each cell\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                max_avg[i][j] = matrix[i][j]\n            elif i == 0:\n                max_avg[i][j] = (max_avg[i][j - 1] * j + matrix[i][j]) / (j + 1)\n            elif j == 0:\n                max_avg[i][j] = (max_avg[i - 1][j] * i + matrix[i][j]) / (i + 1)\n            else:\n                max_avg[i][j] = max((max_avg[i][j - 1] * j + matrix[i][j]) / (j + 1),\n                                    (max_avg[i - 1][j] * i + matrix[i][j]) / (i + 1))\n    \n    # Return the maximum average for the bottom-right cell\n    return max_avg[n - 1][n - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[0, 0, 0], [0, 0, 0], [0, 0, -1]]]]}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "def dict_to_tuple(tup, d):\n    new_tuple = tup + (d,)\n    return new_tuple", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/640": [{"task_id": "Mbpp/640", "solution": "import re\n\ndef remove_parenthesis(strings):\n    result = []\n    for string in strings:\n        result.append(re.sub(r'\\(.*?\\)', '', string))\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "def filter_data(student_data, min_height, min_weight):\n    filtered_students = {}\n    for student, (height, weight) in student_data.items():\n        if height >= min_height and weight >= min_weight:\n            filtered_students[student] = (height, weight)\n    return filtered_students", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "def match_wordz_middle(word):\n    if len(word) < 3:\n        return False\n    else:\n        for i in range(1, len(word)-1):\n            if word[i] == 'z':\n                return True\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "def extract_quotation(string):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, string)\n    return matches", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "def sum_of_subarray_prod(arr):\n    result = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j + 1):\n                prod *= arr[k]\n            result += prod\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    first_bit = num & 1\n    last_bit = num & (1 << (len(bin(num))-3))\n    middle_bits = num & ((1 << (len(bin(num))-3)) - 2)\n    toggled_middle_bits = middle_bits ^ ((1 << (len(bin(num))-3)) - 2)\n    return (first_bit << (len(bin(num))-1)) + toggled_middle_bits + last_bit", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) * a**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU].*'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "def rotate_right(arr, k):\n    n = len(arr)\n    # Calculate the effective rotation index\n    k = k % n\n    # Rotate the list using slicing and concatenation\n    rotated_arr = arr[-k:] + arr[:-k]\n    return rotated_arr", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "import re\n\ndef replace_specialchar(text):\n    # Using regular expression to replace spaces, commas, or dots with colon\n    return re.sub(r'[ ,.]', ':', text)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "def lateralsurface_cone(r, h):\n    import math\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Move towards left to find the first occurrence\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, target):\n    left, right = 0, len(arr)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = ''\n    for char in s:\n        if char.isupper():\n            result += ' ' + char\n        else:\n            result += char\n    # Remove leading space if it exists\n    return result.lstrip() if result else result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/746": [{"task_id": "Mbpp/746", "solution": "def sector_area(radius, angle):\n    if angle > 360:\n        return None\n    area = (angle/360) * math.pi * (radius**2)\n    return area", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    # Check if all characters in the string are the same\n    return all(char == s[0] for char in s)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "def check_none(tuple):\n    for value in tuple:\n        if value is None:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "def multiply_elements(tup):\n    result = ()\n    for i in range(len(tup) - 1):\n        result += (tup[i] * tup[i + 1],)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    lst = [int(x) for x in lst]\n    lst.sort()\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    d = {}\n    for i in range(0, len(t), 2):\n        if i + 1 < len(t):\n            d[t[i]] = t[i+1]\n    return d", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    result = []\n    for item in lst:\n        if not result or item != result[-1]:\n            result.append(item)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n\n    # Check if each parent node is smaller than its children\n    for i in range(n // 2):\n        # Left child\n        if 2 * i + 1 < n and arr[i] > arr[2 * i + 1]:\n            return False\n        # Right child\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    \n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "def min_k(tuple_list, k):\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])[:k]\n    return sorted_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        counts[sublist_tuple] = counts.get(sublist_tuple, 0) + 1\n    return counts", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for _ in range(n-2):\n            a, b = b, b*2 + a\n        return b", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "def combine_tuples(test_list, tup):\n    return test_list + list(tup)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 2]]], "plus_fail_tests": [[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]]}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    reverse_pairs = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                reverse_pairs += 1\n    return reverse_pairs", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    # Check if the string has a valid format for a decimal number\n    if not string.replace('.', '', 1).isdigit():\n        return False\n    \n    # Split the string by the decimal point\n    parts = string.split('.')\n    \n    # Check if there are two parts: the whole number and the decimal part\n    if len(parts) != 2:\n        return False\n    \n    # Check if both parts contain only digits\n    if not parts[0].isdigit() or not parts[1].isdigit():\n        return False\n    \n    # Check if the decimal part has a precision of 2\n    if len(parts[1]) != 2:\n        return False\n    \n    # If all checks passed, the string is a decimal number with a precision of 2\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["123"]]}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "code = '''\ndef number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n'''", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize minimum difference\n    min_diff = float('inf')\n    \n    # Compare adjacent elements and update min_diff\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < min_diff:\n            min_diff = arr[i + 1] - arr[i]\n    \n    return min_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst) - 1)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    thirty_days_months = {4, 6, 9, 11}  # Months with 30 days\n    return month in thirty_days_months", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(digit != 0 and num % digit == 0 for digit in digits):\n            result.append(num)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, target_sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    diff = []\n    for element in list1:\n        if element not in list2:\n            diff.append(element)\n    for element in list2:\n        if element not in list1 and element not in diff:\n            diff.append(element)\n    return diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10]]]}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    odd_sum = 0\n    for i in range(1, 2*n+1, 2):\n        odd_sum += i**4\n    return odd_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    # Define opening and closing brackets\n    opening_brackets = {'(', '[', '{'}\n    closing_brackets = {')', ']', '}'}\n    # Define matching pairs\n    matching_pairs = {('(', ')'), ('[', ']'), ('{', '}')}\n    \n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False  # Unbalanced expression: Closing bracket without a corresponding opening bracket\n            top = stack.pop()\n            if (top, char) not in matching_pairs:\n                return False  # Unbalanced expression: Mismatched opening and closing brackets\n    # After iterating through the expression, if there are remaining elements in the stack, it's unbalanced\n    return len(stack) == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "def occurrence_substring(string, substring):\n    if substring not in string:\n        return None\n    \n    start = string.find(substring)\n    end = start + len(substring)\n    \n    return (substring, start, end)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, target):\n    if not arr:\n        return 0\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] <= target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, -90.20293226837086, -12.02758648076636, -35.964731488229475], false]]}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Calculate the sum of non-repeated elements\n    sum_non_repeated = 0\n    for num, freq in frequency.items():\n        if freq == 1:\n            sum_non_repeated += num\n    \n    return sum_non_repeated", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    packed_list = []\n    sublist = []\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i - 1]:\n            if sublist:\n                packed_list.append(sublist)\n                sublist = []\n        sublist.append(lst[i])\n\n    if sublist:\n        packed_list.append(sublist)\n\n    return packed_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "def find_combinations(lst):\n    import itertools\n    combinations = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sum_tuple = tuple(map(sum, itertools.zip_longest(lst[i], lst[j], fillvalue=0)))\n            combinations.append(sum_tuple)\n    return combinations", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):  # Loop through odd indices\n        if lst[i] % 2 == 0:  # Check if the number at odd index is even\n            return False  # Return False if an even number is found\n    return True  # Return True if all odd indices contain odd numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "def ve_length(string, k):\n    words = string.split()\n    new_words = []\n    for word in words:\n        if len(word) != k:\n            new_words.append(word)\n    new_string = ' '.join(new_words)\n    return new_string", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove parentheses and split the string by commas\n    elements = tuple_str.strip(\"()\").split(',')\n    \n    # Convert each element to an integer and create a tuple\n    int_tuple = tuple(int(element.strip()) for element in elements)\n    \n    return int_tuple", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "import re\n\ndef _match_three(string):\n    pattern = \"abbb\"\n    if re.search(pattern, string):\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst + [string])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n            \n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product_even = 1\n    product_odd = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            product_even *= num\n            if even_count == 1:\n                break\n        else:\n            odd_count += 1\n            product_odd *= num\n            if odd_count == 1:\n                break\n                \n    return product_even * product_odd", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == len(arr) - 1 or arr[mid+1] != target:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(string):\n    pattern = r'^a.+b$'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["ab"]]}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    result = tuple(item for item in input_tuple if not isinstance(item, tuple))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    # Initialize a variable to store the sum\n    sum = 0\n    \n    # Iterate through each key-value pair in the dictionary\n    for key, value in dictionary.items():\n        # Add the value to the sum\n        sum += value\n        \n    # Return the sum\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    count = 0\n    for sublist in lst:\n        if isinstance(sublist, list):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Function to find the sum of an array.\n\n    Parameters:\n    arr (list): The input list of numbers.\n\n    Returns:\n    int: The sum of the numbers in the input list.\n    \"\"\"\n    return sum(arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "def ve_all_spaces(string):\n    return string.replace(\" \", \"\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/783": [{"task_id": "Mbpp/783", "solution": "import colorsys\n\ndef rgb_to_hsv(red, green, blue):\n    red = red / 255.0\n    green = green / 255.0\n    blue = blue / 255.0\n    \n    hsv = colorsys.rgb_to_hsv(red, green, blue)\n    \n    hue = round(hsv[0] * 360, 2)\n    saturation = round(hsv[1] * 100, 2)\n    value = round(hsv[2] * 100, 2)\n    \n    return (hue, saturation, value)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[0, 215, 0]], "plus_fail_tests": [[0, 0, 1]]}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    # Iterate over even indices\n    for i in range(0, len(lst), 2):\n        # Check if the number at even index is even\n        if lst[i] % 2 != 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "def k_smaller(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # 32-bit mask\n    mask = 0xFFFFFFFF\n    # Bitwise left rotation\n    return ((n << d) | (n >> (32 - d))) & mask", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    if k in tup:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "def count_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count\n\ndef test_three_equal(a, b, c):\n    count = count_equal(a, b, c)\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 2, 2]], "plus_fail_tests": [[10, 10, 20]]}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    if num < 0:\n        return False\n    sqrt_num = int(num ** 0.5)\n    return sqrt_num ** 2 == num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "def sum_list(list_of_lists):\n    max_sum = 0\n    max_list = []\n\n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    return max_list", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            total += num\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = [[x+i, y+j] for i in range(-1, 2) for j in range(-1, 2)]\n    adjacent_coords.remove(coord)  # Remove the given coordinate itself\n    return adjacent_coords", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    index = 1\n    while True:\n        triangular_num = index * (index + 1) // 2\n        digits = int(math.log10(triangular_num)) + 1\n        if digits >= n:\n            return index\n        index += 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    count = 0\n    num = 1\n    \n    while count < n:\n        num += 1\n        divisors = 0\n        \n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors += 1\n        \n        if divisors % 2 == 0:\n            count += 1\n            \n    return num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[987654321]]}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "from itertools import combinations_with_replacement\n\ndef generate_combinations(l, n):\n    combinations = []\n    for combo in combinations_with_replacement(l, n):\n        combinations.append(combo)\n    return combinations", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}]}}