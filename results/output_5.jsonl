{"task_id": "HumanEval/0", "completion": "from typing import List\nimport math\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if there are any two numbers in the given list that are closer to each other\n    than the specified threshold.\n\n    Args:\n    - numbers: A list of floats representing numbers to be checked.\n    - threshold: A float specifying the maximum allowed difference between two numbers\n                 for them to be considered \"close\".\n\n    Returns:\n    - True if there are at least two numbers closer than the threshold, otherwise False.\n    \"\"\"\n\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if math.isclose(numbers[i], numbers[i + 1], abs_tol=threshold):\n            return True\n    \n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Separate groups of nested parentheses from a string and return them as a list of strings.\n    \n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_group = []\n    \n    for char in paren_string:\n        if char == ' ':\n            continue\n        elif char == '(':\n            current_group.append(char)\n        elif char == ')':\n            current_group.append(char)\n            # Check if current_group forms a valid group\n            if current_group.count('(') == current_group.count(')'):\n                result.append(''.join(current_group))\n                current_group = []\n    \n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, return the decimal part of the number.\n    \"\"\"\n    return number % 1"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    \n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    if not numbers:\n        return 0.0\n    \n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    \n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    interspersed_list = []\n    for i in range(len(numbers)):\n        interspersed_list.append(numbers[i])\n        if i < len(numbers) - 1:  # Check if not the last element\n            interspersed_list.append(delimeter)\n    return interspersed_list"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    depths = []\n    groups = paren_string.split()\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n# Testing the function\nassert filter_by_substring([], 'a') == []  # No strings to filter, should return an empty list\nassert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']  # Only strings containing 'a' should be returned\nassert filter_by_substring(['hello', 'world'], 'o') == ['hello', 'world']  # Both strings contain 'o'\nassert filter_by_substring(['hello', 'world'], 'x') == []  # No strings contain 'x', should return an empty list\nassert filter_by_substring(['apple', 'banana', 'cherry'], 'p') == ['apple']  # Only 'apple' contains 'p'"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in the list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_result = sum(numbers)\n    prod_result = 1\n    for num in numbers:\n        prod_result *= num\n    return sum_result, prod_result"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Generate a list of rolling maximums from a given list of integers.\n\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    current_max = float('-inf')  # Initialize current_max to negative infinity\n\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n\n    return result"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    if string == \"\":\n        return \"\"\n    \n    # Check if the entire string is already a palindrome\n    if string == string[::-1]:\n        return string\n    \n    # Find the longest palindromic suffix starting from the end\n    for i in range(len(string)-1, -1, -1):\n        if string[i:] == string[i:][::-1]:\n            # Concatenate the original string with the reverse of the non-palindromic prefix\n            return string + string[:i][::-1]\n    \n    # If no palindromic suffix found, something went wrong, but return the input string\n    return string"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Perform binary XOR on two input binary strings and return the result.\n    \n    Examples:\n    >>> string_xor('010', '110')\n    '100'\n    >>> string_xor('10101', '11111')\n    '01010'\n    \"\"\"\n    # Assuming both strings are of the same length\n    result = []\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result.append('1')\n        else:\n            result.append('0')\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    \n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \n    >>> longest(['apple', 'banana', 'pear', 'orange'])\n    'banana'\n    \n    >>> longest(['cat', 'dog', 'elephant', 'zebra', 'elephant'])\n    'elephant'\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    \n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Returns a string containing space-delimited numbers starting from 0 up to n inclusive.\n    \n    Examples:\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of distinct alphabetic characters in the input string.\n    \n    >>> count_distinct_characters('Python')\n    6\n    >>> count_distinct_characters('Hello')\n    4\n    \"\"\"\n    distinct_chars = set()\n    \n    for char in string.lower():\n        if char.isalpha():\n            distinct_chars.add(char)\n    \n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    beats = [note_map[note] for note in notes]\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    if len(substring) == 0 or len(substring) > len(string):\n        return 0\n\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numberals from 'zero' to 'nine' in ascending order.\n\n    >>> sort_numbers('three one five')\n    'one three five'\n    >>> sort_numbers('six nine two four')\n    'two four six nine'\n    >>> sort_numbers('eight')\n    'eight'\n    \"\"\"\n    num_to_word = {\n        0: 'zero', 1: 'one', 2: 'two', 3: 'three', \n        4: 'four', 5: 'five', 6: 'six', 7: 'seven', \n        8: 'eight', 9: 'nine'\n    }\n    \n    word_to_num = {v: k for k, v in num_to_word.items()}\n    \n    words = numbers.split()\n    numbers_list = [word_to_num[word] for word in words]\n    numbers_list.sort()\n    sorted_words = [num_to_word[num] for num in numbers_list]\n    \n    return ' '.join(sorted_words)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    if min_val == max_val:\n        return [0.0] * len(numbers)  # All elements are the same, return [0.0, 0.0, ..., 0.0]\n\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter a list of Python values and return only the integers.\n\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"\n    Return the length of the given string\n    >>> strlen('xyz')\n    3\n    >>> strlen('')\n    0\n    \"\"\"\n    length = 0\n    for char in string:\n        length += 1\n    return length"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    >>> largest_divisor(15)\n    5\n    >>> largest_divisor(64)\n    32\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    # n must be odd at this point, so we can skip even numbers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    unique = []\n    for number in numbers:\n        if number not in seen:\n            unique.append(number)\n            seen.add(number)\n    return unique"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    >>> flip_case('WORLD')\n    'world'\n    >>> flip_case('python')\n    'PYTHON'\n    >>> flip_case('PyThOn')\n    'pYtHoN'\n    >>> flip_case('12345')\n    '12345'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into a single string\n    \n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = ''\n    for s in strings:\n        result += s\n    return result"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" \n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"\n    Return true if a given number is prime, and false otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True  # 2 is a prime number\n    if n % 2 == 0:\n        return False  # Other even numbers are not prime\n\n    # Check for odd divisors from 3 up to the square root of n\n    limit = int(n**0.5) + 1\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n\n    Assumption: xs has an even number of coefficients and the largest non-zero coefficient is present.\n\n    Examples:\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Start with an initial guess\n    x = 0.0\n    step = 0.1\n    max_steps = 1000\n    \n    # Iteratively refine the estimate of the root\n    for _ in range(max_steps):\n        fx = poly(xs, x)\n        if abs(fx) < 1e-6:\n            return x\n        x += step\n    return None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"\n    Sorts elements at positions 0, 3, 6, ... of the list `l`.\n    \"\"\"\n    result = l[:]  # Create a copy of the original list\n    for i in range(0, len(l), 3):\n        result[i:i+3] = sorted(result[i:i+3])  # Sort every third element and update the result\n    return result"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"\n    Return sorted unique elements in a list\n    \"\"\"\n    unique_elements = list(set(l))\n    unique_elements.sort()\n    return unique_elements"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"\n    Return maximum element in the list.\n    If list is empty, return None.\n    \n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return None\n    \n    max_val = float('-inf')  # Initialize with a very low value\n    for num in l:\n        if num > max_val:\n            max_val = num\n    \n    return max_val"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    \"\"\"\n    odd_indices = []\n    even_indices = []\n    \n    # Separate elements into odd_indices and even_indices\n    for i in range(len(l)):\n        if i % 2 == 0:  # even index\n            even_indices.append(l[i])\n        else:           # odd index\n            odd_indices.append(l[i])\n    \n    # Sort even_indices\n    even_indices.sort()\n    \n    # Combine odd_indices and sorted even_indices\n    result = []\n    odd_index = 0\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices[even_index])\n            even_index += 1\n        else:\n            result.append(odd_indices[odd_index])\n            odd_index += 1\n    \n    return result"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    >>> encode_cyclic(\"abcdef\")\n    'bcadef'\n    >>> encode_cyclic(\"abcdefghi\")\n    'bcadefghi'\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True  # 2 is prime\n        if num % 2 == 0:\n            return False  # other even numbers are not prime\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n\n    count = 2  # We already know the first two prime Fibonacci numbers (2 and 3)\n    a, b = 1, 2  # These are the first two Fibonacci numbers\n    while count < n:\n        c = a + b\n        a = b\n        b = c\n        if is_prime(c):\n            count += 1\n\n    return c"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue  # Skip the same element to avoid duplicate triples\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Return the number of collisions between cars moving left to right and right to left on an infinitely long straight road.\n\n    >>> car_race_collision(3)\n    3\n    >>> car_race_collision(0)\n    0\n    >>> car_race_collision(5)\n    5\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    # Total number of collisions\n    collisions = 0\n    \n    # Each left-moving car collides with each right-moving car\n    # There are n cars moving left and n cars moving right\n    for i in range(1, n + 1):\n        collisions += i  # Each left-moving car collides with i right-moving cars\n    \n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return [i+1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in l:\n        if -i in l and i != -i:  # check if the negative counterpart exists in the list\n            return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"\n    Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n    \n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if base < 1 or base > 9:\n        raise ValueError(\"Base must be between 1 and 9 inclusive.\")\n    \n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    \n    # Reverse the list to get the correct order of digits\n    result.reverse()\n    return ''.join(result)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"\n    Given length of a side and height, return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\n# Testing the function\nassert triangle_area(5, 3) == 7.5\nassert triangle_area(10, 4) == 20.0\nassert triangle_area(6, 2) == 6.0\nassert triangle_area(0, 5) == 0.0\nassert triangle_area(7, 0) == 0.0"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    \"\"\"\n    Compute the n-th element of the fib4 number sequence.\n    \n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib4_values = [0] * (n + 1)\n    fib4_values[0] = 0\n    fib4_values[1] = 0\n    fib4_values[2] = 2\n    fib4_values[3] = 0\n    \n    for i in range(4, n + 1):\n        fib4_values[i] = fib4_values[i-1] + fib4_values[i-2] + fib4_values[i-3] + fib4_values[i-4]\n    \n    return fib4_values[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"\n    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Check if the list is empty\n    if len(l) == 0:\n        raise ValueError(\"median() arg is an empty sequence\")\n    \n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    # Find the median\n    if n % 2 == 1:\n        # Odd number of elements\n        return sorted_list[n // 2]\n    else:\n        # Even number of elements\n        mid1 = sorted_list[(n // 2) - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    result = 2 ** n % p\n    return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord('a') + 5) % 26) + ord('a')) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"\n    Add two numbers x and y\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n            \n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\n# Testing the function\nassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\nassert common([5, 3, 2, 8], [3, 2]) == [2, 3]\nassert common([], [1, 2, 3]) == []\nassert common([1, 2, 3], []) == []\nassert common([1, 2, 3], [4, 5, 6]) == []\nassert common([1, 1, 1], [1, 1]) == [1]"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Start with the smallest prime number\n    factor = 2\n    # Keep track of the largest prime factor\n    largest_prime = 0\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n            largest_prime = factor\n        else:\n            factor += 1\n    if n > largest_prime:\n        largest_prime = n\n    return largest_prime"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    Return the sum of all integers from 1 to n.\n\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    balance = 0\n    \n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n            if balance < 0:\n                return False\n    \n    return balance == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"\n    Return the n-th element of the FibFib number sequence.\n\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    fibfib_list = [0] * (n + 1)\n    fibfib_list[0] = 0\n    fibfib_list[1] = 0\n    fibfib_list[2] = 1\n    \n    for i in range(3, n + 1):\n        fibfib_list[i] = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n    \n    return fibfib_list[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"\n    Count the number of vowels in the given string 's'.\n    Vowels are 'a', 'e', 'i', 'o', 'u'. 'y' is also a vowel if it's at the end of the word.\n\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set('aeiou')\n    count = 0\n    s = s.lower()  # Convert the string to lowercase to handle case insensitivity\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        elif i == len(s) - 1 and s[i] == 'y':\n            count += 1  # 'y' is counted as a vowel if it's the last character\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    if shift >= num_digits:\n        return int(x_str[::-1])\n    shift = shift % num_digits\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return int(shifted_str)"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"\n    Takes a string as input and returns the sum of ASCII codes of the uppercase characters only.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum_upper = 0\n    for char in s:\n        if char.isupper():\n            sum_upper += ord(char)\n    return sum_upper"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    \"\"\"\n    Given a string representing numbers of apples and oranges and the total number of fruits,\n    return the number of mango fruits in the basket.\n    \n    Example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Parse the string to get numbers of apples and oranges\n    import re\n    apples = int(re.search(r'(\\d+) apples', s).group(1))\n    oranges = int(re.search(r'(\\d+) oranges', s).group(1))\n    \n    # Calculate the number of mango fruits\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    >>> pluck([9,8,5,6])\n    [8, 1]\n    >>> pluck([1,3,5,7])\n    []\n    \"\"\"\n    smallest_even_value = float('inf')\n    smallest_even_index = float('inf')\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even_value:\n            smallest_even_value = node\n            smallest_even_index = i\n    \n    if smallest_even_value == float('inf'):\n        return []\n    else:\n        return [smallest_even_value, smallest_even_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n\n    # Count the frequency of each integer in the list\n    freq = Counter(lst)\n    \n    # Initialize the variable to store the greatest valid integer\n    max_valid = -1\n    \n    # Check the condition for each integer\n    for num, count in freq.items():\n        if count >= num:\n            max_valid = max(max_valid, num)\n    \n    # Return the result\n    return max_valid"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    lst.sort()  # Sort the list in ascending order\n    result = []\n    \n    # Use two pointers approach to interleave elements in the required order\n    i, j = 0, len(lst) - 1\n    \n    while i <= j:\n        if i == j:\n            result.append(lst[i])\n            break\n        if i % 2 == 0:\n            result.append(lst[i])  # Append element at even index\n            i += 1\n        else:\n            result.append(lst[j])  # Append element at odd index\n            j -= 1\n            \n    return result"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle, calculate the area.\n    Return the area rounded to 2 decimal points if the sides form a valid triangle,\n    otherwise return -1.\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    \n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    '''\n    is_balanced = (q == q[::-1])\n    total_weight = sum(q)\n    return is_balanced and total_weight <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic.\n    \n    >>> smallest_change([1,2,3,5,4,7,9,6])\n    4\n    >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n    \"\"\"\n    changes_needed = 0\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes_needed += 1\n    return changes_needed"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    \"\"\"\n    Compare two lists of strings based on total character count.\n    Returns the list with fewer total characters; returns lst1 in case of a tie.\n    \"\"\"\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n\n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"\n    Returns True if the given number is the multiplication of 3 prime numbers less than 100, False otherwise.\n    >>> is_multiply_prime(30)\n    True\n    \"\"\"\n    # Hardcoded list of prime numbers less than 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Check all combinations of three primes\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    current = n\n    while current <= x:\n        if current == x:\n            return True\n        current *= n\n    return False\n\n# Testing the Function\nassert is_simple_power(1, 4) == True\nassert is_simple_power(2, 2) == True\nassert is_simple_power(8, 2) == True\nassert is_simple_power(3, 2) == False\nassert is_simple_power(3, 1) == False\nassert is_simple_power(5, 3) == False\nassert is_simple_power(27, 3) == True\nassert is_simple_power(16, 4) == True\nassert is_simple_power(0, 2) == False\nassert is_simple_power(1, 1) == True"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    \"\"\"\n    Returns True if a is a cube of some integer number, False otherwise.\n    \"\"\"\n    if a == 0:\n        return True\n    \n    if a < 0:\n        b = round((-a)**(1/3))  # Take cube root of positive equivalent\n        return b**3 == -a  # Check if cube of b is -a\n    else:\n        b = round(a**(1/3))\n        return b**3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"\n    Count the number of prime hexadecimal digits in the input string num.\n    Prime hexadecimal digits are: '2', '3', '5', '7', 'B', 'D'.\n    \"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    prime_count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            prime_count += 1\n    return prime_count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert a decimal number to a binary string with a specific format.\n\n    Examples:\n    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n    'db100000db'\n    \"\"\"\n    binary_str = bin(decimal)[2:]  # Get binary string without '0b' prefix\n    return f\"db{binary_str}db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        triplet = s[i:i+3]\n        if len(set(triplet)) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"\n    Return a list of letter grades corresponding to the given GPAs.\n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    results = []\n    for gpa in grades:\n        if gpa == 4.0:\n            results.append('A+')\n        elif gpa >= 3.7:\n            results.append('A')\n        elif gpa >= 3.3:\n            results.append('A-')\n        elif gpa >= 3.0:\n            results.append('B+')\n        elif gpa >= 2.7:\n            results.append('B')\n        elif gpa >= 2.3:\n            results.append('B-')\n        elif gpa >= 2.0:\n            results.append('C+')\n        elif gpa >= 1.7:\n            results.append('C')\n        elif gpa >= 1.3:\n            results.append('C-')\n        elif gpa >= 1.0:\n            results.append('D+')\n        elif gpa >= 0.7:\n            results.append('D')\n        elif gpa >= 0.0:\n            results.append('D-')\n        else:\n            results.append('E')  # Handle unexpected negative GPAs or errors\n\n    return results"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"\n    Returns True if the length of the string is a prime number, otherwise False.\n    \"\"\"\n    length = len(string)\n    \n    if length <= 1:\n        return False\n    \n    # Check for prime number\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 2  # Numbers are 1 and 11.\n\n    count_start_with_1 = 10 ** (n - 1)  # Numbers like 10-19, 100-199, etc.\n    count_end_with_1 = 9 * 10 ** (n - 2)  # Numbers like 1x (x=0-9), 1xx (xx=00-99), etc.\n    count_overlap = 10  # Numbers like 11, 111, etc.\n\n    total_count = count_start_with_1 + count_end_with_1 - count_overlap\n    return total_count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    if N == 0:\n        return \"0\"\n\n    # Convert N to binary string and sum its digits\n    binary_digits = bin(N)[2:]  # get binary representation skipping '0b'\n    sum_digits = sum(int(digit) for digit in binary_digits)\n\n    # Convert sum_digits to binary string and return\n    return bin(sum_digits)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n    \"\"\"\n    sum_even_odd_index = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_index += lst[i]\n    return sum_even_odd_index"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    if not s:\n        return s\n\n    words = []\n    current_word = ''\n    \n    # Iterate through each character in the input string\n    for char in s:\n        if char == ' ':\n            if current_word:\n                words.append(current_word)\n                current_word = ''\n            words.append(' ')  # Preserve spaces as separate elements\n        else:\n            current_word += char\n\n    if current_word:\n        words.append(current_word)\n\n    result = []\n    for item in words:\n        if item == ' ':\n            result.append(' ')\n        else:\n            sorted_word = ''.join(sorted(item))\n            result.append(sorted_word)\n\n    return ''.join(result)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    Given a 2-dimensional list (nested lists), find integers x in the list\n    and return a list of tuples (row, column), sorted initially by rows in ascending order,\n    and by columns in descending order within the row.\n    \n    Args:\n    - lst (list of list of int): The 2-dimensional list to search through.\n    - x (int): The integer to find within the list.\n    \n    Returns:\n    - list of tuple of int: A list of tuples representing the coordinates of x in the list.\n    \"\"\"\n    coordinates = []\n    \n    for i, row in enumerate(lst):\n        if x in row:\n            indices = [j for j, val in enumerate(row) if val == x]\n            for idx in indices:\n                coordinates.append((i, idx))\n    \n    # Sort by row index (ascending) and column index (descending)\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n\n    first = array[0]\n    last = array[-1]\n    sum_first_last = first + last\n\n    if sum_first_last % 2 == 1:  # sum is odd\n        return sorted(array)  # ascending order\n    else:  # sum is even\n        return sorted(array, reverse=True)  # descending order"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = []\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            shifted = chr(base + (ord(char) - base + 2) % 26)\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    sorted_lst = sorted(set(lst))  # Sort and remove duplicates\n    if len(sorted_lst) < 2:\n        return None\n    \n    return sorted_lst[1]  # Return the second smallest element"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    boredoms = 0\n    sentences = re.split(r'[.!?]', S)  # Split by '.', '?', or '!'\n    \n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredoms += 1\n            \n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in (x, y, z)):\n        return (x == y + z) or (y == x + z) or (z == x + y)\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encode the message by swapping case of all letters and replacing vowels.\n    \"\"\"\n    encoded_message = []\n    vowels = 'aeiou'\n    \n    for char in message:\n        if char.isalpha():  # check if character is a letter\n            if char.lower() in vowels:  # check if it's a vowel\n                new_char = chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n                encoded_message.append(new_char.upper() if char.isupper() else new_char)\n            else:\n                encoded_message.append(char.swapcase())  # swap case if it's a letter but not a vowel\n        else:\n            encoded_message.append(char)  # append non-letter characters as is\n    \n    return ''.join(encoded_message)"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True  # 2 is prime\n        if num % 2 == 0:\n            return False  # Other even numbers are not prime\n        # Check divisibility from 3 up to sqrt(num)\n        sqrt_num = int(num**0.5) + 1\n        for i in range(3, sqrt_num, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize variables to track the largest prime number and its sum of digits\n    largest_prime = None\n    sum_of_digits = 0\n\n    # Iterate through the list to find the largest prime number\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    # If we found a largest prime number, calculate the sum of its digits\n    if largest_prime is not None:\n        sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n\n    return sum_of_digits"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    \n    is_all_lower = False\n    is_all_upper = False\n    \n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.islower():\n                is_all_lower = True\n            elif key.isupper():\n                is_all_upper = True\n            else:\n                return False\n        else:\n            return False\n    \n    return is_all_lower ^ is_all_upper"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"\n    Returns an array of the first n prime numbers less than n.\n    \"\"\"\n    if n <= 1:\n        return []\n\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n        num += 1\n\n        # Stop if we exceed n\n        if num >= n:\n            break\n\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"\n    Return the product of the unit digits of integers a and b.\n    \n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    return unit_a * unit_b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    >>> count_upper('aBCdEf')\n    1\n    >>> count_upper('abcdefg')\n    0\n    >>> count_upper('dBBE')\n    0\n    >>> count_upper('AeiO')\n    2\n    >>> count_upper('')\n    0\n    \"\"\"\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "import math\n\ndef closest_integer(value):\n    \"\"\"\n    Return the closest integer to the given value.\n\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    >>> closest_integer(\"14.5\")\n    15\n    \"\"\"\n\n    # Convert input value to float\n    number = float(value)\n\n    # Round to the nearest integer\n    closest_int = round(number)\n\n    # Return the closest integer\n    return int(closest_int)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Return the number of stones in each level of a pile of n levels.\n\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 1:  # odd index (1-based index)\n            result.append(n + 2 * (i - 1))\n        else:  # even index (1-based index)\n            result.append(n + 2 * i)\n    return result"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    Split the input string into individual words separated by commas or spaces.\n    Returns a list of words.\n    \"\"\"\n    words = s.split()  # Split by whitespace\n    result = []\n    for word in words:\n        # Remove any commas from the word\n        cleaned_word = word.strip(',')\n        result.append(cleaned_word)\n    return result"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"\n    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    elif (y - 1) >= x:\n        return y - 1\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    return bin(int(rounded_avg))"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        str_num = str(num)\n        if all(int(digit) % 2 != 0 for digit in str_num):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    word_dict = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    arr = sorted([i for i in arr if 1 <= i <= 9], reverse=True)\n    return [word_dict[i] for i in arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    \"\"\"\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    \"\"\"\n    def factorial(i):\n        \"\"\" Helper function to compute factorial of i \"\"\"\n        result = 1\n        for num in range(2, i + 1):\n            result *= num\n        return result\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(i * (i + 1) // 2)  # Corrected formula for sum of numbers from 1 to i\n    \n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    for num in range(1, n+1):\n        if str(num) == str(num)[::-1]:  # Check if the number is a palindrome\n            if num % 2 == 0:  # Check if the number is even\n                even_count += 1\n            else:  # The number is odd\n                odd_count += 1\n    \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Returns the number of elements in arr whose sum of digits is greater than 0.\n    \n    Examples:\n    >>> count_nums([])\n    0\n    >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n    \"\"\"\n    def sum_of_digits(n):\n        if n < 0:\n            n = -n  # consider absolute value for negative numbers\n        return sum(int(digit) for digit in str(n))\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True  # Empty or one element array is already sorted\n\n    for i in range(n):\n        # Check if array from index i to end followed by start to i-1 is sorted\n        rotated_arr = arr[i:] + arr[:i]\n        if all(rotated_arr[j] <= rotated_arr[j+1] for j in range(n-1)):\n            # If this rotation results in a sorted array\n            return True\n    \n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements\n    between lst1 and lst2 to make lst1 a list of only even numbers.\n    \n    Args:\n    - lst1: First list of numbers\n    - lst2: Second list of numbers\n    \n    Returns:\n    - \"YES\" if it is possible to exchange elements to make all elements of lst1 even,\n      otherwise \"NO\".\n    \"\"\"\n    count_even_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    count_odd_lst1 = len(lst1) - count_even_lst1\n    count_even_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if count_odd_lst1 == 0:\n        return \"YES\"\n    elif count_even_lst2 >= count_odd_lst1:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Examples:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    # Step 1: Split the input string into individual letters\n    letters = test.split()\n    \n    # Step 2: Create a dictionary to count occurrences of each letter\n    count_dict = {}\n    for letter in letters:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    \n    # Step 3: Find the maximum count\n    max_count = max(count_dict.values()) if count_dict else 0\n    \n    # Step 4: Collect all letters with the maximum count\n    result = {}\n    for letter, count in count_dict.items():\n        if count == max_count:\n            result[letter] = count\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(text, chars_to_delete):\n    chars_set = set(chars_to_delete)\n    result = ''.join(char for char in text if char not in chars_set)\n    deletions_made = len(result) != len(text)\n    return result, deletions_made"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if char.isdigit() and int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count} in the str{s} of the {s} input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    \n    total_units_of_water = sum(sum(row) for row in grid)\n    number_of_bucket_lowerings = math.ceil(total_units_of_water / capacity)\n    \n    return number_of_bucket_lowerings"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers according to the number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n\n    # Custom sorting function based on number of 1s in binary representation\n    def custom_sort(x):\n        return (bin(x).count('1'), x)\n\n    return sorted(arr, key=custom_sort)"}
{"task_id": "HumanEval/117", "completion": "def is_consonant(char):\n    return char.isalpha() and char.lower() not in ['a', 'e', 'i', 'o', 'u']\n\ndef select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum(1 for char in word if is_consonant(char))\n        if consonant_count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"\n    Return the closest vowel that stands between two consonants from the right side of the word.\n    Return empty string if no such vowel is found.\n    \"\"\"\n    if len(word) < 3:\n        return \"\"  # Return empty string for words with less than 3 characters\n    \n    vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Start checking from the second last character\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels:\n            # Check if the character before and after are consonants\n            if word[i - 1] in consonants and word[i + 1] in consonants:\n                return word[i]\n    \n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    '''\n    Determines if it's possible to concatenate the two strings in `lst` such that\n    the resulting string has balanced parentheses.\n    \n    Args:\n    - lst: A list of two strings consisting only of '(' and ')'.\n    \n    Returns:\n    - 'Yes' if a good string can be formed, 'No' otherwise.\n    '''\n    s1, s2 = lst[0], lst[1]\n    \n    # Count '(' and ')' in both strings\n    count_open = s1.count('(') + s2.count('(')\n    count_close = s1.count(')') + s2.count(')')\n    \n    # Check if we can balance the parentheses\n    if count_open == count_close:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # Create a copy of the array to avoid modifying the original input\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Return the first k elements of the sorted array\n    return sorted_arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):  # iterate through even indices only\n        if lst[i] % 2 != 0:  # check if the element at the even index is odd\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n    \"\"\"\n    sum_elements = 0\n    for i in range(k):\n        if -99 <= arr[i] <= 99:\n            sum_elements += arr[i]\n    return sum_elements"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    result.append(1)\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    Validate a date string in the format mm-dd-yyyy.\n\n    Returns True if the date is valid, otherwise False.\n    \"\"\"\n    if len(date) != 10:\n        return False\n    \n    if not (date[2] == '-' and date[5] == '-'):\n        return False\n    \n    try:\n        month = int(date[0:2])\n        day = int(date[3:5])\n        year = int(date[6:10])\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        # We're not considering leap years here, so February can have at most 28 days\n        return 1 <= day <= 28\n    \n    return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for c in txt if 'a' <= c <= 'z' and ord(c) % 2 != 0)\n        return [count]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples:\n    >>> is_sorted([5])\n    True\n    >>> is_sorted([1, 2, 3, 4, 5])\n    True\n    >>> is_sorted([1, 3, 2, 4, 5])\n    False\n    >>> is_sorted([1, 2, 3, 4, 5, 6])\n    True\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    False\n    >>> is_sorted([1, 2, 2, 3, 3, 4])\n    True\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    False\n    \"\"\"\n    # Check if the list is sorted\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    # Check for duplicates\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 2:\n                return False\n        else:\n            count[num] = 1\n    \n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start >= end:\n        return \"NO\"\n    elif is_prime(end - start):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    Computes the product of signs of numbers in the array multiplied by the sum of their magnitudes.\n    \n    Parameters:\n    arr (list): List of integers\n    \n    Returns:\n    int or None: Product of signs times sum of magnitudes or None if arr is empty\n    \"\"\"\n    if not arr:\n        return None\n    \n    sum_magnitudes = 0\n    product_signs = 1\n    \n    for num in arr:\n        sum_magnitudes += abs(num)\n        if num != 0:\n            product_signs *= num / abs(num)  # Determine the sign of num and multiply\n            \n    return sum_magnitudes * product_signs"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    N = len(grid)\n    min_path = None\n\n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n\n    def dfs(i, j, path, remaining, visited):\n        nonlocal min_path\n        if remaining == 0:\n            if min_path is None or path < min_path:\n                min_path = path[:]\n            return\n\n        for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj) and (ni, nj) not in visited:\n                visited.add((ni, nj))\n                dfs(ni, nj, path + [grid[ni][nj]], remaining - 1, visited)\n                visited.remove((ni, nj))\n\n    for i in range(N):\n        for j in range(N):\n            visited = set()\n            visited.add((i, j))\n            dfs(i, j, [grid[i][j]], k - 1, visited)\n\n    return min_path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"\n    Return a list of the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    elif n == 2:\n        return [0, 1, 1]\n    \n    result = [0, 1, 1]\n    for i in range(3, n + 1):\n        next_num = result[-1] + result[-2] + result[-3]\n        result.append(next_num)\n    \n    return result[:n + 1]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    result = 1\n    for i in str(n):\n        digit = int(i)\n        if digit % 2 != 0:\n            result *= digit\n    if result == 1:\n        return 0\n    return result"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    \"\"\"\n    Return True if there is a valid nested subsequence of brackets, otherwise False.\n    \"\"\"\n    nesting_level = 0\n    \n    for char in string:\n        if char == '[':\n            nesting_level += 1\n        elif char == ']':\n            if nesting_level <= 0:\n                return False  # Found a closing bracket without a corresponding opening bracket\n            nesting_level -= 1\n    \n    return nesting_level == 0"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    Return the sum of squared numbers in the given list,\n    rounding each element in the list to the upper int (Ceiling) first.\n    \"\"\"\n    total_sum = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        total_sum += rounded_num ** 2\n    return total_sum"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Returns True if the last character of the given string is an alphabetical character\n    and is not part of a word (separated by space), otherwise False.\n    \"\"\"\n    if not txt:\n        return False\n    \n    # Start from the end of the string and find the last alphabetical character\n    i = len(txt) - 1\n    while i >= 0 and not txt[i].isalpha():\n        i -= 1\n    \n    # If no alphabetical character found\n    if i < 0:\n        return False\n    \n    # Check if this character is not part of a word\n    if i > 0 and txt[i-1] == ' ':\n        return True\n    elif i == 0:\n        return True\n    \n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    max_negative = None\n    min_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if max_negative is None or num > max_negative:\n                max_negative = num\n        elif num > 0:\n            if min_positive is None or num < min_positive:\n                min_positive = num\n    \n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = a.replace(\",\", \".\")\n    if isinstance(b, str):\n        b = b.replace(\",\", \".\")\n        \n    a, b = float(a), float(b)\n\n    if a == b:\n        return None\n    elif a > b:\n        return str(a)\n    else:\n        return str(b)"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"\n    >>> is_equal_to_sum_even(4)\n    False\n    >>> is_equal_to_sum_even(8)\n    True\n    >>> is_equal_to_sum_even(10)\n    True\n    >>> is_equal_to_sum_even(7)\n    False\n    \"\"\"\n    if n < 8:\n        return False\n    return n % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    \n    def factorial(n):\n        \"\"\"Compute the factorial of n.\"\"\"\n        if n == 0:\n            return 1\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    \n    return result\n\n# Testing the Function\nassert special_factorial(1) == 1  # 1! = 1\nassert special_factorial(2) == 2  # 2! * 1! = 2 * 1 = 2\nassert special_factorial(3) == 12  # 3! * 2! * 1! = 6 * 2 * 1 = 12\nassert special_factorial(4) == 288  # 4! * 3! * 2! * 1! = 24 * 6 * 2 * 1 = 288\nassert special_factorial(5) == 34560  # 5! * 4! * 3! * 2! * 1! = 120 * 24 * 6 * 2 * 1 = 34560"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with a single -\n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace consecutive spaces with a single '-'\n    text = re.sub(r' {2,}', '-', text)\n    \n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Splitting the file name\n    parts = file_name.split('.')\n    \n    # If file name has not exactly one '.' or the first character of the file name is not alphabetic\n    if len(parts) != 2 or not parts[0][0].isalpha():\n        return 'No'\n    \n    # Count the number of digits in the left substring\n    digit_count = sum(c.isdigit() for c in parts[0])\n    \n    # Conditions for not valid file name\n    if digit_count > 3 or parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all conditions are met\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if (i % 3 == 2):  # index is a multiple of 3\n            total_sum += lst[i] ** 2\n        elif (i % 4 == 3) and (i % 3 != 2):  # index is a multiple of 4 but not of 3\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    Return words from the sentence whose lengths are prime numbers.\n\n    Example:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"\n    Given two fractions x and n in the format \"numerator/denominator\",\n    check if x * n evaluates to a whole number.\n\n    >>> simplify(\"1/5\", \"5/1\")\n    True\n    >>> simplify(\"1/6\", \"2/1\")\n    False\n    >>> simplify(\"7/10\", \"10/2\")\n    False\n    \"\"\"\n\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    def is_whole_number(number):\n        return number % 1 == 0\n\n    num1, denom1 = parse_fraction(x)\n    num2, denom2 = parse_fraction(n)\n\n    product_numerator = num1 * num2\n    product_denominator = denom1 * denom2\n\n    product = product_numerator / product_denominator\n\n    return is_whole_number(product)"}
{"task_id": "HumanEval/145", "completion": "def sum_of_digits(n):\n    \"\"\"\n    Return the sum of digits of an integer.\n    Takes into account negative numbers.\n    \"\"\"\n    return sum(int(digit) for digit in str(abs(n)))\n\ndef order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order\n    according to the sum of their digits.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum_of_digits(x), x))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"\n    Returns the number of elements in the array that are greater than 10 and have both\n    first and last digits of a number odd (1, 3, 5, 7, 9).\n    \"\"\"\n    def is_odd_digit(digit):\n        return int(digit) % 2 != 0\n    \n    def first_digit(n):\n        return str(abs(n))[0]\n    \n    def last_digit(n):\n        return str(abs(n))[-1]\n    \n    count = 0\n    for num in nums:\n        if abs(num) > 10:  # Check if the absolute value of num is greater than 10\n            first = first_digit(num)\n            last = last_digit(num)\n            if is_odd_digit(first) and is_odd_digit(last):\n                count += 1\n    \n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    Returns the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \n    Example:\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Generate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Count the number of valid triples\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    start_index = min(index1, index2)\n    end_index = max(index1, index2)\n    \n    result = planets[start_index+1:end_index]\n    return tuple(result)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"\n    Given a list of strings, filters out strings with odd lengths,\n    then sorts the remaining strings primarily by length and secondarily alphabetically.\n\n    Args:\n    - lst (list): A list of strings\n    \n    Returns:\n    - list: Sorted list of strings by length and alphabetically\n    \"\"\"\n    # Filter strings with odd lengths\n    filtered = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort by length first, then alphabetically\n    sorted_list = sorted(filtered, key=lambda x: (len(x), x))\n    \n    return sorted_list"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    \"\"\"\n    Return the value of x if n is a prime number, otherwise return the value of y.\n    >>> x_or_y(7, 34, 12)\n    34\n    >>> x_or_y(15, 8, 5)\n    5\n    \"\"\"\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    If the input list is empty, return 0.\n    '''\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum_of_squares += num * num\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    Return an array of the same length denoting how far off each guess was from the actual score.\n\n    Args:\n    game (list): List of integers representing actual scores.\n    guess (list): List of integers representing guessed scores.\n\n    Returns:\n    list: List of integers where each element represents the absolute difference between the guess and the actual score.\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = \"\"\n    for ext in extensions:\n        cap_count = sum(1 for c in ext if c.isupper())\n        sm_count = sum(1 for c in ext if c.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if any rotation of string b is a substring of string a.\n    \"\"\"\n    if len(b) > len(a):\n        return False\n    \n    # Generate all rotations of b\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # Check if any rotation is a substring of a\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n    \"\"\"\n    num = abs(num)  # handle negative numbers\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_numeral_string = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_numeral_string += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_numeral_string"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Testing the function\nassert right_angle_triangle(3, 4, 5) == True\nassert right_angle_triangle(1, 2, 3) == False\nassert right_angle_triangle(5, 12, 13) == True\nassert right_angle_triangle(6, 8, 10) == True\nassert right_angle_triangle(7, 24, 25) == True\nassert right_angle_triangle(7, 7, 7) == False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"\n    Return the word with the maximum number of unique characters.\n    If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.\n    \n    >>> find_max([\"name\", \"of\", \"string\"])\n    'string'\n    >>> find_max([\"name\", \"enam\", \"game\"])\n    'enam'\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n    'aaaaaaa'\n    \"\"\"\n    max_unique_count = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = set(word)\n        num_unique = len(unique_chars)\n        \n        if num_unique > max_unique_count:\n            max_unique_count = num_unique\n            max_word = word\n        elif num_unique == max_unique_count:\n            if word < max_word:  # lexicographical comparison\n                max_word = word\n    \n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + need\n    if remaining >= need:\n        carrots_eaten = need\n    else:\n        carrots_eaten = remaining\n    carrots_left = remaining - carrots_eaten\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists `operator` and `operand`. The `operator` list contains basic algebra operations,\n    and the `operand` list contains integers. This function evaluates the algebraic expression\n    represented by these lists and returns the result.\n    \"\"\"\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Number of operators should be one less than number of operands\")\n\n    result = operand[0]\n    for i in range(len(operator)):\n        op = operator[i]\n        num = operand[i + 1]\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '/':\n            result /= num\n        elif op == '**':\n            result **= num\n        else:\n            raise ValueError(f\"Unknown operator '{op}'\")\n    \n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = []\n    has_letter = False\n    \n    for char in s:\n        if char.isalpha():\n            result.append(char.swapcase())\n            has_letter = True\n        else:\n            result.append(char)\n    \n    if not has_letter:\n        return s[::-1]\n    else:\n        return ''.join(result)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        md5_hash = hashlib.md5(text.encode()).hexdigest()\n        return md5_hash"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    >>> generate_integers(2, 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n    >>> generate_integers(10, 14)\n    []\n    \"\"\"\n    min_val, max_val = min(a, b), max(a, b)\n    return [digit for digit in range(min_val, max_val + 1) if digit in [2, 4, 6, 8]]\n\n# Testing the function\nassert generate_integers(2, 8) == [2, 4, 6, 8]\nassert generate_integers(8, 2) == [2, 4, 6, 8]\nassert generate_integers(10, 14) == []\nassert generate_integers(3, 3) == []\nassert generate_integers(2, 2) == [2]\nassert generate_integers(1, 9) == [2, 4, 6, 8]"}
