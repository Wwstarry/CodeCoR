{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those groups into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    balance = 0\n    current_group = []\n\n    for char in paren_string:\n        if char == ' ':\n            continue\n        current_group.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance == 0 and current_group:\n            result.append(''.join(current_group))\n            current_group = []\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, return the decimal part.\n    \"\"\"\n    _, decimal_part = str(number).split('.')\n    return float('0.' + decimal_part)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations):\n    \"\"\"\n    Determine if the balance of a bank account falls below zero at any point.\n\n    Args:\n    - operations (List[int]): List of deposit and withdrawal operations on the account.\n\n    Returns:\n    - bool: True if balance falls below zero; False otherwise.\n\n    Examples:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0\n    \n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n    \n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for num in numbers[:-1]:\n        result.append(num)\n        result.append(delimiter)\n    if numbers:\n        result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split()\n    max_depths = []\n    for group in paren_groups:\n        max_depth = 0\n        count = 0\n        for paren in group:\n            if paren == \"(\":\n                count += 1\n                max_depth = max(max_depth, count)\n            elif paren == \")\":\n                count -= 1\n        max_depths.append(max_depth)\n    return max_depths"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring\n    \n    Examples:\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in the list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    \n    total_sum = 0\n    total_product = 1\n    \n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Find the shortest palindrome that begins with a supplied string.\n\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Function to check if a substring is palindrome\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # Append the reverse of the prefix before the palindromic suffix\n            return string + string[:i][::-1]\n\n    # If no palindromic suffix found (shouldn't happen as per problem statement)\n    return string"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for char1, char2 in zip(a, b):\n        if char1 != char2:\n            result.append('1')\n        else:\n            result.append('0')\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    \n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # Initialize an empty list to collect numbers as strings\n    numbers = []\n    \n    # Iterate from 0 to n (inclusive)\n    for i in range(n + 1):\n        numbers.append(str(i))  # Convert each number to string and add to list\n    \n    # Join the list into a single string with spaces in between\n    return ' '.join(numbers)"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of.\n    \n    Examples:\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to ignore case differences\n    lower_string = string.lower()\n    # Use a set to store unique characters\n    distinct_chars = set(lower_string)\n    # Return the number of unique characters\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            beats.append(4)\n            i += 1\n        elif music_string[i:i+2] == 'o|':\n            beats.append(2)\n            i += 2\n        elif music_string[i:i+2] == '.|':\n            beats.append(1)\n            i += 2\n        else:\n            # Handle unexpected characters gracefully\n            i += 1\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string.\n    Count overlapping cases.\n    \n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numberals from 'zero' to 'nine' in ascending order.\n\n    >>> sort_numbers('three one five')\n    'one three five'\n    >>> sort_numbers('zero five two four')\n    'zero two four five'\n    \"\"\"\n\n    # Define a mapping from words to their corresponding numeric values\n    word_to_num = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3,\n        'four': 4, 'five': 5, 'six': 6, 'seven': 7,\n        'eight': 8, 'nine': 9\n    }\n\n    # Split input string into list of words, map each word to its numeric value\n    words = numbers.split()\n    num_values = [word_to_num[word] for word in words]\n\n    # Sort words based on their numeric values\n    sorted_words = [word for _, word in sorted(zip(num_values, words))]\n\n    # Join sorted words into a string and return\n    return ' '.join(sorted_words)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Find min and max values in the list\n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    # Check if min_value equals max_value (list has only one element)\n    if min_value == max_value:\n        return numbers  # Return the list unchanged\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    # Apply linear transformation\n    rescaled_numbers = [(x - min_value) / range_value for x in numbers]\n    \n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values):\n    \"\"\"\n    Filter given list of any python values only for integers\n    \"\"\"\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string\n    >>> strlen('abc')\n    3\n    >>> strlen('Hello')\n    5\n    \"\"\"\n    length = 0\n    for char in string:\n        length += 1\n    return length"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    >>> largest_divisor(15)\n    5\n    >>> largest_divisor(64)\n    32\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers):\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\"\n    Return a new string where each lowercase letter is converted to uppercase\n    and each uppercase letter is converted to lowercase.\n\n    >>> flip_case('Hello')\n    'hELLO'\n    >>> flip_case('cOmpuTEr')\n    'CoMPUteR'\n    \"\"\"\n    flipped_string = ''\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char  # If it's not a letter, keep it unchanged\n    return flipped_string"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into a single string.\n    \n    Examples:\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = ''\n    for s in strings:\n        result += s\n    return result"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    >>> filter_by_prefix(['hello', 'world', 'python'], 'py')\n    ['python']\n    >>> filter_by_prefix(['apple', 'banana', 'cherry'], 'mango')\n    []\n    \"\"\"\n    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive_numbers = []\n    for number in l:\n        if number > 0:\n            positive_numbers.append(number)\n    return positive_numbers"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"\n    Return true if a given number is prime, and false otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True  # 2 is a prime number\n    if n % 2 == 0:\n        return False  # Other even numbers are not prime (except 2)\n    # Check divisibility from 3 up to the square root of n\n    limit = int(n**0.5) + 1\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs, x):\n    # Define your polynomial function here\n    # This is a placeholder for your actual polynomial function\n    pass\n\ndef find_zero(xs: list):\n    a, b = -1, 1\n    while poly(xs, a) * poly(xs, b) > 0:\n        a -= 1\n        b += 1\n    while b - a > 0.00001:\n        mid = (a + b) / 2\n        if poly(xs, a) * poly(xs, mid) < 0:\n            b = mid\n        else:\n            a = mid\n    return a"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    indices = range(0, len(l), 3)  # indices divisible by 3\n    values = [l[i] for i in indices]  # corresponding values\n    sorted_values = sorted(values)  # sort these values\n\n    for idx, i in zip(indices, sorted_values):\n        l[idx] = i  # replace the originals with sorted values\n\n    return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n# Testing the Function\nassert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\nassert unique([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\nassert unique([10, 9, 8, 7, 6, 5]) == [5, 6, 7, 8, 9, 10]\nassert unique([1, 1, 1, 1, 1]) == [1]\nassert unique([]) == []\nassert unique([-1, -2, -3, -1, -2, -3]) == [-3, -2, -1]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty\")\n    \n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    \"\"\"\n    # Create a new list to store the modified result\n    l_prime = []\n    \n    # Traverse the original list\n    for i in range(len(l)):\n        # Odd indices: directly copy from original list\n        if i % 2 == 1:  # i is odd\n            l_prime.append(l[i])\n        else:  # i is even\n            # Get values from even indices, sort them, and append to the result list\n            even_values = [l[j] for j in range(len(l)) if j % 2 == 0]\n            even_values_sorted = sorted(even_values)\n            l_prime.append(even_values_sorted[i // 2])  # i // 2 gives the index in sorted even_values\n    \n    return l_prime"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # Split string into groups, each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Cycle elements in each group, unless group has fewer than 3 elements.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string into groups, each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group, unless group has fewer than 3 elements.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n):\n    fib1, fib2 = 0, 1\n    prime_fib_count = 0\n    while True:\n        fib = fib1 + fib2\n        fib1, fib2 = fib2, fib\n        if is_prime(fib):\n            prime_fib_count += 1\n            if prime_fib_count == n:\n                return fib\n\n### Testing the Function:\nassert prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(4) == 13\nassert prime_fib(5) == 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue  # Skip the same element to avoid duplicate triples\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"\n    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    result = []\n    for x in l:\n        result.append(x + 1)\n    return result"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in l:\n        if -i in l and i != -i:  # check if the negative counterpart exists in the list\n            return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"\n    Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Supports bases from 2 to 16.\n\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    >>> change_base(15, 16)\n    'F'\n    >>> change_base(255, 16)\n    'FF'\n    \"\"\"\n\n    if x == 0:\n        return '0'\n\n    result = ''\n    while x > 0:\n        remainder = x % base\n        if remainder < 10:\n            result = str(remainder) + result\n        else:\n            result = chr(remainder - 10 + ord('A')) + result\n        x //= base\n    \n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(base, height):\n    return 0.5 * base * height"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    \"\"\"\n    Compute the n-th element of the Fib4 sequence.\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    \n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib4_list = [0] * (n + 1)\n    fib4_list[0] = 0\n    fib4_list[1] = 0\n    fib4_list[2] = 2\n    fib4_list[3] = 0\n    \n    for i in range(4, n + 1):\n        fib4_list[i] = fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4]\n    \n    return fib4_list[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"\n    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 1:\n        # Odd number of elements\n        return sorted_list[n // 2]\n    else:\n        # Even number of elements\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2"}
{"task_id": "HumanEval/48", "completion": "import re\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome, ignoring spaces, punctuation, and case sensitivity.\n    \"\"\"\n    text = re.sub(r'[^a-zA-Z0-9]', '', text.lower())  # Remove non-alphanumeric characters and convert to lowercase\n    return text == text[::-1]  # Check if the cleaned string is equal to its reverse"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    encoded_chars = []\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            encoded_chars.append(chr((ord(ch) - ord('a') + 5) % 26 + ord('a')))\n        elif 'A' <= ch <= 'Z':\n            encoded_chars.append(chr((ord(ch) - ord('A') + 5) % 26 + ord('A')))\n        else:\n            encoded_chars.append(ch)\n    return ''.join(encoded_chars)"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    >>> remove_vowels('hello')\n    'hll'\n    >>> remove_vowels('Python')\n    'Pythn'\n    >>> remove_vowels('AEIOUaeiou')\n    ''\n    >>> remove_vowels('This is a test sentence.')\n    'Ths s  tst sntnc.'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    filtered_text = ''.join([char for char in text if char not in vowels])\n    return filtered_text"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"\n    Return True if all numbers in the list l are below threshold t.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"\n    Add two numbers x and y.\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    Return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"\n    Return sorted unique common elements for two lists.\n    \"\"\"\n    common_elements = set()\n    for num in l1:\n        if num in l2:\n            common_elements.add(num)\n    return sorted(common_elements)"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n):\n    \"\"\"\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n <= 0:\n        return 0\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    Calculates the derivative of a polynomial represented by coefficients in xs.\n    Returns the derivative coefficients.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    \"\"\"\n    Return the n-th element of the FibFib number sequence.\n\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize array to store results and base cases\n    fibfib_nums = [0] * (n + 1)\n    fibfib_nums[0] = 0\n    fibfib_nums[1] = 0\n    fibfib_nums[2] = 1\n    \n    # Compute fibfib(n) using the defined recurrence relation\n    for i in range(3, n + 1):\n        fibfib_nums[i] = (fibfib_nums[i - 1] +\n                          fibfib_nums[i - 2] +\n                          fibfib_nums[i - 3])\n    \n    return fibfib_nums[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"\n    Returns the number of vowels in the string s.\n    \n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\n    'y' is also considered a vowel, but only if it is at the end of the word.\n\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n\n    str_x = str(x)\n    if shift == 0 or x < 0:\n        return str_x\n\n    num_digits = len(str_x)\n    effective_shift = shift % num_digits\n\n    if effective_shift == 0:\n        return str_x\n\n    shifted_str = str_x[-effective_shift:] + str_x[:-effective_shift]\n    return shifted_str"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Extract the number of apples and oranges from the string\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found, return the node that has the smallest index.\n    \n    The plucked node should be returned in a list, [smallest_value, its_index].\n    If there are no even values or the given array is empty, return [].\n    \"\"\"\n    smallest_value = float('inf')\n    index_of_smallest = -1\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:  # Check if the element is even\n            if arr[i] < smallest_value or (arr[i] == smallest_value and i < index_of_smallest):\n                smallest_value = arr[i]\n                index_of_smallest = i\n    \n    if index_of_smallest == -1:\n        return []  # No even values found\n    \n    return [smallest_value, index_of_smallest]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    \"\"\"\n    Return the greatest integer that is greater than zero, and has a frequency greater than or equal to \n    the value of the integer itself. If no such value exists, return -1.\n    \"\"\"\n    freq = {}\n    \n    # Count frequencies of each integer in lst\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    result = -1\n    # Find the greatest integer that meets the condition\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            if result == -1 or num > result:\n                result = num\n    \n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_lst = sorted(lst)  # Sort the list in ascending order\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # Take the smallest remaining element\n        if sorted_lst:\n            result.append(sorted_lst.pop())  # Take the largest remaining element\n    return result"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Return the area rounded to 2 decimal places\n    return round(area, 2)\n\n# Testing the function\nassert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1, 2, 10) == -1\nassert triangle_area(7, 10, 5) == 16.25\nassert triangle_area(6, 8, 10) == 24.00\nassert triangle_area(1, 1, 1) == 0.43"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    \"\"\"\n    Returns True if the object q will fly, and False otherwise.\n    \n    An object will fly if:\n    1. It is balanced (palindromic list).\n    2. The sum of its elements is less than or equal to the maximum possible weight w.\n    \n    Examples:\n    >>> will_it_fly([1, 2], 5)\n    False\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    >>> will_it_fly([3, 2, 3], 9)\n    True\n    >>> will_it_fly([3], 5)\n    True\n    \"\"\"\n    # Check if q is palindromic\n    if q != q[::-1]:\n        return False\n    \n    # Check if sum of q is less than or equal to w\n    if sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(list1, list2):\n    return [item for item in list1 if item in list2]"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"\n    Returns True if the given number is the multiplication of 3 prime numbers less than 100, False otherwise.\n    >>> is_multiply_prime(30)\n    True\n    \"\"\"\n    # Hardcoded list of prime numbers less than 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Check all combinations of three primes\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    current = n\n    while current <= x:\n        if current == x:\n            return True\n        current *= n\n    return False\n\n# Testing the Function\nassert is_simple_power(1, 4) == True\nassert is_simple_power(2, 2) == True\nassert is_simple_power(8, 2) == True\nassert is_simple_power(3, 2) == False\nassert is_simple_power(3, 1) == False\nassert is_simple_power(5, 3) == False\nassert is_simple_power(27, 3) == True\nassert is_simple_power(16, 4) == True\nassert is_simple_power(0, 2) == False\nassert is_simple_power(1, 1) == True"}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    \"\"\"\n    Returns True if the integer a is a cube of some integer number, otherwise False.\n    \"\"\"\n    # Compute the cube root of absolute value of a\n    root = round(math.pow(abs(a), 1/3))\n    \n    # Check if cube of root is equal to a or -a\n    return root**3 == a or (-root)**3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"\n    Count the number of prime hexadecimal digits in the given hexadecimal number string.\n    \n    Prime hexadecimal digits are: 2, 3, 5, 7, B (= 11 in decimal), D (= 13 in decimal).\n    \n    Args:\n    - num (str): Input hexadecimal number as a string.\n    \n    Returns:\n    - int: Number of prime hexadecimal digits in the input string.\n    \n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"db0db\"\n    \n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n    binary = binary[::-1]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"\n    Check if the string s is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    for i in range(0, len(s)-2, 3):\n        chunk = s[i:i+3]\n        if len(set(chunk)) != 3:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert a list of GPAs into corresponding letter grades based on the predefined grading scale.\n\n    Parameters:\n    grades (list of float): List of GPAs.\n\n    Returns:\n    list of str: List of letter grades corresponding to the input GPAs.\n    \"\"\"\n    letter_grades = []\n    \n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')  # GPA less than 0.0 should not happen according to the example\n\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"\n    Returns True if the length of the string is a prime number, False otherwise.\n    \n    Examples:\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    n = len(string)\n    \n    if n <= 1:\n        return False\n    \n    # Check for prime number\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    # Count of numbers starting with '1'\n    total_start_with_1 = 9 * (10**(n-1))\n    \n    # Count of numbers ending with '1'\n    total_end_with_1 = 10**(n-1)\n    \n    # Count of numbers starting and ending with '1' (overlap)\n    overlap = 1  # Only the number '1'\n    \n    # Total count of numbers that start or end with '1'\n    result = total_start_with_1 + total_end_with_1 - overlap\n    \n    return result"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))\n\n# Testing the function\nassert anti_shuffle('Hi') == 'Hi'\nassert anti_shuffle('hello') == 'ehllo'\nassert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'\nassert anti_shuffle('This is a test') == 'This is a estt'\nassert anti_shuffle('  ') == '  '\nassert anti_shuffle('A B C') == 'A B C'"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    Return a list of tuples [(row, column)] for each occurrence of integer x in lst.\n    Each tuple contains the coordinates of x in the form (row_index, column_index),\n    sorted by row_index in ascending order and column_index in descending order.\n    \"\"\"\n    coordinates = []\n    \n    # Iterate through each sublist (representing rows)\n    for i, row in enumerate(lst):\n        # Check if x is in the current row\n        if x in row:\n            # Get indices of all occurrences of x in the row\n            indices = [idx for idx, val in enumerate(row) if val == x]\n            # Append tuples (i, idx) for each occurrence\n            for idx in indices:\n                coordinates.append((i, idx))\n    \n    # Sort coordinates primarily by row index (ascending) and secondarily by column index (descending)\n    coordinates.sort(key=lambda tup: (tup[0], -tup[1]))\n    \n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \"\"\"\n    sorted_arr = array.copy()\n    if len(sorted_arr) > 0:\n        if (sorted_arr[0] + sorted_arr[-1]) % 2 == 1:\n            sorted_arr.sort()\n        else:\n            sorted_arr.sort(reverse=True)\n    return sorted_arr"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"\n    Encrypts the input string by shifting each letter in the alphabet down by 2 positions.\n    \n    >>> encrypt('hi')\n    'jk'\n    >>> encrypt('asdfghjkl')\n    'cuhjklmno'\n    >>> encrypt('gf')\n    'ih'\n    >>> encrypt('et')\n    'gv'\n    \"\"\"\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            result.append(new_char)\n        elif 'A' <= char <= 'Z':\n            new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            result.append(new_char)\n        else:\n            result.append(char)\n    return ''.join(result)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    Return the 2nd smallest element in the list.\n    Return None if there is no such element.\n    \"\"\"\n    if not lst or len(lst) < 2:\n        return None\n    \n    # Sort the list\n    sorted_lst = sorted(lst)\n    \n    # Remove duplicates\n    unique_sorted_lst = []\n    for num in sorted_lst:\n        if num not in unique_sorted_lst:\n            unique_sorted_lst.append(num)\n    \n    # Check if there are at least 2 unique elements\n    if len(unique_sorted_lst) < 2:\n        return None\n    \n    # Return the second smallest element\n    return unique_sorted_lst[1]"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Count the number of sentences that start with \"I\" in the input string S.\n    \n    Sentences are delimited by '.', '?' or '!' characters.\n    \n    Examples:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Regular expression to split sentences by '.', '?', or '!' with optional whitespace before them\n    sentences = re.split(r'\\s*[.!?](?=\\s|$)', S)\n    \n    count = 0\n    for sentence in sentences:\n        # Remove leading whitespace and check if the sentence starts with \"I\"\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y\n\n# Testing the function\nassert any_int(5, 2, 7) == True  # 5 + 2 = 7\nassert any_int(3, 2, 2) == False  # No combination equals another\nassert any_int(3, -2, 1) == True  # 3 + (-2) = 1\nassert any_int(3.6, -2.2, 2) == False  # Not all inputs are integers\nassert any_int(0, 0, 0) == True  # 0 + 0 = 0\nassert any_int(-3, 1, -2) == True  # -3 + 1 = -2\nassert any_int(1, 1, 2) == True  # 1 + 1 = 2\nassert any_int(2, 4, -2) == True  # 2 + (-2) = 4"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encode the message by swapping case of all letters and replacing vowels.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    def replace_vowel(char):\n        vowels = \"aeiouAEIOU\"\n        next_char = chr(ord(char) + 2)\n        if next_char in vowels:\n            return next_char\n        else:\n            return char\n    \n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            swapped_char = char.swapcase()  # Swap case of the letter\n            encoded_message += replace_vowel(swapped_char) if swapped_char in \"aeiouAEIOU\" else swapped_char\n        else:\n            encoded_message += char  # Keep non-alpha characters unchanged\n    \n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime in the list and return the sum of its digits.\"\"\"\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    if largest_prime == -1:\n        return 0\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    if not d:  # Check if dictionary is empty\n        return False\n    \n    has_lower = False\n    has_upper = False\n    \n    for key in d.keys():\n        if isinstance(key, str):  # Check if the key is a string\n            if key.islower():\n                has_lower = True\n            elif key.isupper():\n                has_upper = True\n            else:\n                return False  # Return False if key is neither all lowercase nor all uppercase\n        else:\n            return False  # Return False if any key is not a string\n    \n    # Return True if either all keys are lowercase or all keys are uppercase\n    return (has_lower and not has_upper) or (has_upper and not has_lower)"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"\n    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"\n    if n < 2:\n        return []\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"\n    Return the product of the unit digits of integers a and b.\n    \"\"\"\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    return unit_a * unit_b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    >>> count_upper('aBCdEf')\n    1\n    >>> count_upper('abcdefg')\n    0\n    >>> count_upper('dBBE')\n    0\n    >>> count_upper('AeiO')\n    2\n    >>> count_upper('')\n    0\n    \"\"\"\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "import math\n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return math.floor(num + 0.5)\n    else:\n        return math.ceil(num - 0.5)\n\n# Testing the Function\nassert closest_integer(\"10\") == 10\nassert closest_integer(\"15.3\") == 15\nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15\nassert closest_integer(\"0.5\") == 1\nassert closest_integer(\"-0.5\") == -1\nassert closest_integer(\"0.4999999\") == 0\nassert closest_integer(\"-0.4999999\") == 0\nassert closest_integer(\"100.5\") == 101\nassert closest_integer(\"-100.5\") == -101"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    result = []\n    current_stones = n\n    \n    for i in range(n):\n        result.append(current_stones)\n        \n        if current_stones % 2 == 1:  # current_stones is odd\n            current_stones += 2\n        else:  # current_stones is even\n            current_stones += 1\n    \n    return result"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    Split the input string into individual words based on spaces or commas.\n    Returns a list of words.\n    \"\"\"\n    # Replace commas with spaces and split into words\n    return s.replace(',', ' ').split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"\n    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    elif (y - 1) >= x:\n        return y - 1\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    avg = round(total_sum / count)\n    \n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x, return a sorted list of all\n    elements that haven't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    result = []\n    for num in x:\n        str_num = str(num)\n        has_even_digit = False\n        for digit in str_num:\n            if digit in '02468':\n                has_even_digit = True\n                break\n        if not has_even_digit:  # Check if all digits are odd\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    word_dict = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    arr = sorted([i for i in arr if 1 <= i <= 9], reverse=True)\n    return [word_dict[i] for i in arr]"}
{"task_id": "HumanEval/106", "completion": "def factorial(n):\n    \"\"\"\n    Return the factorial of n.\n    \"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\ndef f(n):\n    \"\"\"\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            # Calculate sum of numbers from 1 to i\n            sum_i = i * (i + 1) // 2\n            result.append(sum_i)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    for num in range(1, n+1):\n        if str(num) == str(num)[::-1]:  # Check if the number is a palindrome\n            if num % 2 == 0:  # Check if the number is even\n                even_count += 1\n            else:  # The number is odd\n                odd_count += 1\n    \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for number in arr:\n        if number < 0:\n            total = -int(str(number)[1:])\n        else:\n            total = 0\n        total += sum(int(digit) for digit in str(abs(number)))\n        if total > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True  # Empty or one element array is already sorted\n\n    for i in range(n):\n        # Check if array from index i to end followed by start to i-1 is sorted\n        rotated_arr = arr[i:] + arr[:i]\n        if all(rotated_arr[j] <= rotated_arr[j+1] for j in range(n-1)):\n            # If this rotation results in a sorted array\n            return True\n    \n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    Determine whether it is possible to exchange elements between lst1 and lst2\n    to make lst1 a list of only even numbers.\n\n    Args:\n    - lst1: a list of numbers\n    - lst2: a list of numbers\n\n    Returns:\n    - \"YES\" if it is possible to make lst1 all even, otherwise \"NO\"\n    \"\"\"\n\n    # Count odd numbers in lst1\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count odd numbers in lst2\n    odd_count_lst2 = sum(1 for num in lst2 if num % 2 != 0)\n    \n    # Check if we can exchange enough odd numbers from lst2 to lst1\n    if odd_count_lst1 <= odd_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    counts = {}\n    if test.strip() == '':  # Handle empty input\n        return counts\n    \n    letters = test.split()\n    \n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    max_count = max(counts.values())\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"\n    Given two strings s and c, delete all characters in s that are equal to any character in c,\n    then check if the result string is palindrome.\n    Return a tuple containing the result string and True/False for the palindrome check.\n\n    Examples:\n    >>> reverse_delete(\"abcde\", \"ae\")\n    ('bcd', False)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    ('acdef', False)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    ('cdedc', True)\n    \"\"\"\n\n    # Delete characters from s that are in c\n    result_string = \"\"\n    for char in s:\n        if char not in c:\n            result_string += char\n    \n    # Check if result_string is a palindrome\n    is_palindrome = (result_string == result_string[::-1])\n    \n    return (result_string, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for num in lst:\n        odd_digits = sum(c in '13579' for c in num)\n        result.append(\"The number of odd elements in the string '{}' of the input is {}.\".format(num, odd_digits))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    >>> minSubArraySum([1,2,-1])\n    -1\n    >>> minSubArraySum([-5,-2,-3,-4])\n    -14\n    \"\"\"\n    current_min = global_min = nums[0]\n    for i in range(1, len(nums)):\n        current_min = min(nums[i], current_min + nums[i])\n        global_min = min(global_min, current_min)\n    return global_min"}
{"task_id": "HumanEval/115", "completion": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    Return the number of times you need to lower the buckets to empty all wells.\n\n    Args:\n    - grid: A list of lists representing the rectangular grid of wells (each row is a well).\n    - capacity: An integer representing the capacity of each bucket.\n\n    Returns:\n    - An integer representing the total number of lowerings required.\n    \"\"\"\n    total_lowerings = 0\n    \n    # Iterate through each row in the grid\n    for row in grid:\n        # Iterate through each cell in the row\n        for cell in row:\n            # If the cell contains water (i.e., 1), calculate lowerings needed\n            if cell == 1:\n                total_lowerings += math.ceil(1 / capacity)\n    \n    return total_lowerings"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers based on the number of 1s in their binary representation.\n    If two numbers have the same number of 1s, sorts by their decimal value.\n\n    Args:\n    - arr: List of integers to be sorted.\n\n    Returns:\n    - Sorted list of integers.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), abs(x) if x < 0 else x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    vowels = 'aeiou'\n    selected_words = []\n    for word in words:\n        consonant_count = sum(1 for letter in word.lower() if letter not in vowels)\n        if consonant_count == n:\n            selected_words.append(word)\n    return selected_words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set(\"aeiouAEIOU\")\n    for i in range(len(word) - 2, 0, -1):  # Loop from len(word)-2 to 1\n        if word[i] in vowels:\n            left_char = word[i - 1]\n            right_char = word[i + 1]\n            if left_char not in vowels and right_char not in vowels:\n                return word[i]\n    return \"\"  # Return empty string if no valid vowel found"}
{"task_id": "HumanEval/119", "completion": "def match_parens(parentheses_list):\n    def is_balanced(parens):\n        stack = []\n        for char in parens:\n            if char == '(':\n                stack.append('(')\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n\n    results = []\n    for parens in parentheses_list:\n        if is_balanced(parens):\n            results.append('Yes')\n        else:\n            results.append('No')\n    return results"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    sorted_arr = sorted(arr, reverse=True)\n    max_k_elements = sorted_arr[:k]\n    max_k_elements.sort()\n    return max_k_elements"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Args:\n    lst (list of int): A non-empty list of integers.\n    \n    Returns:\n    int: Sum of odd elements at even positions.\n    \"\"\"\n    # Initialize sum to 0\n    sum_odd_even_positions = 0\n    \n    # Iterate through the list with index\n    for index, number in enumerate(lst):\n        # Check if index is even and number is odd\n        if index % 2 == 0 and number % 2 != 0:\n            sum_odd_even_positions += number\n    \n    return sum_odd_even_positions"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n    \"\"\"\n    sum_elements = 0\n    for i in range(k):\n        if -99 <= arr[i] <= 99:\n            sum_elements += arr[i]\n    return sum_elements"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_numbers = set()  # Using a set to collect unique odd numbers\n\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.add(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n\n    odd_numbers.add(1)  # Adding 1 explicitly, as it's always part of the sequence\n\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    \"\"\"\n    Validate a given date string in the format mm-dd-yyyy.\n    \n    >>> valid_date('03-11-2000')\n    True\n    >>> valid_date('15-01-2012')\n    False\n    >>> valid_date('04-0-2040')\n    False\n    >>> valid_date('06-04-2020')\n    True\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    # Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Check if the date matches the format mm-dd-yyyy\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    \n    # Parse month, day, and year\n    month, day, year = map(int, date.split('-'))\n    \n    # Validate month\n    if month < 1 or month > 12:\n        return False\n    \n    # Validate day based on month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        # Check for leap year for February\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return 1 <= day <= 29\n                else:\n                    return 1 <= day <= 28\n            else:\n                return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    \n    return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace,\n    if no whitespaces exist in the text you should split on commas ','\n    if no commas exist you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    \n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count lowercase letters at odd positions in the alphabet\n        count = 0\n        for char in txt:\n            if 'a' <= char <= 'z':\n                position = ord(char) - ord('a')\n                if position % 2 == 0:  # odd position in the alphabet\n                    count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    prev = None\n    \n    for num in lst:\n        if prev is not None and num < prev:\n            return False\n        prev = num\n    \n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    \"\"\" Check if a number n is a prime number. \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\" \n    Determine whether the length of intersection of two intervals is a prime number.\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Calculate intersection\n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    # Check if intervals intersect\n    if start > end:\n        return \"NO\"\n    \n    # Calculate length of intersection\n    length = end - start + 1\n    \n    # Check if length is prime\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sign_product = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        \n        sum_magnitudes += abs(num)\n    \n    return sign_product * sum_magnitudes"}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    pq = []\n    for i in range(n):\n        for j in range(n):\n            heapq.heappush(pq, (grid[i][j], [(i, j)], [grid[i][j]]))\n    \n    while pq:\n        _, path, values = heapq.heappop(pq)\n        if len(path) == k:\n            return values\n        \n        last_i, last_j = path[-1]\n        for di, dj in directions:\n            ni, nj = last_i + di, last_j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in path:\n                new_path = path + [(ni, nj)]\n                new_values = values + [grid[ni][nj]]\n                heapq.heappush(pq, (sum(new_values), new_path, new_values))\n    \n    return []"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"\n    Return the first n + 1 numbers of the Tribonacci sequence.\n    \n    Examples:\n    tri(0) => []\n    tri(1) => [0]\n    tri(2) => [0, 1]\n    tri(3) => [0, 1, 1]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    \n    result = [0] * (n + 1)\n    result[1] = 1\n    result[2] = 1\n    \n    for i in range(3, n + 1):\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3]\n    \n    return result[:n + 1]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"\n    str_n = str(n)\n    product = None  # Initialize product to None\n    for char in str_n:\n        digit = int(char)\n        if digit % 2 != 0:  # check if digit is odd\n            if product is None:\n                product = digit\n            else:\n                product *= digit\n    if product is None:  # if product remains None, means no odd digits were found\n        return 0\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    opening = '([{'\n    closing = ')]}'\n    matches = {')': '(', ']': '[', '}': '{'}\n    \n    for char in string:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack or stack[-1] != matches[char]:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    >>> sum_squares([1, 2, 3])\n    14\n    >>> sum_squares([1, 4, 9])\n    98\n    >>> sum_squares([1, 3, 5, 7])\n    84\n    >>> sum_squares([1.4, 4.2, 0])\n    29\n    >>> sum_squares([-2.4, 1, 1])\n    6\n    \"\"\"\n    return sum(math.ceil(x)**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    \n    # Find the last alphabetical character\n    for i in range(len(txt) - 1, -1, -1):\n        if txt[i].isalpha():\n            last_alpha_index = i\n            break\n    else:\n        return False  # No alphabetical character found\n    \n    # Check if it's not part of a word\n    if last_alpha_index == 0:\n        return True  # It's the only character or at the start of the string\n    elif txt[last_alpha_index - 1] == ' ':\n        return True  # It's preceded by a space\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    max_index = -1\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            max_index = i\n    \n    return max_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    a = None\n    b = None\n    \n    for num in lst:\n        if num < 0:  # negative integer\n            if a is None or num > a:\n                a = num\n        elif num > 0:  # positive integer\n            if b is None or num < b:\n                b = num\n    \n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = a.replace(\",\", \".\")\n    if isinstance(b, str):\n        b = b.replace(\",\", \".\")\n        \n    a, b = float(a), float(b)\n\n    if a == b:\n        return None\n    elif a > b:\n        return str(a)\n    else:\n        return str(b)"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"\n    >>> is_equal_to_sum_even(4)\n    False\n    >>> is_equal_to_sum_even(8)\n    True\n    >>> is_equal_to_sum_even(10)\n    True\n    >>> is_equal_to_sum_even(7)\n    False\n    \"\"\"\n    if n < 8:\n        return False\n    return n % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    \"\"\"\n    Calculate the special factorial of a number n as defined:\n    special_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    \n    Args:\n    n (int): The input integer for which special factorial needs to be computed.\n    \n    Returns:\n    int: The special factorial of n.\n    \n    Assumptions:\n    n > 0\n    \n    Examples:\n    >>> special_factorial(4)\n    288\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with a single hyphen.\n    \n    Examples:\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = re.sub(r' {2,}', '-', text.replace(' ', '_'))\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"\n    Return 'Yes' if the file's name is valid, and 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphabet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \"\"\"\n    digit_count = sum(1 for char in file_name if char.isdigit())\n    if digit_count > 3:\n        return 'No'\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    prefix, suffix = file_name.split('.')\n    \n    if not prefix or not prefix[0].isalpha():\n        return 'No'\n    \n    valid_suffixes = ['txt', 'exe', 'dll']\n    if suffix not in valid_suffixes:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        if i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    Function to return a string containing words from the input sentence\n    whose lengths are prime numbers, maintaining the original order.\n    \"\"\"\n    def is_prime(n):\n        \"\"\" Helper function to check if a number is prime. \"\"\"\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n\n    words = sentence.split()\n    result_words = [word for word in words if is_prime(len(word))]\n    \n    return ' '.join(result_words)"}
{"task_id": "HumanEval/144", "completion": "import math\n\ndef simplify(x, n):\n    \"\"\"\n    Simplify the product of two fractions x and n represented as strings.\n    Returns True if the result is a whole number, False otherwise.\n    \n    x, n: Strings representing fractions in the format \"numerator/denominator\"\n    \"\"\"\n    # Parse fractions x and n\n    num1, denom1 = map(int, x.split('/'))\n    num2, denom2 = map(int, n.split('/'))\n    \n    # Calculate the numerator and denominator of the product\n    numerator = num1 * num2\n    denominator = denom1 * denom2\n    \n    # Check if the result is a whole number\n    return denominator == 1"}
{"task_id": "HumanEval/145", "completion": "def sum_of_digits(n):\n    \"\"\"\n    Return the sum of digits of an integer.\n    Takes into account negative numbers.\n    \"\"\"\n    return sum(int(digit) for digit in str(abs(n)))\n\ndef order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order\n    according to the sum of their digits.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum_of_digits(x), x))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"\n    Return the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \n    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n    2\n    \"\"\"\n    def is_odd_digit(digit):\n        return digit.isdigit() and int(digit) % 2 != 0\n    \n    def first_digit_odd(num_str):\n        return is_odd_digit(num_str[0])\n    \n    def last_digit_odd(num_str):\n        return is_odd_digit(num_str[-1])\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))  # Convert to string and handle negative numbers\n            if len(num_str) > 1 and first_digit_odd(num_str) and last_digit_odd(num_str):\n                count += 1\n    \n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    Returns the number of valid triples (i, j, k) such that a[i] + a[j] + a[k] is divisible by 3,\n    where a[i] = i*i - i + 1 for i from 1 to n.\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count_mod = [0] * 3\n    \n    # Count remainders modulo 3\n    for num in a:\n        count_mod[num % 3] += 1\n    \n    # Calculate valid triples\n    count = 0\n    for i in range(3):\n        for j in range(i, 3):\n            for k in range(j, 3):\n                if (i + j + k) % 3 == 0:\n                    if i == j == k:\n                        count += count_mod[i] * (count_mod[i] - 1) * (count_mod[i] - 2) // 6\n                    elif i == j != k:\n                        count += count_mod[i] * (count_mod[i] - 1) // 2 * count_mod[k]\n                    elif i != j == k:\n                        count += count_mod[j] * (count_mod[j] - 1) // 2 * count_mod[i]\n                    else:\n                        count += count_mod[i] * count_mod[j] * count_mod[k]\n    \n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    start_index = min(index1, index2) + 1\n    end_index = max(index1, index2)\n    \n    if start_index >= end_index:  # No planets between or incorrect order\n        return ()\n    \n    result = tuple(planets[start_index:end_index])  # Get the sublist directly\n    \n    return result"}
{"task_id": "HumanEval/149", "completion": "def sorted_strings_filtered(lst):\n    \"\"\"\n    Returns a list of strings sorted by length and alphabetically,\n    after filtering out strings with odd lengths.\n    \"\"\"\n    # Filter strings with even lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort by length and then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0 and num >= 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    Determine how far off each guess was from the actual game score for each match.\n    \n    :param game: list of integers, representing actual scores of matches\n    :param guess: list of integers, representing guessed scores of matches\n    :return: list of integers, where each element represents the absolute difference between the guess and the score\n    \"\"\"\n    differences = []\n    for i in range(len(game)):\n        differences.append(abs(game[i] - guess[i]))\n    return differences"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = ''\n    max_strength = float('-inf') # Initializing with negative infinity to compare strengths\n    for extension in extensions:\n        upper_count = sum(1 for c in extension if c.isupper())\n        lower_count = sum(1 for c in extension if c.islower())\n        strength = upper_count - lower_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    Return True if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    doubled_a = a + a\n    \n    for i in range(len(a)):\n        substring = doubled_a[i:i+len(b)]\n        if is_rotation(substring, b):\n            return True\n    \n    return False\n\ndef is_rotation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return s2 in (s1 + s1)"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num) # take the absolute value to handle negative numbers\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(num): # convert number to string to iterate over digits\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = [\n        ('M', 1000),\n        ('CM', 900),\n        ('D', 500),\n        ('CD', 400),\n        ('C', 100),\n        ('XC', 90),\n        ('L', 50),\n        ('XL', 40),\n        ('X', 10),\n        ('IX', 9),\n        ('V', 5),\n        ('IV', 4),\n        ('I', 1)\n    ]\n\n    result = \"\"\n    for numeral, value in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()\n\n# Testing the function\nassert int_to_mini_roman(1) == 'i'\nassert int_to_mini_roman(4) == 'iv'\nassert int_to_mini_roman(9) == 'ix'\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(40) == 'xl'\nassert int_to_mini_roman(90) == 'xc'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'\nassert int_to_mini_roman(1000) == 'm'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is a right angle or \n    90 degrees.\n    '''\n    # Check triangle inequality\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    # Identify the hypotenuse\n    hypotenuse = max(a, b, c)\n    \n    # Apply Pythagorean theorem\n    if hypotenuse**2 == a**2 + b**2 or hypotenuse**2 == a**2 + c**2 or hypotenuse**2 == b**2 + c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_unique_count = 0\n\n    for word in words:\n        unique_chars = set(word)\n        current_unique_count = len(unique_chars)\n        \n        if current_unique_count > max_unique_count:\n            max_unique_count = current_unique_count\n            max_word = word\n        elif current_unique_count == max_unique_count and word < max_word:\n            max_word = word\n    \n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if number >= need:\n        return [number, remaining]\n    \n    if remaining >= need - number:\n        total_eaten = need\n        carrots_left = remaining - (need - number)\n    else:\n        total_eaten = number + remaining\n        carrots_left = 0\n    \n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Number of operators must be one less than number of operands.\")\n    \n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n        else:\n            raise ValueError('Unrecognized operator: {}'.format(operator[i]))\n    \n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = []\n    non_alpha = []\n    \n    for char in s:\n        if char.isalpha():\n            result.append(char.swapcase())\n        else:\n            non_alpha.append(char)\n    \n    # Combine modified alphabetic characters and reversed non-alphabetic characters\n    index_non_alpha = 0\n    for char in s:\n        if char.isalpha():\n            result.append(result.pop(0))  # Preserve order of modified alphabetic characters\n        else:\n            result.append(non_alpha.pop())  # Reverse order of non-alphabetic characters\n    \n    return ''.join(result)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if text == '':\n        return None\n    hash_object = hashlib.md5(text.encode())\n    return hash_object.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two integers a and b, return a list of even integers between a and b (inclusive).\n    If a > b, the function will swap them to ensure a <= b.\n\n    Examples:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    \n    even_digits = [digit for digit in range(a, b + 1) if digit % 2 == 0]\n    return even_digits"}
