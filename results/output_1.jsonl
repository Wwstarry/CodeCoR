{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, any two numbers are closer to each other than the given threshold.\n    \n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()  # Sort the list of numbers\n    \n    n = len(numbers)\n    for i in range(n - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Separate the groups of balanced parentheses in the input string and return a list of those groups.\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    temp_group = \"\"\n    count = 0\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n            temp_group += char\n        elif char == ')':\n            count -= 1\n            temp_group += char\n            if count == 0:\n                result.append(temp_group)\n                temp_group = \"\"\n    \n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, return the decimal part of the number.\n    \n    >>> truncate_number(3.5)\n    0.5\n    >>> truncate_number(0.12345)\n    0.12345\n    >>> truncate_number(7.0)\n    0.0\n    >>> truncate_number(10.75)\n    0.75\n    >>> truncate_number(123.456)\n    0.456\n    \"\"\"\n    return number % 1"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    Given a list of deposit and withdrawal operations on a bank account starting with zero balance,\n    detect if at any point the balance falls below zero.\n    \n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    current_balance = 0\n    for operation in operations:\n        current_balance += operation\n        if current_balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list cannot be empty.\")\n    \n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers, delimeter):\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers`.\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            depths.append(current_depth)\n        elif char == ')':\n            if current_depth == 0:\n                raise ValueError(\"Invalid parentheses structure\")\n            current_depth -= 1\n    \n    if current_depth != 0:\n        raise ValueError(\"Invalid parentheses structure\")\n    \n    return depths"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings to include only those that contain a specified substring.\n\n    Parameters:\n    strings (List[str]): List of strings to filter.\n    substring (str): Substring to search for in each string.\n\n    Returns:\n    List[str]: Filtered list of strings that contain the substring.\n    \"\"\"\n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "def sum_product(lst):\n    if not lst:\n        return 0, 1\n    \n    sum_result = sum(lst)\n    \n    product_result = 1\n    for num in lst:\n        product_result *= num\n    \n    return sum_result, product_result"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if string == '':\n        return ''\n    \n    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string + string[:-1][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Perform binary XOR on two binary strings a and b and return the result as a string.\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must have the same length\")\n    \n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    \n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    max_length = len(strings[0])\n    \n    for s in strings[1:]:\n        if len(s) > max_length:\n            longest_string = s\n            max_length = len(s)\n    \n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(3)\n    '0 1 2 3'\n    >>> string_sequence(0)\n    '0'\n    \"\"\"\n    sequence = ''\n    for i in range(n + 1):\n        sequence += str(i) + ' '\n    return sequence.strip()  # Remove extra space at the end"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to ignore case\n    normalized_string = string.lower()\n    \n    # Use a set to find distinct characters\n    distinct_characters = set(normalized_string)\n    \n    # Return the number of distinct characters\n    return len(distinct_characters)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    beats = [note_map[note] for note in notes]\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    if len(substring) == 0 or len(substring) > len(string):\n        return 0\n\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    word_to_num = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Count occurrences of each number word\n    count = {}\n    for word in words:\n        num = word_to_num[word]\n        if num in count:\n            count[num].append(word)\n        else:\n            count[num] = [word]\n    \n    # Sort the words based on their numeric values\n    sorted_words = []\n    for num in range(10):  # numbers are from 'zero' to 'nine'\n        if num in count:\n            sorted_words.extend(sorted(count[num]))\n    \n    # Join sorted words into a single string\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two), select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    numbers.sort()  # Sort the list to simplify finding the closest pair\n    closest_pair = (numbers[0], numbers[1])  # Initialize with the first two numbers\n    smallest_difference = abs(numbers[1] - numbers[0])\n\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < smallest_difference:\n            smallest_difference = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    if min_val == max_val:\n        return [0.0] * len(lst)\n    return [(x - min_val) / (max_val - min_val) for x in lst]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"\n    Return the length of given string\n    \"\"\"\n    length = 0\n    for char in string:\n        length += 1\n    return length"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest number that divides n evenly, smaller than n.\n    \n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if n <= 1:\n        return None\n    \n    for d in range(n-1, 0, -1):\n        if n % d == 0:\n            return d\n    \n    # If no divisor is found (though in normal use case there should always be one)\n    return None"}
{"task_id": "HumanEval/25", "completion": "def factorize(n):\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    \n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    \n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    unique = []\n    for number in numbers:\n        if number not in seen:\n            unique.append(number)\n            seen.add(number)\n    return unique"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\"\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_chars = []\n    for char in string:\n        if char.islower():\n            flipped_chars.append(char.upper())\n        elif char.isupper():\n            flipped_chars.append(char.lower())\n        else:\n            flipped_chars.append(char)\n    return ''.join(flipped_chars)"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    result = ''\n    for s in strings:\n        result += s\n    return result"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings, prefix):\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    filtered_list = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_list.append(s)\n    return filtered_list"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positives = [num for num in l if num > 0]\n    return positives"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"\n    Return true if a given number is prime, and false otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = int(n ** 0.5) + 1\n    for i in range(3, sqrt_n, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef find_zero(xs: list):\n    \"\"\"\n    Find a root (zero) of the polynomial defined by coefficients xs.\n    Returns only one zero point, even if there are multiple.\n    Assumes xs has an even number of coefficients and the largest non-zero coefficient as it guarantees a solution.\n\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Expected even number of coefficients\")\n\n    # Check if the largest coefficient is non-zero\n    if xs[-1] == 0:\n        return None\n\n    # Bisection method initialization\n    a, b = -10.0, 10.0  # Initial interval guess\n    tolerance = 1e-6   # Tolerance for root approximation\n    max_iterations = 1000\n\n    # Bisection method iteration\n    for _ in range(max_iterations):\n        fa = poly(xs, a)\n        fb = poly(xs, b)\n        if math.isclose(fa, 0, abs_tol=tolerance):\n            return a\n        if math.isclose(fb, 0, abs_tol=tolerance):\n            return b\n\n        c = (a + b) / 2.0\n        fc = poly(xs, c)\n\n        if math.isclose(fc, 0, abs_tol=tolerance):\n            return c\n\n        if fa * fc < 0:\n            b = c\n        else:\n            a = c\n\n    # Return the midpoint of the interval as an approximation\n    return (a + b) / 2.0\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    Assumes xs[0] is the constant term, xs[1] is the linear term, and so on.\n    \"\"\"\n    degree = len(xs) - 1\n    result = 0\n    for i, coeff in enumerate(xs):\n        result += coeff * math.pow(x, degree - i)\n    return result"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"\n    Sorts elements in the list `l` at indices that are divisible by three.\n\n    Examples:\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = list(l)  # Create a copy of l to modify and return\n    \n    # Iterate through indices divisible by 3\n    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    for idx in indices_divisible_by_three:\n        # Extract elements, sort, and replace in l_prime\n        segment = l[idx:idx+3]  # Get the segment of 3 elements\n        sorted_segment = sorted(segment)  # Sort the segment\n        l_prime[idx:idx+3] = sorted_segment  # Replace in l_prime\n    \n    return l_prime"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n# Testing the Function\nassert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\nassert unique([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\nassert unique([10, 9, 8, 7, 6, 5]) == [5, 6, 7, 8, 9, 10]\nassert unique([1, 1, 1, 1, 1]) == [1]\nassert unique([]) == []\nassert unique([-1, -2, -3, -1, -2, -3]) == [-3, -2, -1]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"\n    Return maximum element in the list.\n    If list is empty, return None.\n    \n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return None\n    \n    max_value = l[0]\n    for num in l:\n        if num > max_value:\n            max_value = num\n    return max_value"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    \n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_sorted = l[:]\n    even_values = sorted(l[::2])  # Sorted values of even indices\n    \n    even_index = 0\n    for i in range(0, len(l_sorted), 2):\n        l_sorted[i] = even_values[even_index]\n        even_index += 1\n    \n    return l_sorted"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]  # Split into groups of three characters\n    encoded_groups = []\n    \n    for group in groups:\n        if len(group) == 3:\n            encoded_group = group[1:] + group[0]  # Perform cyclic shift for groups of three\n        else:\n            encoded_group = group  # Leave shorter groups unchanged\n        encoded_groups.append(encoded_group)\n    \n    return \"\".join(encoded_groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(n):\n    \"\"\" Function to check if a number is prime. \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True  # 2 is prime\n    if n % 2 == 0:\n        return False  # other even numbers are not prime\n    for current in range(3, int(n ** 0.5) + 1, 2):\n        if n % current == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    \"\"\" Function to find the n-th Fibonacci number that is also prime. \"\"\"\n    if n <= 0:\n        return None  # handle invalid input gracefully\n    \n    fib_sequence = [1, 1]  # starting Fibonacci sequence\n    while len(fib_sequence) <= n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    \n    # Find the first Fibonacci number in the sequence that is prime\n    prime_fib_number = None\n    for num in fib_sequence:\n        if is_prime(num):\n            prime_fib_number = num\n            break\n    \n    return prime_fib_number"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue  # Skip the same element to avoid duplicate triples\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return [i+1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        target = -num\n        if target in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"\n    Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    \n    result_digits = []\n    while x > 0:\n        remainder = x % base\n        result_digits.append(str(remainder))\n        x //= base\n    \n    # Reverse the list to get the correct base representation\n    result_digits.reverse()\n    \n    return ''.join(result_digits)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"\n    Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    \"\"\"\n    Return the n-th element of the fib4 number sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Initialize dp array\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 2\n    dp[3] = 0\n    \n    # Fill dp array according to the recurrence relation\n    for i in range(4, n + 1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    \n    return dp[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"\n    Return median of elements in the list l.\n    \"\"\"\n    if not l:\n        raise ValueError(\"List must not be empty\")\n    \n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    if n % 2 == 1:\n        return sorted_list[n // 2]\n    else:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if not text:  # if text is an empty string\n        return True\n    \n    left, right = 0, len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\""}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    Vowels considered are 'a', 'e', 'i', 'o', 'u' in both lowercase and uppercase forms.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = []\n    for char in text:\n        if char not in vowels:\n            result.append(char)\n    return ''.join(result)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"\n    Add two numbers x and y\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two strings have exactly the same characters with the same frequencies.\n    \"\"\"\n    return Counter(s0) == Counter(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev, curr = 0, 1\n        for _ in range(2, n + 1):\n            prev, curr = curr, prev + curr\n        return curr"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    Return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            if balance <= 0:\n                return False\n            balance -= 1\n    return balance == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = True\n    decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    \n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"\n    Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert lists to sets to find common elements efficiently\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find common elements using set intersection\n    common_elements = sorted(set1.intersection(set2))\n    \n    return common_elements"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Start with the smallest prime factor\n    factor = 2\n    largest_factor = 0\n    \n    # Divide by factor until it's no longer divisible\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n            largest_factor = factor\n        else:\n            factor += 1\n    \n    # If n is still greater than 1, then n itself is prime\n    if n > 1:\n        largest_factor = n\n    \n    return largest_factor"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    Return the sum of all integers from 1 to n.\n    \n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    Return the derivative of a polynomial represented by coefficients in xs.\n    \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) < 2:\n        return []\n    \n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    \n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"\n    Compute the n-th element of the FibFib number sequence.\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) for n >= 3\n    \n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Memoization dictionary to store computed values\n    memo = {0: 0, 1: 0, 2: 1}\n    \n    # Recursive function with memoization\n    def fib(n):\n        if n in memo:\n            return memo[n]\n        else:\n            memo[n] = fib(n-1) + fib(n-2) + fib(n-3)\n            return memo[n]\n    \n    return fib(n)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"\n    Returns the number of vowels in the string s.\n    \n    Vowels are 'a', 'e', 'i', 'o', 'u' and 'y' (only if at the end).\n\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    count = 0\n    s = s.lower()  # Convert the string to lowercase to handle case insensitivity\n    for i in range(len(s)):\n        if s[i] in 'aeiou':\n            count += 1\n        elif s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    n = len(x_str)\n    \n    if shift <= n:\n        shifted = x_str[-shift:] + x_str[:-shift]\n    else:\n        shifted = x_str[::-1]\n    \n    return shifted"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"\n    Returns the sum of ASCII values of uppercase characters in the input string.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum_ascii = 0\n    for char in s:\n        if char.isupper():\n            sum_ascii += ord(char)\n    return sum_ascii"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    \"\"\"\n    Given a string describing the number of apples and oranges in a fruit basket,\n    and an integer representing the total number of fruits, return the number of mango fruits.\n\n    Examples:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Split the string to extract numbers\n    parts = s.split()\n    apples = int(parts[0]) if parts[0].isdigit() else 0\n    oranges = int(parts[3]) if parts[3].isdigit() else 0\n    \n    # Calculate mango fruits\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found, return the node that has the smallest index.\n\n    The plucked node should be returned in a list, [smallest_value, its_index].\n    If there are no even values or the given array is empty, return [].\n\n    Examples:\n        Input: [4, 2, 3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n        Input: [1, 2, 3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n        Input: []\n        Output: []\n\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest even value, and it appears twice; we choose the first one which has index 1.\n\n    Constraints:\n        * 1 <= len(arr) <= 10000\n        * 0 <= arr[i] <= 10000\n    \"\"\"\n    smallest_even = None\n    smallest_index = -1\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:  # Check if the element is even\n            if smallest_even is None or arr[i] < smallest_even:\n                smallest_even = arr[i]\n                smallest_index = i\n    \n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq_dict = {}\n    max_value = -1\n    \n    # Count frequencies of each number\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the maximum integer whose frequency is strictly greater than the integer\n    for key, value in freq_dict.items():\n        if value > key:\n            max_value = max(max_value, key)\n    \n    return max_value"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    \n    Args:\n    - lst: List of integers\n    \n    Returns:\n    - List: List sorted in the \"strange\" order\n    \n    Examples:\n    >>> strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # Sort the list\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = 0, len(sorted_lst) - 1\n    \n    while left <= right:\n        # Append smallest remaining element\n        result.append(sorted_lst[left])\n        left += 1\n        \n        if left <= right:\n            # Append largest remaining element\n            result.append(sorted_lst[right])\n            right -= 1\n    \n    return result"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle, calculate the area if valid.\n    If the sides do not form a valid triangle, return -1.\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0 or (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return -1\n    \n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    \"\"\"\n    Return True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    \n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    will_it_fly([3, 2, 3], 1) \u279e False\n    will_it_fly([3, 2, 3], 9) \u279e True\n    will_it_fly([3], 5) \u279e True\n    \"\"\"\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(list1, list2):\n    result = []\n    for item in list1:\n        if item.lower() in [x.lower() for x in list2]:\n            result.append(item)\n    return result"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"\n    Returns True if a is the product of exactly 3 prime numbers, False otherwise.\n    \"\"\"\n    if a < 2:\n        return False\n    \n    def generate_primes(limit):\n        sieve = [True] * (limit + 1)\n        sieve[0] = sieve[1] = False\n        for start in range(2, int(limit**0.5) + 1):\n            if sieve[start]:\n                for i in range(start*start, limit + 1, start):\n                    sieve[i] = False\n        return [num for num, is_prime in enumerate(sieve) if is_prime]\n    \n    # Generate primes up to a reasonable limit\n    primes = generate_primes(a)\n    \n    # Try all combinations of three distinct primes\n    from itertools import combinations\n    for comb in combinations(primes, 3):\n        if comb[0] * comb[1] * comb[2] == a:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    current = n\n    while current <= x:\n        if current == x:\n            return True\n        current *= n\n    return False\n\n# Testing the Function\nassert is_simple_power(1, 4) == True\nassert is_simple_power(2, 2) == True\nassert is_simple_power(8, 2) == True\nassert is_simple_power(3, 2) == False\nassert is_simple_power(3, 1) == False\nassert is_simple_power(5, 3) == False\nassert is_simple_power(27, 3) == True\nassert is_simple_power(16, 4) == True\nassert is_simple_power(0, 2) == False\nassert is_simple_power(1, 1) == True"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    \"\"\"\n    Returns True if the integer a is a cube of some integer number, otherwise False.\n    \"\"\"\n    # Handle edge case for 0\n    if a == 0:\n        return True\n    \n    # Calculate cube root and check\n    n = int(abs(a) ** (1/3))\n    \n    # Check if n^3 equals a\n    return n**3 == abs(a)"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"\n    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert a decimal number to binary format.\n    The function returns a string with 'db' at the beginning and end,\n    and binary digits ('0' or '1') in between.\n    \n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary_string = bin(decimal)[2:]  # Get binary string, removing '0b' prefix\n    return f\"db{binary_string}db\"\n\n# Testing the function\nassert decimal_to_binary(0) == \"db0db\"\nassert decimal_to_binary(1) == \"db1db\"\nassert decimal_to_binary(15) == \"db1111db\"\nassert decimal_to_binary(32) == \"db100000db\"\nassert decimal_to_binary(12345) == \"db11000000111001db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"\n    Check if the string s is 'happy'.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    >>> is_happy('a')\n    False\n    >>> is_happy('aa')\n    False\n    >>> is_happy('abcd')\n    True\n    >>> is_happy('aabb')\n    False\n    >>> is_happy('adb')\n    True\n    >>> is_happy('xyy')\n    False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert a list of GPAs to a list of corresponding letter grades.\n\n    >>> numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\n    ['A+', 'B', 'C-', 'C', 'A-']\n    >>> numerical_letter_grade([0.0, 4.0, 2.3, 1.0, 3.8])\n    ['E', 'A+', 'B-', 'D+', 'A']\n    >>> numerical_letter_grade([])\n    []\n    \"\"\"\n    letter_grades = []\n    \n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif 3.7 <= gpa < 4.0:\n            letter_grades.append('A')\n        elif 3.3 <= gpa < 3.7:\n            letter_grades.append('A-')\n        elif 3.0 <= gpa < 3.3:\n            letter_grades.append('B+')\n        elif 2.7 <= gpa < 3.0:\n            letter_grades.append('B')\n        elif 2.3 <= gpa < 2.7:\n            letter_grades.append('B-')\n        elif 2.0 <= gpa < 2.3:\n            letter_grades.append('C+')\n        elif 1.7 <= gpa < 2.0:\n            letter_grades.append('C')\n        elif 1.3 <= gpa < 1.7:\n            letter_grades.append('C-')\n        elif 1.0 <= gpa < 1.3:\n            letter_grades.append('D+')\n        elif 0.7 <= gpa < 1.0:\n            letter_grades.append('D')\n        elif 0.0 <= gpa < 0.7:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "import math\n\ndef prime_length(string):\n    \"\"\"\n    Returns True if the length of the input string is a prime number,\n    False otherwise.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n == 2:\n            return True  # 2 is the smallest prime number\n        if n % 2 == 0:\n            return False  # Other even numbers are not prime\n\n        sqrt_n = int(math.sqrt(n)) + 1\n        for i in range(3, sqrt_n, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the n-digit positive integers\n    that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # Only number 1 itself\n    else:\n        count_start_with_1 = 9 * (10 ** (n - 2))  # Numbers starting with 1\n        count_end_with_1 = 10 ** (n - 1)  # Numbers ending with 1\n        total_count = count_start_with_1 + count_end_with_1 - 10 ** (n - 2)\n        return total_count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Convert the number to a string to iterate over each digit\n    digits = str(N)\n    \n    # Calculate the sum of the digits\n    total_sum = sum(int(digit) for digit in digits)\n    \n    # Convert the sum to a binary string\n    binary_sum = bin(total_sum)[2:]\n    \n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:  # Checking if the index is odd (0-based index)\n            if lst[i] % 2 == 0:  # Checking if the element at this index is even\n                total_sum += lst[i]\n    return total_sum"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Returns a string where each word is sorted in ascending order of ASCII values.\n    Preserves the order of words and spaces in the original string.\n    \n    >>> anti_shuffle('Hi')\n    'Hi'\n    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n    'Hello !!!Wdlor'\n    >>> anti_shuffle('  Hello  World  ')\n    '  Hello  World  '\n    \"\"\"\n    words = s.split()  # Splitting by any whitespace and removing leading/trailing spaces\n    sorted_words = []\n    \n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        sorted_words.append(sorted_word)\n    \n    # Join sorted words with original spaces\n    result = ' '.join(sorted_words)\n    \n    return result"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list lst and an integer x, find occurrences of x in lst and return a sorted list of tuples representing coordinates of x.\n    \n    Each tuple is in the format (row_index, column_index), sorted by row in ascending order and by column in descending order.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    \n    # Sort by row in ascending order, and by column in descending order\n    result = sorted(result, key=lambda coord: (coord[0], -coord[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array[:]\n    \n    first_last_sum = array[0] + array[-1]\n    if first_last_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n# Testing the function\nassert sort_array([]) == [] # Empty array should return an empty array\nassert sort_array([5]) == [5] # Single element array should return the same array\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5] # Sum of 2 + 5 is 7 (odd), so sorted in ascending order\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0] # Sum of 2 + 6 is 8 (even), so sorted in descending order\nassert sort_array([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1] # Sum of 1 + 5 is 6 (even), so sorted in descending order\nassert sort_array([7, 0, 5, 3, 1, 2]) == [0, 1, 2, 3, 5, 7] # Sum of 7 + 2 is 9 (odd), so sorted in ascending order"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"\n    Encrypts the input string by shifting each letter down the alphabet by 2 positions.\n    \n    >>> encrypt('hi')\n    'jk'\n    >>> encrypt('asdfghjkl')\n    'cughjlmno'\n    >>> encrypt('gf')\n    'ih'\n    >>> encrypt('et')\n    'gv'\n    \"\"\"\n    result = []\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            shifted = chr(base + (ord(char) - base + 2) % 26)\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    >>> next_smallest([1, 2, 3, 4, 5])\n    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1, 1])\n    None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    unique_elements = sorted(set(lst))\n    \n    if len(unique_elements) < 2:\n        return None\n    \n    return unique_elements[1]\n\n# Testing the function\nassert next_smallest([1, 2, 3, 4, 5]) == 2  # Second smallest is 2\nassert next_smallest([5, 1, 4, 3, 2]) == 2  # Second smallest is 2\nassert next_smallest([]) == None  # Empty list, return None\nassert next_smallest([1, 1]) == None  # Only one unique element, return None\nassert next_smallest([3, 1, 4, 2, 2, 5]) == 2  # Second smallest is 2\nassert next_smallest([10, 20, 10, 30, 40]) == 20  # Second smallest is 20"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Count the number of boredoms (sentences starting with 'I') in the given string S.\n    \n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    if not S:\n        return 0\n    \n    # Define regular expression to split sentences\n    sentences = re.split(r'(?<=[.!?]) +', S)\n    \n    boredom_count = 0\n    for sentence in sentences:\n        # Remove leading and trailing whitespace\n        sentence = sentence.strip()\n        # Check if the sentence starts with \"I\"\n        if sentence.startswith(\"I\"):\n            boredom_count += 1\n    \n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    \"\"\"\n    Returns True if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns False in any other cases.\n    \n    Examples:\n    >>> any_int(5, 2, 7)\n    True\n    >>> any_int(3, 2, 2)\n    False\n    >>> any_int(3, -2, 1)\n    True\n    >>> any_int(3.6, -2.2, 2)\n    False\n    \"\"\"\n    if not all(isinstance(n, int) for n in (x, y, z)):\n        return False\n    \n    return (x + y == z) or (x + z == y) or (y + z == x)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encode the message by swapping case of letters and replacing vowels\n    with the letter 2 places ahead in the alphabet.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    >>> encode('aAbBcCdDeEfF')\n    'CcdDfFeEgG'\n    >>> encode('XYZxyz')\n    'xYzXYZ'\n    >>> encode('AEIOUaeiou')\n    'CEGQYcegqy'\n    \"\"\"\n    encoded_message = []\n    \n    for char in message:\n        if char.lower() in 'aeiou':\n            # Replace vowels with letter 2 places ahead in alphabet\n            new_char_code = ord(char) + 2\n            if char.isupper():\n                new_char = chr((new_char_code - 65) % 26 + 65)\n            else:\n                new_char = chr((new_char_code - 97) % 26 + 97)\n        else:\n            # Swap case of letters\n            new_char = char.swapcase()\n        \n        encoded_message.append(new_char)\n    \n    return ''.join(encoded_message)"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"\n    Return the sum of digits of the largest prime number in the list.\n\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    sum_digits = sum(int(digit) for digit in str(largest_prime))\n    return sum_digits"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n\n    all_lower = False\n    all_upper = False\n\n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.islower():\n                all_lower = True\n            elif key.isupper():\n                all_upper = True\n            else:\n                return False\n        else:\n            return False\n\n    return (all_lower and not all_upper) or (all_upper and not all_lower)"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"\n    Returns an array of the first n integers that are prime numbers and less than n.\n    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    \"\"\"\n    if n <= 1:\n        return []\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not primes\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    return [num for num, prime in enumerate(is_prime) if prime]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"\n    Returns the product of the unit digits of integers a and b.\n    \n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n    unit_a = abs(a) % 10  # Get unit digit of a\n    unit_b = abs(b) % 10  # Get unit digit of b\n    return unit_a * unit_b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    >>> count_upper('aBCdEf')\n    1\n    >>> count_upper('abcdefg')\n    0\n    >>> count_upper('dBBE')\n    0\n    >>> count_upper('AeiO')\n    2\n    >>> count_upper('')\n    0\n    \"\"\"\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    \"\"\"\n    Takes a string representing a number and returns the closest integer to it,\n    rounding away from zero if equidistant from two integers.\n\n    Examples:\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    >>> closest_integer(\"0.5\")\n    1\n    >>> closest_integer(\"-0.5\")\n    -1\n    \"\"\"\n\n    # Convert input value to float\n    num = float(value)\n\n    # Determine the closest integers\n    lower_int = int(num // 1)\n    upper_int = lower_int + 1\n\n    # Calculate distances from num to each integer\n    distance_lower = abs(num - lower_int)\n    distance_upper = abs(num - upper_int)\n\n    # Determine which integer is closer or if equidistant, round away from zero\n    if distance_lower < distance_upper:\n        closest_int = lower_int\n    elif distance_upper < distance_lower:\n        closest_int = upper_int\n    else:  # equidistant case\n        if num >= 0:\n            closest_int = upper_int\n        else:\n            closest_int = lower_int\n\n    return closest_int"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for _ in range(n - 1):\n        n += 2\n        pile.append(n)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    Split the input string into words based on commas or spaces and return a list of words.\n    \"\"\"\n    # Replace commas with spaces and split by spaces\n    words = s.replace(',', ' ').split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"\n    Returns the biggest even integer number in the range [x, y] inclusive.\n    If no even number exists in the range, return -1.\n    \"\"\"\n    largest_even = -1\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            if i > largest_even:\n                largest_even = i\n    return largest_even"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    count = m - n + 1\n    total_sum = (count * (n + m)) // 2\n    average = total_sum / count\n\n    rounded_average = round(average)\n    return bin(rounded_average)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result=[i for i in x if all(int(ch)%2 for ch in str(i))]\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    word_dict = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    arr = sorted([i for i in arr if 1 <= i <= 9], reverse=True)\n    return [word_dict[i] for i in arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(i):\n        if i == 0:\n            return 1\n        result = 1\n        for x in range(1, i+1):\n            result *= x\n        return result\n\n    def sum_from_1_to_i(i):\n        result = 0\n        for x in range(1, i+1):\n            result += x\n        return result\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_from_1_to_i(i))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n\n    def is_palindrome(num):\n        # Function to check if a number is palindrome\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):  # Corrected range to include n\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Count the number of elements in the array whose sum of digits is greater than 0.\n    For negative numbers, consider the sum of digits with a negative sign prefix.\n\n    Examples:\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def sum_of_digits(num):\n        num_str = str(abs(num))\n        if num >= 0:\n            return sum(int(digit) for digit in num_str)\n        else:\n            return -sum(int(digit) for digit in num_str)\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count\n\n# Testing the function\nprint(count_nums([]))            # Expected: 0\nprint(count_nums([-1, 11, -11])) # Expected: 1\nprint(count_nums([1, 1, 2]))     # Expected: 3"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True  # Empty or one element array is already sorted\n\n    for i in range(n):\n        # Check if array from index i to end followed by start to i-1 is sorted\n        rotated_arr = arr[i:] + arr[:i]\n        if all(rotated_arr[j] <= rotated_arr[j+1] for j in range(n-1)):\n            # If this rotation results in a sorted array\n            return True\n    \n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    Determine if it is possible to perform an exchange of elements between lst1 and lst2 to make lst1\n    a list of only even numbers.\n    \n    Args:\n    - lst1: list of numbers\n    - lst2: list of numbers\n    \n    Returns:\n    - \"YES\" if possible to make lst1 all even numbers, otherwise \"NO\"\n    \"\"\"\n    odd_count = sum(1 for x in lst1 if x % 2 != 0)  # Count odd numbers in lst1\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)  # Count even numbers in lst2\n    \n    if odd_count <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "from collections import Counter\n\ndef histogram(test):\n    words = test.split()\n    if not words:\n        return {}\n    \n    counter = Counter(words)\n    max_count = max(counter.values())\n    \n    result = {key: value for key, value in counter.items() if value == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"\n    >>> reverse_delete(\"abcde\", \"ae\")\n    ('bcd', False)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    ('acdef', False)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    ('cdedc', True)\n    \"\"\"\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)\n\n# Testing the Function:\nassert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)  # After removing 'a' and 'e', 'bcd' is not a palindrome\nassert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)  # After removing 'b', 'acdef' is not a palindrome\nassert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)  # After removing 'a' and 'b', 'cdedc' is a palindrome\nassert reverse_delete(\"racecar\", \"x\") == ('racecar', True)  # No characters removed, 'racecar' is a palindrome\nassert reverse_delete(\"hello\", \"l\") == ('heo', False)  # After removing 'l', 'heo' is not a palindrome"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for num in lst:\n        odd_digits = sum(c in '13579' for c in num)\n        result.append(\"The number of odd elements in the string '{}' of the input is {}.\".format(num, odd_digits))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    # Initialize variables\n    current_sum = 0\n    min_sum = float('inf')\n    \n    # Iterate through the array\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    \n    total_units_of_water = sum(sum(row) for row in grid)\n    number_of_bucket_lowerings = math.ceil(total_units_of_water / capacity)\n    \n    return number_of_bucket_lowerings"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    vowels = 'aeiou'\n    selected_words = []\n    for word in words:\n        consonant_count = sum(1 for letter in word.lower() if letter not in vowels)\n        if consonant_count == n:\n            selected_words.append(word)\n    return selected_words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if word[i-1] in consonants and word[i+1] in consonants:\n                return word[i]\n    \n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    s1, s2 = lst[0], lst[1]\n    concatenated = s1 + s2\n    balance = 0\n\n    for char in concatenated:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        if balance < 0:\n            return 'No'\n\n    if balance == 0:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n\n    return sorted(sorted(arr, reverse=True)[:k])"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):  # iterate through even indices only\n        if lst[i] % 2 != 0:  # check if the element at the even index is odd\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n    \"\"\"\n    sum_elements = 0\n    for i in range(k):\n        if -99 <= arr[i] <= 99:\n            sum_elements += arr[i]\n    return sum_elements"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:  # n is odd\n            result.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    result.append(1)  # Adding 1 at the end\n    return result"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    Return True if the date string is valid, otherwise False.\n    The date is valid if:\n    1. It's not empty.\n    2. It matches the format mm-dd-yyyy.\n    3. The month is between 1 and 12.\n    4. The day is valid for the given month and year.\n    \"\"\"\n    if not date:\n        return False\n    \n    # Check format\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n        return False\n    \n    # Split date into parts\n    month, day, year = map(int, date.split('-'))\n    \n    # Check month\n    if month < 1 or month > 12:\n        return False\n    \n    # Check day based on month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_day = 31\n    elif month in [4, 6, 9, 11]:\n        max_day = 30\n    else:  # month == 2\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            max_day = 29  # Leap year\n        else:\n            max_day = 28  # Non-leap year\n    \n    if day < 1 or day > max_day:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "import re\n\ndef split_words(txt):\n    # Using regular expression to split on whitespace or comma while handling spaces around commas\n    words = re.split(r'\\s+|,\\s*', txt)\n    \n    # Filter out empty strings\n    words = [word for word in words if word != '']\n    \n    if words:\n        return words\n    else:\n        # Calculate count of lowercase letters with odd alphabetical order\n        count_odd_alphabetical_order = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count_odd_alphabetical_order"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    \"\"\"\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"\n    Determine if the length of intersection of two intervals is a prime number.\n    \n    >>> intersection((1, 2), (2, 3))\n    'NO'\n    >>> intersection((-1, 1), (0, 4))\n    'NO'\n    >>> intersection((-3, -1), (-5, 5))\n    'YES'\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Calculate intersection\n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"  # No intersection\n    \n    length = end - start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        magnitude = abs(num)\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        \n        magnitude_sum += magnitude\n    \n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    pq = []\n    for i in range(n):\n        for j in range(n):\n            heapq.heappush(pq, (grid[i][j], [(i, j)], [grid[i][j]]))\n    \n    while pq:\n        _, path, values = heapq.heappop(pq)\n        if len(path) == k:\n            return values\n        \n        last_i, last_j = path[-1]\n        for di, dj in directions:\n            ni, nj = last_i + di, last_j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in path:\n                new_path = path + [(ni, nj)]\n                new_values = values + [grid[ni][nj]]\n                heapq.heappush(pq, (sum(new_values), new_path, new_values))\n    \n    return []"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    def compute_tri(k, memo):\n        if k in memo:\n            return memo[k]\n        if k == 1:\n            memo[k] = 1\n        elif k == 2:\n            memo[k] = 1\n        elif k == 3:\n            memo[k] = 2\n        else:\n            memo[k] = compute_tri(k - 1, memo) + compute_tri(k - 2, memo) + compute_tri(k - 3, memo)\n        return memo[k]\n    \n    memo = {1: 1, 2: 1, 3: 2}\n    for i in range(1, n + 1):\n        compute_tri(i, memo)\n    return [memo[i] for i in range(1, n + 1)]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    found_odd = False\n    for digit in str(n):\n        d = int(digit)\n        if d % 2 != 0:\n            product *= d\n            found_odd = True\n    return product if found_odd else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    \n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    Return the sum of squared numbers in the given list, after rounding each element to the upper integer.\n    >>> sum_squares([1,2,3])\n    14\n    >>> sum_squares([1,4,9])\n    98\n    \"\"\"\n    total = 0\n    for num in lst:\n        total += math.ceil(num) ** 2\n    return total"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Return True if the last character of the given string is an alphabetical character\n    and is not part of a word (not preceded by a space), False otherwise.\n    \"\"\"\n    txt = txt.rstrip()  # Remove trailing spaces\n    if txt == \"\":\n        return False  # Empty string edge case\n    \n    last_char = txt[-1]\n    if last_char.isalpha():\n        # Check if it's not part of a word\n        if len(txt) > 1 and txt[-2] == ' ':\n            return True\n        elif len(txt) == 1:\n            return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    if len(arr) < 2:\n        return -1\n    \n    best_index = -1\n    found_pair = False\n    \n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:  # Corrected condition to find where arr[i] is not greater than arr[i + 1]\n            best_index = i\n            found_pair = True\n    \n    if not found_pair:\n        return -1\n    else:\n        return best_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    \"\"\"\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([-2, -4, -1, -3, -5, -7])\n    (-1, None)\n    \"\"\"\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    def convert_to_number(x):\n        if isinstance(x, str):\n            try:\n                # Try converting to float first, handling comma or dot decimal separators\n                return float(x.replace(',', '.'))\n            except ValueError:\n                # If conversion fails (like for non-numeric strings), return as is\n                return x\n        else:\n            return x  # Return as is for integers and floats\n    \n    # Convert inputs to comparable forms\n    a_num = convert_to_number(a)\n    b_num = convert_to_number(b)\n    \n    # Compare and return the appropriate value\n    if a_num > b_num:\n        return a\n    elif b_num > a_num:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"\n    >>> is_equal_to_sum_even(4)\n    False\n    >>> is_equal_to_sum_even(8)\n    True\n    >>> is_equal_to_sum_even(10)\n    True\n    >>> is_equal_to_sum_even(7)\n    False\n    \"\"\"\n    if n < 8:\n        return False\n    return n % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    \n    def factorial(n):\n        \"\"\"Compute the factorial of n.\"\"\"\n        if n == 0:\n            return 1\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    \n    return result\n\n# Testing the Function\nassert special_factorial(1) == 1  # 1! = 1\nassert special_factorial(2) == 2  # 2! * 1! = 2 * 1 = 2\nassert special_factorial(3) == 12  # 3! * 2! * 1! = 6 * 2 * 1 = 12\nassert special_factorial(4) == 288  # 4! * 3! * 2! * 1! = 24 * 6 * 2 * 1 = 288\nassert special_factorial(5) == 34560  # 5! * 4! * 3! * 2! * 1! = 120 * 24 * 6 * 2 * 1 = 34560"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    # replace all occurances of >2 spaces with -\n    text = re.sub(' {2,}', '-', text)\n    # replace all occurances of space with _\n    text = re.sub(' ', '_', text)\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(filename):\n    if filename.endswith('.txt') or filename.endswith('.exe'):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        if i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    Return a string containing words from the original sentence whose lengths are prime numbers.\n    \n    Example:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n    \"\"\"\n    def is_prime(n):\n        \"\"\" Check if a number n is prime. \"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"\n    Given two fractions x and n represented as strings \"<numerator>/<denominator>\",\n    checks if x * n results in a whole number.\n\n    Returns True if x * n is a whole number, False otherwise.\n\n    >>> simplify(\"1/5\", \"5/1\")\n    True\n    >>> simplify(\"1/6\", \"2/1\")\n    False\n    >>> simplify(\"7/10\", \"10/2\")\n    False\n    \"\"\"\n    # Function to extract numerator and denominator from a fraction string\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n    \n    # Parse fractions x and n\n    num_x, denom_x = parse_fraction(x)\n    num_n, denom_n = parse_fraction(n)\n    \n    # Calculate the product of x * n\n    product_num = num_x * num_n\n    product_denom = denom_x * denom_n\n    \n    # Check if the product is a whole number\n    if product_num % product_denom == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If several items have similar sum of digits, order them based on their index in original list.\n    \n    Args:\n    - nums: list of integers\n    \n    Returns:\n    - sorted list of integers\n    \"\"\"\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    if not nums:\n        return []\n    \n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"\n    Returns the number of elements in the array that are greater than 10 and have \n    both first and last digits as odd numbers (1, 3, 5, 7, 9).\n    \n    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n    2\n    \"\"\"\n    def is_odd_digit(digit):\n        return int(digit) % 2 != 0\n    \n    def first_digit_odd(num_str):\n        return is_odd_digit(num_str[0])\n    \n    def last_digit_odd(num_str):\n        return is_odd_digit(num_str[-1])\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))  # Handle negative numbers by taking absolute value\n            if len(num_str) > 1 and first_digit_odd(num_str) and last_digit_odd(num_str):\n                count += 1\n            elif len(num_str) == 1 and is_odd_digit(num_str):  # Single-digit numbers\n                count += 1\n    \n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    Return the number of triples (a[i], a[j], a[k]) of array a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \n    Example:\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Step 1: Generate the array 'a'\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    # Step 2: Count valid triples\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    \n    if idx1 < idx2:\n        # Return planets between planet1 and planet2 (exclusive), in order\n        return tuple(planets[idx1+1:idx2])\n    elif idx1 > idx2:\n        # Return planets between planet2 and planet1 (exclusive), in order\n        return tuple(planets[idx2+1:idx1][::-1])  # Reverse the order for correct sequence\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "def sort_strings(lst):\n    \"\"\"\n    Deletes strings with odd lengths, sorts the list by length and then alphabetically.\n    \"\"\"\n    # Filter out strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort by length first, then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    \"\"\"\n    Return x if n is a prime number, y otherwise.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    if n == 0 or n == 1:\n        return y\n    \n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    sum_all = sum(lst)\n    sum_of_squares = 0\n    \n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    \n    return 2 * (sum_of_squares - sum_all)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n\n    compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) -> [0, 0, 0, 0, 3, 3]\n    compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) -> [4, 4, 1, 0, 0, 6]\n    \"\"\"\n    return [abs(g - s) for g, s in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Returns the strongest extension based on the criteria specified.\n    \n    Args:\n    - class_name (str): Name of the class.\n    - extensions (list of str): List of extension names.\n    \n    Returns:\n    - str: Formatted string in the format ClassName.StrongestExtensionName.\n    \"\"\"\n    if not extensions:\n        return \"\"\n    \n    strongest_extension = extensions[0]\n    strongest_strength = calculate_strength(extensions[0])\n    \n    for ext in extensions[1:]:\n        current_strength = calculate_strength(ext)\n        if current_strength > strongest_strength:\n            strongest_extension = ext\n            strongest_strength = current_strength\n    \n    return f\"{class_name}.{strongest_extension}\"\n\ndef calculate_strength(extension):\n    \"\"\"\n    Calculates the strength of an extension based on CAP - SM formula.\n    \n    Args:\n    - extension (str): Extension name to calculate strength for.\n    \n    Returns:\n    - int: Strength value calculated as CAP - SM.\n    \"\"\"\n    CAP = sum(1 for char in extension if char.isupper())\n    SM = sum(1 for char in extension if char.islower())\n    return CAP - SM"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    Return True if the second word or any of its rotations is a substring of the first word.\n    \"\"\"\n    if len(a) != len(b):\n        return False\n    \n    doubled_a = a + a\n    return b in doubled_a"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n        even_odd_count(0) ==> (1, 0)\n    \"\"\"\n    num = abs(num)  # Convert to absolute value to handle negative numbers\n    even_count = 0\n    odd_count = 0\n    \n    if num == 0:\n        return (1, 0)  # Special case for number 0, which has 1 even digit (0)\n    \n    while num > 0:\n        digit = num % 10\n        if digit == 0:\n            even_count += 1\n        elif digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = [\n        ('M', 1000),\n        ('CM', 900),\n        ('D', 500),\n        ('CD', 400),\n        ('C', 100),\n        ('XC', 90),\n        ('L', 50),\n        ('XL', 40),\n        ('X', 10),\n        ('IX', 9),\n        ('V', 5),\n        ('IV', 4),\n        ('I', 1)\n    ]\n\n    result = \"\"\n    for numeral, value in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()\n\n# Testing the function\nassert int_to_mini_roman(1) == 'i'\nassert int_to_mini_roman(4) == 'iv'\nassert int_to_mini_roman(9) == 'ix'\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(40) == 'xl'\nassert int_to_mini_roman(90) == 'xc'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'\nassert int_to_mini_roman(1000) == 'm'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three\n    sides form a right-angled triangle, False otherwise.\n    \n    A right-angled triangle is a triangle in which one angle is a right angle (90 degrees).\n    \n    Args:\n    - a, b, c: Positive integers representing the lengths of the sides of the triangle.\n    \n    Returns:\n    - True if the sides form a right-angled triangle, False otherwise.\n    \n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Sort a, b, c so that a <= b <= c\n    sides = [a, b, c]\n    sides.sort()\n    a, b, c = sides[0], sides[1], sides[2]\n    \n    # Check if it satisfies Pythagorean theorem\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_count = -1\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_count:\n            max_unique_count = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_unique_count:\n            if word < max_word:\n                max_word = word\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_carrots_eaten = number + need\n    \n    if remaining >= need:\n        remaining_carrots = remaining - need\n    else:\n        remaining_carrots = 0  # Eat all remaining carrots if there aren't enough\n\n    return [total_carrots_eaten, remaining_carrots]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Builds an algebraic expression from given lists of operators and operands,\n    respecting the order of operations, and evaluates the expression.\n    \n    Parameters:\n    operator (list): List of operators in the order they should be applied.\n    operand (list): List of integers to operate on.\n    \n    Returns:\n    int: Result of evaluating the algebraic expression.\n    \n    Raises:\n    ValueError: If the length of the operator list is not one less than the operand list.\n    \"\"\"\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Length of operator list should be one less than operand list.\")\n    \n    expr = str(operand[0])\n    for i in range(len(operator)):\n        expr += ' ' + operator[i] + ' ' + str(operand[i + 1])\n    \n    return eval(expr)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"\n    Given a string s, modify it based on specific rules:\n    - Reverse the case of letters ('a' to 'z' <-> 'A' to 'Z').\n    - Retain non-letter characters as is.\n    - If no letters are present, reverse the entire string.\n    \n    Args:\n    s (str): Input string\n    \n    Returns:\n    str: Modified string based on the rules\n    \n    Examples:\n    >>> solve(\"1234\")\n    '4321'\n    >>> solve(\"ab\")\n    'AB'\n    >>> solve(\"#a@C\")\n    '#A@c'\n    \"\"\"\n    has_letter = False\n    result = []\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    \n    if not has_letter:\n        return ''.join(result[::-1])\n    else:\n        return ''.join(result)"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if text == '':\n        return None\n    \n    hash_object = hashlib.md5()\n    hash_object.update(text.encode('utf-8'))\n    md5_hash = hash_object.hexdigest()\n    \n    return md5_hash"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    >>> generate_integers(2, 8)\n    [2, 4, 6, 8]\n    >>> generate_integers(8, 2)\n    [2, 4, 6, 8]\n    >>> generate_integers(10, 14)\n    []\n    \"\"\"\n    min_val, max_val = min(a, b), max(a, b)\n    return [digit for digit in range(min_val, max_val + 1) if digit in [2, 4, 6, 8]]\n\n# Testing the function\nassert generate_integers(2, 8) == [2, 4, 6, 8]\nassert generate_integers(8, 2) == [2, 4, 6, 8]\nassert generate_integers(10, 14) == []\nassert generate_integers(3, 3) == []\nassert generate_integers(2, 2) == [2]\nassert generate_integers(1, 9) == [2, 4, 6, 8]"}
