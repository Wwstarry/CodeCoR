{"date": "2024-04-25 16:02", "hash": "ebe95df0d5220f00cedd6f4bddea35e4", "eval": {"Mbpp/7": [{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    words = string.split()\n    return [word for word in words if len(word) >= 4]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "def volume_cylinder(radius, height):\n    return math.pi * radius**2 * height", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    \n    for i in range(n+1):\n        if i % 2 == 0:\n            coefficient = math.comb(n, i)\n            total_sum += coefficient\n    \n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    for i in range(1, int(n**0.5) + 1):\n        square_diff = i**2 - (i-1)**2\n        if square_diff == n:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[true]]}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    length = len(tuples[0])  # Get the length of the first tuple\n    for tup in tuples:\n        if len(tup) != length:  # Check if the length of the current tuple is different from the first tuple\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] - tuple2[i])\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "def is_samepatterns(words, patterns):\n    if len(words) != len(patterns):\n        return False\n    \n    word_to_pattern = {}\n    pattern_to_word = {}\n    \n    for word, pattern in zip(words, patterns):\n        if word not in word_to_pattern and pattern not in pattern_to_word:\n            word_to_pattern[word] = pattern\n            pattern_to_word[pattern] = word\n        elif word in word_to_pattern and pattern in pattern_to_word:\n            if word_to_pattern[word] != pattern or pattern_to_word[pattern] != word:\n                return False\n        else:\n            return False\n    \n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["red", "red", "red", "red", "red", "red"], ["a", "b", "c", "a", "b", "c"]]]}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    shrink_factor = 1.3\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = int(gap / shrink_factor)\n        swapped = False\n        \n        for i in range(len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n                \n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    res = []\n    for tup in lst:\n        res.append(tup[-1])\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublist):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n    lst (list): The list to check for the presence of the sublist.\n    sublist (list): The sublist to search for within the list.\n\n    Returns:\n    bool: True if the sublist is found in the list, False otherwise.\n    \"\"\"\n    if not sublist:\n        return True  # An empty sublist is always considered a sublist\n\n    for i in range(len(lst) - len(sublist) + 1):\n        if lst[i:i + len(sublist)] == sublist:\n            return True\n\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    increasing = decreasing = True\n\n    # Check if the array is strictly increasing\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            increasing = False\n            break\n\n    # Check if the array is strictly decreasing\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n            break\n\n    # If either increasing or decreasing is True, array is monotonic\n    return increasing or decreasing", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    number_str = str(number)\n    if len(number_str) < 3:\n        return False\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(number_str)):\n        if number_str[i] > number_str[i - 1]:\n            decreasing = False\n        elif number_str[i] < number_str[i - 1]:\n            increasing = False\n\n    return not (increasing or decreasing)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1991]], "plus_fail_tests": [[2121212121212122]]}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if isinstance(d, dict) and d:\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    if n <= 0:\n        return 0\n    \n    sum_even_powers = 0\n    for i in range(1, n*2 + 1, 2):  # Only even numbers contribute to even powers\n        sum_even_powers += i ** 5\n        \n    return sum_even_powers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    closest = n - 1\n    return closest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    return sum((2*i)**2 for i in range(1, n+1))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = [[] for _ in range(n)]\n    for i, item in enumerate(lst):\n        result[i % n].append(item)\n    return [sublist for sublist in result if sublist]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    # Initialize the Bell triangle with all values as 0\n    bell_triangle = [[0] * (n+1) for _ in range(n+1)]\n    \n    # Base case\n    bell_triangle[0][0] = 1\n    \n    # Fill the triangle using dynamic programming\n    for i in range(1, n+1):\n        # Update the first column of the current row\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        \n        # Update the rest of the current row\n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i-1][j-1] + bell_triangle[i][j-1]\n    \n    # The last value of the nth row is the Bell number\n    return bell_triangle[n][0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n    - n: integer, the index of the tetrahedral number to find\n\n    Returns:\n    - int: the nth tetrahedral number\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    if n == 0:\n        return 1\n    else:\n        return count_binary_seq(n-1) * (4*n - 2) / (n + 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    if n == 1:\n        return 1\n    return 3 * n * (n - 1) + 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    result = 0\n    for item in lst:\n        if isinstance(item, list):\n            result += recursive_list_sum(item)\n        else:\n            result += item\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "def text_match_two_three(string):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, string))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 2:\n        dog_years = human_years * 10.5\n    else:\n        dog_years = 21 + (human_years - 2) * 4\n    \n    return dog_years", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "def check_element(lst, elem):\n    return all(item == elem for item in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "def subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    # Perimeter of a regular pentagon formula: perimeter = 5 * side_length\n    return 5 * side_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    max_diff = 0\n    for pair in tuples:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [0] * (n + 1)\n        seq[1] = 1\n        seq[2] = 1\n        for i in range(3, n + 1):\n            seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n        return seq[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    odd_numbers = [2*i + 1 for i in range(n)]  # Generate first n odd natural numbers\n    sum_of_squares = sum(num ** 2 for num in odd_numbers)  # Calculate sum of squares\n    return sum_of_squares", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def smallest_num(nums):\n    if not nums:\n        return None\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    return smallest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/83": [{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    total_ascii = sum(ord(char) for char in s) % 26\n    return chr(total_ascii + 97)  # Adding 97 to convert back to ASCII lowercase letter", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \n    Args:\n    list1 (list): The first list.\n    list2 (list): The second list.\n    \n    Returns:\n    list: The result of subtracting the second list from the first list element-wise.\n    \"\"\"\n    return [x - y for x, y in zip(list1, list2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if all elements in the given list are unique.\n\n    Args:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["hello   world"]]}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return set(list1) & set(list2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "def validate(number):\n    # Convert number to string to iterate over its digits\n    num_str = str(number)\n    \n    # Dictionary to store the frequency of each digit\n    digit_freq = {str(i): 0 for i in range(10)}\n    \n    # Count the frequency of each digit\n    for digit in num_str:\n        digit_freq[digit] += 1\n    \n    # Check if frequency of each digit is less than or equal to the digit itself\n    for digit, freq in digit_freq.items():\n        if freq > int(digit):\n            return False\n    \n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "def nth_decagonal_number(n):\n    if n < 1:\n        return \"Input should be a positive integer greater than 0\"\n    return n * (7 * n - 5)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of equal length\")\n    \n    result = tuple(a / b for a, b in zip(tuple1, tuple2))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "def count_first_elements(t):\n    count = 0\n    for i, item in enumerate(t):\n        if isinstance(item, tuple):\n            return count\n        count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    # Convert the number to a string for easier manipulation\n    number_str = str(number)\n    \n    # Calculate the difference between the sum of digits at even and odd positions\n    diff = sum(int(digit) for digit in number_str[::2]) - sum(int(digit) for digit in number_str[1::2])\n    \n    # Return True if the difference is divisible by 11, False otherwise\n    return diff % 11 == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_prime(num):\n            m = num - 1\n            if (m % 2 == 0) and is_prime((m // 2) + 1):\n                count += 1\n    return num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "def ctagonal(n):\n    return n * (3 * n - 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "def Max_Num(nums):\n    nums.sort(reverse=True)\n    max_num = \"\"\n    for num in nums:\n        max_num += str(num)\n    return int(max_num)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "def find_tuples(lst, k):\n    return [tpl for tpl in lst if all(elem % k == 0 for elem in tpl)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start_idx, end_idx):\n    return sum(lst[start_idx:end_idx+1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def check(num):\n    # Reverse the number\n    reverse_num = int(str(num)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return num == 2 * reverse_num - 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(n):\n    while True:\n        n += 1\n        if is_palindrome(n):\n            return n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "def find_common_divisors(num1, num2):\n    divisors1 = []\n    divisors2 = []\n    for i in range(1, num1 + 1):\n        if num1 % i == 0:\n            divisors1.append(i)\n    for i in range(1, num2 + 1):\n        if num2 % i == 0:\n            divisors2.append(i)\n    common_divisors = set(divisors1) & set(divisors2)\n    return sum(common_divisors)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    maximum = None\n    for item in lst:\n        if isinstance(item, int) or isinstance(item, float):\n            if maximum is None or item > maximum:\n                maximum = item\n    return maximum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["3.14", false, 7.5]]]}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if a given number is a Woodall number.\n    \n    Args:\n    n (int): The number to check\n    \n    Returns:\n    bool: True if n is a Woodall number, False otherwise\n    \"\"\"\n    if n <= 1:\n        return False\n    else:\n        woodall_number = 1\n        while woodall_number * (woodall_number - 1) <= n:\n            if woodall_number * (woodall_number - 1) == n:\n                return True\n            woodall_number += 1\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[true]]}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "def check_occurrences(lst):\n    occurrences = {}\n    \n    for tup in lst:\n        if tup in occurrences:\n            occurrences[tup] += 1\n        else:\n            occurrences[tup] = 1\n    \n    return occurrences", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "def count_occurrence(s):\n    count = 0\n    i = s.find(\"std\")\n    while i != -1:\n        count += 1\n        i = s.find(\"std\", i + 1)\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    curr_diff = 0\n    for char in binary_string:\n        if char == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff, curr_diff)\n        if curr_diff < 0:\n            curr_diff = 0\n    return max_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Args:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * height", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def test_duplicate(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(num):\n    while num > 0:\n        # Find the largest power of 2 less than or equal to num\n        power_of_two = 1\n        while power_of_two * 2 <= num:\n            power_of_two *= 2\n        # Subtract the power of 2 from num\n        num -= power_of_two\n    # If num becomes zero, it means it can be represented as sum of non-zero powers of 2\n    return num == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    for string in lst:\n        if substring in string:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_num):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Args:\n        complex_num (complex): The complex number to convert.\n\n    Returns:\n        tuple: A tuple containing the magnitude and phase angle (in radians) of the complex number.\n    \"\"\"\n    polar_coords = cmath.polar(complex_num)\n    return polar_coords", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == chr(ord('a') + i) or string[i].lower() == chr(ord('A') + i):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld"]]}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    # Convert tuple to list\n    new_lst = list(tup)\n    \n    # Append elements from the given list\n    new_lst.extend(lst)\n    \n    # Convert back to tuple\n    new_tup = tuple(new_lst)\n    \n    return new_tup", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    dirty_chars = set(string2)\n    result = \"\"\n    for char in string1:\n        if char not in dirty_chars:\n            result += char\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "def lateral_surface_cube(side_length):\n    # The lateral surface area of a cube is given by 4 times the square of its side length\n    return 4 * side_length ** 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(' ', char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    primes = [True] * n\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            primes[i*i:n:i] = [False] * len(primes[i*i:n:i])\n    \n    return sum(primes)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(real_part, imag_part):\n    \"\"\"\n    Calculate the angle (in radians) of a complex number given its real and imaginary parts.\n    \n    Args:\n        real_part (float): The real part of the complex number.\n        imag_part (float): The imaginary part of the complex number.\n    \n    Returns:\n        float: The angle (in radians) of the complex number.\n    \"\"\"\n    # Use atan2 to calculate the angle\n    angle = math.atan2(imag_part, real_part)\n    \n    return angle", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    # Number of substrings formula: n*(n+1)/2\n    return n * (n + 1) // 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "def divisor_sum(n):\n    divisor_sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisor_sum += i\n            if i != n // i:\n                divisor_sum += n // i\n    return divisor_sum\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        partner = divisor_sum(num)\n        if partner > num and divisor_sum(partner) == num:\n            amicable_sum += num + partner\n    return amicable_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (float or int): Length of one side of the square.\n\n    Returns:\n    float or int: Perimeter of the square.\n    \"\"\"\n    return 4 * side_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    if not arr:\n        return 0  # If the array is empty, return 0\n\n    # Count the number of zeroes and non-zeroes\n    num_zeroes = sum(1 for num in arr if num == 0)\n    num_non_zeroes = len(arr) - num_zeroes\n\n    # Calculate the ratio\n    if num_non_zeroes == 0:\n        return math.inf  # Return infinity if there are no non-zero elements\n    else:\n        return num_zeroes / num_non_zeroes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n    return min_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    max_len = 0\n    max_list = []\n    \n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return max_len, max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "def start_withp(word_list):\n    words_with_p = []\n    for words in word_list:\n        words_with_p.extend(word for word in words.split() if word.startswith('P') or word.startswith('p'))\n        if len(words_with_p) >= 2:\n            break\n    return tuple(words_with_p[:2])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(input_string):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    if re.match(pattern, input_string):\n        return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    # Get the data type of the first element\n    first_type = type(tup[0])\n\n    # Iterate through the rest of the elements in the tuple\n    for elem in tup[1:]:\n        # If the data type of any element is different from the first element, return False\n        if type(elem) != first_type:\n            return False\n    \n    # If all elements have the same data type, return True\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/229": [{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    neg_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            # Swap arr[i] with arr[neg_count]\n            arr[i], arr[neg_count] = arr[neg_count], arr[i]\n            neg_count += 1\n    \n    return arr", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[10, -5, -2, 7, 0, 0, 0, -10, -5], 9]]}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # Find the position of the left most unset bit\n    position = 0\n    while n & (1 << position) != 0:\n        position += 1\n\n    # Set the left most unset bit\n    return n | (1 << position)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[255]]}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "def count_X(input_tuple, element):\n    count = 0\n    for item in input_tuple:\n        if item == element:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "def count(lst):\n    return lst.count(True)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    max_product = 0\n    for tuple_pair in lst:\n        product = abs(tuple_pair[0] * tuple_pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    sorted_lists = []\n    for sublist in list_of_lists:\n        sorted_sublist = sorted(sublist, key=lambda x: x.strip().lower())\n        sorted_lists.append(sorted_sublist)\n    return sorted_lists", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[" red ", "green"], ["blue ", " black"], [" orange", "brown"]]]], "plus_fail_tests": [[[["IODiWvh", "e", "f", "dog", "r", "cat", "a"], ["cat", "dog", "elephant"], ["giraffe"], ["zebra", "lion", "tiger"]]]]}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    # Function to find the maximum sum of a subarray within a single array\n    def kadane(arr):\n        max_so_far = float('-inf')\n        max_ending_here = 0\n        for i in range(len(arr)):\n            max_ending_here = max_ending_here + arr[i]\n            if max_so_far < max_ending_here:\n                max_so_far = max_ending_here\n            if max_ending_here < 0:\n                max_ending_here = 0\n        return max_so_far\n    \n    # Function to find the maximum sum of a subarray within the modified array\n    def max_sub_array_sum(arr, n):\n        max_sum_single = kadane(arr)\n        total_sum = sum(arr)\n        if total_sum < 0:\n            return max_sum_single\n        else:\n            return max_sum_single + (total_sum * (k - 2))\n    \n    # Check if k is 1, in that case return the maximum sum within a single array\n    if k == 1:\n        return kadane(arr)\n    else:\n        return max_sub_array_sum(arr, n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 10, 20], 3, 2]], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def find_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Args:\n    base (float): The length of the base of the triangle.\n    height (float): The height of the triangle.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    base_area = 0.5 * base * height\n    # Calculate the volume using the formula: volume = base_area * length\n    volume = base_area * length\n    return volume", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "def min_of_three(num1, num2, num3):\n    return min(num1, num2, num3)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "def search(nums):\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if mid is the unique element\n        if mid > 0 and nums[mid] == nums[mid - 1]:\n            if (mid - 1 - left) % 2 == 0:\n                left = mid + 1\n            else:\n                right = mid - 2\n        elif mid < len(nums) - 1 and nums[mid] == nums[mid + 1]:\n            if (mid - left) % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return nums[mid]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\r\n    def row_sum(row):\r\n        return sum(row)\r\n    \r\n    sorted_matrix = sorted(matrix, key=row_sum)\r\n    \r\n    return sorted_matrix", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    sum_negative = 0\n    for num in numbers:\n        if num < 0:\n            sum_negative += num\n    return sum_negative", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1 if m == 1 else 0\n    \n    # Initialize a 2D list to store intermediate results\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    \n    # Base cases\n    for i in range(1, n+1):\n        dp[i][0] = 0\n        dp[i][1] = i\n    \n    # Fill the table using bottom-up dynamic programming\n    for i in range(2, n+1):\n        for j in range(2, m+1):\n            dp[i][j] = (j + 1) * dp[i-1][j] + (i - j) * dp[i-1][j-1]\n    \n    return dp[n][m]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "def find_quotient(dividend, divisor):\n    return dividend // divisor", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(side1, side2):\n    \"\"\"\n    Calculate the length of the third side of a right-angled triangle.\n\n    Args:\n    side1 (float): Length of one of the sides of the triangle.\n    side2 (float): Length of the other side of the triangle.\n\n    Returns:\n    float: Length of the third side of the triangle.\n    \"\"\"\n    third_side = math.sqrt(side1 ** 2 + side2 ** 2)\n    return third_side", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "def odd_values_string(input_string):\n    return ''.join(input_string[i] for i in range(len(input_string)) if i % 2 == 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/249": [{"task_id": "Mbpp/249", "solution": "def rsection_array(arr1, arr2):\n    return [x for x in arr1 if x in arr2]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_case_str):\n    words = snake_case_str.split('_')\n    camel_case_str = words[0].capitalize() + ''.join(word.capitalize() for word in words[1:])\n    return camel_case_str", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "def longest_palindromic_subseq(string):\n    n = len(string)\n    # create a table to store the lengths of longest palindromic subsequences\n    table = [[0 for x in range(n)] for x in range(n)]\n    # all subsequences of length 1 are palindromic\n    for i in range(n):\n        table[i][i] = 1\n    # calculating table[i][j] for subsequences of length 2 to n\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if string[i] == string[j] and cl == 2:\n                table[i][j] = 2\n            elif string[i] == string[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n    return table[0][n-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    first_index = string.find(char) # Find the first occurrence of the character\n    last_index = string.rfind(char) # Find the last occurrence of the character\n    \n    if first_index == -1 or last_index == -1: # If either of the occurrences doesn't exist\n        return string # Return the original string\n    \n    # Remove the first and last occurrence of the character using slicing\n    updated_string = string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\n    \n    return updated_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def _Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s[:i] == s[i:]:\n            return i\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[499, 499, 4000]]}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    if k <= 0 or k > len(arr):\n        return None\n    arr.sort()\n    return arr[k - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    max_inc_sum = [0] * n\n    max_dec_sum = [0] * n\n\n    for i in range(n):\n        max_inc_sum[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and max_inc_sum[i] < max_inc_sum[j] + arr[i]:\n                max_inc_sum[i] = max_inc_sum[j] + arr[i]\n\n    for i in range(n - 1, -1, -1):\n        max_dec_sum[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j] and max_dec_sum[i] < max_dec_sum[j] + arr[i]:\n                max_dec_sum[i] = max_dec_sum[j] + arr[i]\n\n    max_sum = 0\n    for i in range(n):\n        bitonic_sum = max_inc_sum[i] + max_dec_sum[i] - arr[i]\n        max_sum = max(max_sum, bitonic_sum)\n\n    return max_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/117": [{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [(float(x), float(y)) for x, y in lst]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    # Generate all possible products\n    products = [x * y for x in list1 for y in list2]\n    # Sort the products in descending order\n    sorted_products = sorted(products, reverse=True)\n    # Return the first n largest products\n    return sorted_products[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    return sum(n - 2*i for i in range(n // 2 + 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num**2 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "def reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    string = list(string)\n    i, j = 0, len(string)-1\n    \n    while i < j:\n        if string[i] in vowels and string[j] in vowels:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n        elif string[i] not in vowels:\n            i += 1\n        elif string[j] not in vowels:\n            j -= 1\n    \n    return ''.join(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    return (num2, num1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count\n    \n    def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        \n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                k += 1\n                i += 1\n            else:\n                temp[k] = arr[j]\n                k += 1\n                j += 1\n                inv_count += (mid - i + 1)\n        \n        while i <= mid:\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n        \n        while j <= right:\n            temp[k] = arr[j]\n            k += 1\n            j += 1\n        \n        for i in range(left, right + 1):\n            arr[i] = temp[i]\n        \n        return inv_count\n    \n    n = len(arr)\n    temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(num):\n    root = math.ceil(math.sqrt(num))\n    return root ** 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return 0\n\n    min_element = arr[0]\n    max_diff = arr[1] - arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] - min_element > max_diff:\n            max_diff = arr[i] - min_element\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[9, 3, 2, 5, 1]]], "plus_fail_tests": []}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    # Create a dictionary to store the frequency of each item\n    freq_dict = {}\n    \n    # Count the frequency of each item in the list\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    # Find the item with maximum frequency\n    max_freq_item = None\n    max_freq = 0\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_freq_item = item\n    \n    return max_freq_item", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Function to find the maximum sum of increasing subsequence\n    def max_sum_increasing(arr, n):\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = arr[i]\n            for j in range(i):\n                if arr[i] > arr[j]:\n                    dp[i] = max(dp[i], dp[j] + arr[i])\n        return max(dp)\n\n    # Find maximum sum of increasing subsequence until ith index\n    max_sum = max_sum_increasing(arr[:i], i)\n\n    # Find maximum sum of increasing subsequence until kth index\n    max_sum_k = max_sum_increasing(arr[:k], k)\n\n    # Add the element at kth index to the maximum sum until ith index\n    max_sum += arr[k]\n\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    # Binary search to find the first occurrence of the element\n    def first_occurrence(arr, low, high, target):\n        while low <= high:\n            mid = low + (high - low) // 2\n            if arr[mid] == target and (mid == 0 or arr[mid - 1] < target):\n                return mid\n            elif arr[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n    \n    # Binary search to find the last occurrence of the element\n    def last_occurrence(arr, low, high, target):\n        while low <= high:\n            mid = low + (high - low) // 2\n            if arr[mid] == target and (mid == n - 1 or arr[mid + 1] > target):\n                return mid\n            elif arr[mid] > target:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1\n    \n    # Get the first and last occurrence indices of the element\n    first = first_occurrence(arr, 0, n - 1, element)\n    last = last_occurrence(arr, 0, n - 1, element)\n    \n    # Check if the element occurs more than n/2 times\n    if first != -1 and last != -1 and (last - first + 1) > n / 2:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 1, 0]]}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    xor_result = num1 ^ num2\n    count_set_bits = 0\n    while xor_result:\n        count_set_bits += xor_result & 1\n        xor_result >>= 1\n    return count_set_bits == 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-10, 10]]}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "def count_charac(input_string):\n    return len(input_string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/143": [{"task_id": "Mbpp/143", "solution": "def find_lists(tuple_list):\n    count = 0\n    for item in tuple_list:\n        if isinstance(item, list):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "def is_magic_square(matrix):\n    n = len(matrix)\n    target_sum = n * (n ** 2 + 1) // 2\n\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if col_sum != target_sum:\n            return False\n\n    diagonal1_sum = sum(matrix[i][i] for i in range(n))\n    diagonal2_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal1_sum != target_sum or diagonal2_sum != target_sum:\n        return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "def multiply_num(numbers):\n    if not numbers:\n        return 0.0  # Handle empty list to avoid division by zero\n    product = 1.0\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x < 0 and y > 0) or (x > 0 and y < 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        max_tuple = max(tuple1[i], tuple2[i])\n        result.append(max_tuple)\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6], [7, 8], [7, 8]], [[7, 7], [8, 7], [6, 5], [4, 3], [2, 1]]]]}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "def max_aggregate(scores):\n    aggregates = {}\n    for name, score in scores:\n        if name in aggregates:\n            aggregates[name] += score\n        else:\n            aggregates[name] = score\n    \n    max_name = None\n    max_score = -float('inf')\n    for name, score in aggregates.items():\n        if score > max_score:\n            max_name = name\n            max_score = score\n    \n    return max_name, max_score", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/115": [{"task_id": "Mbpp/115", "solution": "def empty_dit(lst):\n    for item in lst:\n        if not isinstance(item, dict):\n            return False\n        if item:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2], [], []]]], "plus_fail_tests": [[[[], [], [], ["", "not", "gA", "e", "ML", "a", "EnIODji"], [], [], [], [], [], [], [], []]]]}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for item1, item2, item3 in zip(list1, list2, list3):\n        if item1 == item2 == item3:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    \"\"\"\n    Check if a string represents an integer.\n\n    Parameters:\n        s (str): The string to be checked.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    # Check if the string is empty\n    if len(s) == 0:\n        return False\n\n    # Check if the string starts with a '+' or '-' sign\n    if s[0] in ('+', '-'):\n        # If the string has only the sign character, it's not an integer\n        if len(s) == 1:\n            return False\n        # Check if the remaining part of the string is composed of digits\n        return s[1:].isdigit()\n    \n    # Check if the string is composed of digits only\n    return s.isdigit()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "def long_words(n, text):\n    words = text.split()\n    return [word for word in words if len(word) > n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    flattened_list = [item for sublist in lists for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Initialize a 2D table to store the results\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Initialize the base case: when n = 1, there's only one possible sequence for any m\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    # Populate the table using dynamic programming\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(j // 2, j):\n                dp[i][j] += dp[i - 1][k]\n    \n    # Sum up the results for all possible ending values\n    total_sequences = sum(dp[n])\n    \n    return total_sequences", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    \"\"\"\n    Sorts a list of elements using pancake sort algorithm.\n    \n    Parameters:\n    arr (list): The list to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    def flip(arr, k):\n        \"\"\"\n        Reverses the first k elements of the given list.\n        \n        Parameters:\n        arr (list): The list to be flipped.\n        k (int): The number of elements to be reversed.\n        \"\"\"\n        i = 0\n        while i < k / 2:\n            arr[i], arr[k - i - 1] = arr[k - i - 1], arr[i]\n            i += 1\n    \n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        max_index = arr.index(max(arr[:curr_size]))\n        if max_index != curr_size - 1:\n            flip(arr, max_index + 1)\n            flip(arr, curr_size)\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(lst):\n    result = set(lst[0])\n    for sublist in lst[1:]:\n        result = result.intersection(set(sublist))\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    # Mask to set even bits to 1: 0b101010... (alternating 1 and 0)\n    mask = 0b10101010101010101010101010101010\n    # Apply the mask to the number using bitwise OR operation\n    result = num | mask\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "def rotate_binary(binary_str, rotations):\n    \"\"\"\n    Rotate a binary string a given number of times.\n\n    Args:\n    - binary_str (str): The binary string to rotate.\n    - rotations (int): The number of rotations to perform.\n\n    Returns:\n    - list of str: List of binary strings after rotation.\n    \"\"\"\n    n = len(binary_str)\n    rotations %= n  # To handle cases where rotations > len(binary_str)\n    return [binary_str[-rotations:] + binary_str[:-rotations]]\n\n\ndef count_odd_values(binary_str):\n    \"\"\"\n    Count the number of odd values in a binary string.\n\n    Args:\n    - binary_str (str): The binary string.\n\n    Returns:\n    - int: Number of odd values.\n    \"\"\"\n    return sum(int(bit) % 2 for bit in binary_str)\n\n\ndef odd_equivalent(binary_str, rotations):\n    \"\"\"\n    Find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n    - binary_str (str): The binary string.\n    - rotations (int): The number of rotations to perform.\n\n    Returns:\n    - int: Number of numbers with an odd value.\n    \"\"\"\n    rotated_strings = rotate_binary(binary_str, rotations)\n    count = 0\n    for rotated_str in rotated_strings:\n        count += count_odd_values(rotated_str)\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    return set(num for sublist in list_of_lists for num in sublist)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/164": [{"task_id": "Mbpp/164", "solution": "def are_equivalent(num1, num2):\n    def get_divisors(num):\n        divisors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    sum1 = sum(get_divisors(num1))\n    sum2 = sum(get_divisors(num2))\n    \n    return sum1 == sum2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_list = [2, 1]\n        for i in range(2, n + 1):\n            lucas_list.append(lucas_list[i - 1] + lucas_list[i - 2])\n        return lucas_list[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    def get_digit_sum(n):\n        if isinstance(n, int):\n            return sum(int(digit) for digit in str(abs(n)))\n        return 0\n    \n    return sum(get_digit_sum(num) for num in lst if isinstance(num, (int, float)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 20, 4, 5, "b", 70, "a"]]]], "plus_fail_tests": [[[10, -5, "abc", 0, 3.14]]]}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1)\n    else:\n        return (min1, min2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "def count_occurrence(tup, lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Initialize the minimum value to the first element of the list\n    min_value = lst[0]\n\n    # Iterate through the elements of the list\n    for element in lst:\n        # Check if the element is smaller than the current minimum value\n        # and if it is not a string\n        if isinstance(element, int) and element < min_value:\n            min_value = element\n    \n    return min_value", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/431": [{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    return -(4 * a * k - h ** 2) / (4 * a)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    # Split the date string into year, month, and day\n    year, month, day = date.split('-')\n    \n    # Reorder the date components and join them with \"-\"\n    new_date = f\"{day}-{month}-{year}\"\n    \n    return new_date", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    return [item[n] for item in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/400": [{"task_id": "Mbpp/400", "solution": "def act_freq(lst):\n    unique_tuples = set(lst)\n    return len(unique_tuples)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_len = 0\n    max_element = []\n\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n\n    return max_element", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "def multiple_to_single(int_list):\n    # Convert each integer in the list to a string and join them together\n    joined_string = ''.join(map(str, int_list))\n    # Convert the joined string back to an integer\n    result = int(joined_string)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    even_characters = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            even_characters += string[i]\n    return even_characters", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Hello, world!"]]}], "Mbpp/396": [{"task_id": "Mbpp/396", "solution": "def check_char(string):\n    if len(string) < 2:\n        return \"Valid\"  # If the string has only one character, it's valid by default\n    else:\n        return \"Valid\" if string[0] == string[-1] else \"Invalid\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "def extract_rear(tuple):\n    result = []\n    for string in tuple:\n        result.append(string[-1])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    memo = {}\n\n    def max_sum_helper(n):\n        if n in memo:\n            return memo[n]\n\n        if n == 0:\n            return 0\n\n        max_sum = max(n, max_sum_helper(n//2) + max_sum_helper(n//3) + max_sum_helper(n//4) + max_sum_helper(n//5))\n        memo[n] = max_sum\n        return max_sum\n\n    return max_sum_helper(n)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "def and_tuples(tup1, tup2):\n    result = tuple()\n    for i in range(len(tup1)):\n        if tup1[i] and tup2[i]:\n            result += (tup1[i],)\n        else:\n            result += (0,)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[123, 456, 789, 10], [987, 654, 321, 10]]]}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "def median_numbers(num1, num2, num3):\n    numbers = [num1, num2, num3]\n    numbers.sort()  # Sort the numbers in ascending order\n    return numbers[1]  # Return the middle element", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    adverb = \"\"\n    position = 0\n    i = 0\n\n    while i < len(sentence):\n        if sentence[i].isalpha() or sentence[i] == \"'\":\n            break\n        i += 1\n\n    while i < len(sentence):\n        if sentence[i].isalpha() or sentence[i] == \"'\":\n            break\n        adverb += sentence[i]\n        position += 1\n        i += 1\n\n    return (0, position, adverb.strip('!'))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        multiplied_tuple = tuple(tuple1[i][j] * tuple2[i][j] for j in range(len(tuple1[i])))\n        result.append(multiplied_tuple)\n    return tuple(result)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    return number % 10", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "def an_trapezium(a, b, c):\n    return (a + b + 2 * c) / 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "def er_oddnumbers(numbers):\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(key_list, value_list, score_list):\n    result = []\n    for key, value, score in zip(key_list, value_list, score_list):\n        nested_dict = {key: {value: score}}\n        result.append(nested_dict)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/407": [{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(num):\n    num_str = str(num)\n    n = len(num_str)\n    \n    # Step 3: Finding the first digit 'i'\n    i = n - 1\n    while i > 0 and num_str[i] <= num_str[i-1]:\n        i -= 1\n    if i == 0:\n        return False\n    \n    # Step 4: Finding the digit 'j'\n    j = i - 1\n    \n    # Step 5: Finding the digit 'k'\n    k = n - 1\n    while num_str[k] <= num_str[j]:\n        k -= 1\n    \n    # Step 6: Swapping positions of 'num_str[j]' and 'num_str[k]'\n    num_str = list(num_str)\n    num_str[j], num_str[k] = num_str[k], num_str[j]\n    \n    # Step 7: Sorting the substring and concatenating the result\n    num_str = num_str[:i] + sorted(num_str[i:])\n    return int(\"\".join(num_str))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": []}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "def neg_nos(nums):\n    negatives = []\n    for num in nums:\n        if num < 0:\n            negatives.append(num)\n    return negatives", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "def check_distinct(tuple):\n    return len(tuple) == len(set(tuple))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_string):\n    return [format_string.format(item) for item in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples):\n    # Initialize the minimum product with the product of the first tuple\n    min_prod = tuples[0][0] * tuples[0][1]\n    \n    # Iterate over the remaining tuples\n    for tup in tuples[1:]:\n        # Calculate the product of the current tuple\n        prod = tup[0] * tup[1]\n        # Update the minimum product if the current product is smaller\n        if prod < min_prod:\n            min_prod = prod\n    \n    return min_prod", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(t):\n    return '-'.join(str(i) for i in t)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    # Calculate the surface area of the cube using the formula 6 * side_length^2\n    surface_area = 6 * side_length**2\n    return surface_area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        even_number = 2 * i\n        sum += even_number**3\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    Takes a list of numbers and returns a new list containing the cubes of each element.\n    \n    Args:\n    nums (list of int/float): List of numbers\n    \n    Returns:\n    list of int/float: List containing the cubes of each element\n    \"\"\"\n    return [num ** 3 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    for val1 in seq1:\n        if val1 in seq2:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/438": [{"task_id": "Mbpp/438", "solution": "def count_bidirectional(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i][0] == lst[j][1] and lst[i][1] == lst[j][0]:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1]]]]}], "Mbpp/442": [{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    positive_nums = [num for num in arr if num > 0]\n    ratio = len(positive_nums) / len(arr)\n    return round(ratio, 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-2, 1, -6, -9, -11, -12, -14, -5, -17]]]}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    perrin_numbers = generate_perrin(n)\n    return sum(perrin_numbers)\n\ndef generate_perrin(n):\n    perrin = [3, 0, 2]\n    if n <= 2:\n        return perrin[:n]\n    else:\n        for i in range(3, n):\n            perrin.append(perrin[-2] + perrin[-3])\n        return perrin", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    reversed_list = []\n    for string in string_list:\n        reversed_string = string[::-1]  # reversing the string\n        reversed_list.append(reversed_string)  # adding reversed string to the list\n    return reversed_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    result = []\n    for sublst in lst:\n        result.append(sublst[0])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/461": [{"task_id": "Mbpp/461", "solution": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "def find_min(list_of_lists):\n    if not list_of_lists:\n        return None  # Return None if the input list is empty\n\n    min_length = float('inf')  # Initialize min_length to infinity\n    min_sublist = None  # Initialize min_sublist to None\n\n    for sublist in list_of_lists:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    result = []\n    for string in lst:\n        if len(string) == size:\n            result.append(string)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n\n    if month_number in thirty_one_days_months:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "def sum_of_factors(n):\n    sum_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_factors += i\n    return sum_factors", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    area = length * width\n    return area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "def extract_values(input_string):\n    values = []\n    start = 0\n    while True:\n        start = input_string.find('\"', start)\n        if start == -1:\n            break\n        end = input_string.find('\"', start + 1)\n        if end == -1:\n            break\n        value = input_string[start + 1:end]\n        values.append(value)\n        start = end + 1\n    return values", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    return s.lower()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    toggled_string = \"\"\n    \n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char.lower()\n    \n    return toggled_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, size):\n    max_sum = arr[0]\n    current_sum = arr[0]\n\n    for i in range(1, size):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    sorted_dict = sorted(dictionary.items(), key=lambda kv: kv[1], reverse=True)\n    return sorted_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "def _empty(dic):\n    return {key: value for key, value in dic.items() if value is not None}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_squares = (n * (n + 1) // 2) ** 2 \n    sum_of_cubes = (n * (n + 1) // 2) * ((2 * n * n + 2 * n + 1) // 3) \n    return sum_of_cubes - sum_of_squares", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[10]]}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    # Initialize sum\n    digit_sum = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Add the last digit to the sum\n        digit_sum += n % 10\n        # Remove the last digit from the number\n        n //= 10\n    \n    # Return the sum of digits\n    return digit_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "def find_remainder(nums, n):\n    product = 1\n    for num in nums:\n        product = (product * num) % n\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "def first_Digit(num):\n    num_str = str(num)\n    return int(num_str[0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    result = [[]]  # start with an empty list as a combination\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])  # add all possible sublists as combinations\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(lst, sub_lst):\n    # Check if sub_lst is empty\n    if len(sub_lst) == 0:\n        return True\n\n    # Check if lst is empty or sub_lst is larger than lst\n    if len(lst) == 0 or len(lst) < len(sub_lst):\n        return False\n\n    # Iterate through lst\n    for i in range(len(lst)):\n        # Check if sub_lst can fit starting from index i in lst\n        if lst[i:i+len(sub_lst)] == sub_lst:\n            return True\n\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [1, 3, 5]]]}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    sorted_list = sorted(lst)  # Sort the list in ascending order\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i] != sorted_list[i-1] + 1:  # Check if the current number is not consecutive to the previous number\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    # Create an empty set to store unique numbers\n    unique_numbers = set()\n    \n    # Iterate through the list and add unique numbers to the set\n    for num in lst:\n        unique_numbers.add(num)\n    \n    # Initialize product variable with 1\n    product = 1\n    \n    # Iterate through the unique numbers and multiply them\n    for num in unique_numbers:\n        product *= num\n    \n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] != lst[j]:\n                count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Check if a list is sorted in ascending order.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "def subarray_product(arr):\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n        \n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "def product(arr):\n    n = len(arr)\n    max_product = 0\n    product = 1\n    for i in range(n):\n        if i + 1 < n and arr[i] < arr[i+1]:\n            product *= arr[i]\n        else:\n            product *= arr[i]\n            if product > max_product:\n                max_product = product\n            product = 1\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "def split_odd(lst):\n    return [num for num in lst if num % 2 != 0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    return string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "import re\n\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]', '', string)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["ThiS%^%!s&a(mY)TesTStR%i*ng"]]}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "def tuple_intersection(lst1, lst2):\n    set1 = set(lst1)\n    set2 = set(lst2)\n    return set1.intersection(set2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], [[2, 3, 1], [6, 5, 4], [11, 12, 10]]]]}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "def remove_duplicate_nums(*lists):\n    unique_nums = set()\n    for lst in lists:\n        unique_nums.update(lst)\n    return list(unique_nums)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    for sublst in lst:\n        sublst.sort()\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    if n < 0:\n        return None  # Factorial is not defined for negative numbers\n    elif n == 0 or n == 1:\n        return 1  # Factorial of 0 and 1 is 1\n\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n\n    last_digit = factorial % 10\n    return last_digit", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Convert tuples to sets, take union, and convert back to tuple\n    return tuple(sorted(set(tuple1).union(set(tuple2))))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        smallest = min(arr)\n        largest = max(arr)\n        return smallest + largest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Converting numbers to string for easier manipulation of digits\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Initializing the sum variable\n    sum_distance = 0\n    \n    # Checking the length of the two numbers\n    max_length = max(len(str_num1), len(str_num2))\n    \n    # Pad the shorter number with leading zeros if necessary\n    str_num1 = str_num1.zfill(max_length)\n    str_num2 = str_num2.zfill(max_length)\n    \n    # Calculating the per-digit difference and summing them up\n    for digit1, digit2 in zip(str_num1, str_num2):\n        sum_distance += abs(int(digit1) - int(digit2))\n    \n    return sum_distance", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12345, 9]]}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                odd_count += 1\n                \n    return odd_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    # Convert string to list to modify characters\n    string_list = list(string)\n    \n    # Iterate through each character in the list\n    for i in range(len(string_list)):\n        # If the character matches the old character, replace it with the new character\n        if string_list[i] == old_char:\n            string_list[i] = new_char\n    \n    # Convert the list back to a string\n    new_string = ''.join(string_list)\n    \n    return new_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "def split(string):\n    return [char for char in string]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/574": [{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    # Surface area formula for a cylinder: 2\u03c0r(r+h)\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return round(surface_area, 3)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "def _dissimilar(tuple1, tuple2):\n    return tuple(sorted(set(tuple1) ^ set(tuple2)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    side_area = base_edge**2\n    perimeter = 4 * base_edge\n    base_area = base_edge**2\n    lateral_area = (perimeter * height) / 2\n    surface_area = base_area + lateral_area\n    return surface_area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "def is_even(n):\n    return n % 2 == 0\n\ndef extract_even(t):\n    if isinstance(t, tuple):\n        return tuple(extract_even(e) for e in t if is_even(e))\n    else:\n        return t if is_even(t) else None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/582": [{"task_id": "Mbpp/582", "solution": "def is_dict_empty(d):\n    return len(d) == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Check if n is 0 or 1\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize the numerator and denominator\n    numerator = 1\n    denominator = 1\n    \n    # Calculate the factorial of 2n\n    for i in range(2, 2*n + 1):\n        numerator *= i\n    \n    # Calculate the factorial of n+1\n    for i in range(2, n + 2):\n        denominator *= i\n    \n    # Calculate the factorial of n\n    for i in range(2, n + 1):\n        denominator *= i\n    \n    # Calculate and return the nth Catalan number\n    return numerator // (denominator * denominator)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2]]}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    # Convert polar coordinates to rectangular coordinates\n    rect = cmath.rect(r, theta)\n    return (rect, cmath.polar(rect))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    result = []\n    for i in range(start, end+1):\n        if int(i**0.5)**2 == i:\n            result.append(i)\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/295": [{"task_id": "Mbpp/295", "solution": "def sum_div(number):\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "def is_prime(num):\n    # Prime numbers are greater than 1\n    if num <= 1:\n        return False\n    # Check for factors from 2 to the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of first n natural numbers\n    sum_of_numbers = (n * (n + 1)) // 2\n    \n    # Calculate the average of first n natural numbers\n    average_of_numbers = sum_of_numbers / n\n    \n    return sum_of_numbers, average_of_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/595": [{"task_id": "Mbpp/595", "solution": "def min_Swaps(num1, num2):\n    count1 = num1.count('1')\n    count2 = num2.count('1')\n    \n    # Check if the two binary numbers have the same number of 1s\n    if count1 != count2:\n        return \"Not Possible\"\n    \n    # Initialize the swap count\n    swaps = 0\n    \n    # Iterate through each index of the binary numbers\n    for i in range(len(num1)):\n        if num1[i] == '1' and num2[i] == '0':\n            swaps += 1\n    \n    return swaps", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["111", "000"]], "plus_fail_tests": [["1111111111111111111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000000000000000000"]]}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    return tuple(x % y for x, y in zip(tuple1, tuple2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    part1 = arr[:n]\n    part2 = arr[n:]\n    new_arr = part2 + part1\n    return new_arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n            \n        if first_even is not None and first_odd is not None:\n            break\n            \n    if first_even is None or first_odd is None:\n        return 0  # If either even or odd number is not found, return 0 as difference\n    \n    return abs(first_even - first_odd)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 5, 3, 6, 1, 4, 9, 8, 7]]]}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divide two lists element-wise.\n    \n    Args:\n        list1 (list): The numerator list.\n        list2 (list): The denominator list.\n        \n    Returns:\n        list: A list containing the element-wise division result.\n        \n    Raises:\n        ValueError: If the lists are not of equal length.\n        ZeroDivisionError: If any element in list2 is 0.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length\")\n    \n    result = []\n    for num1, num2 in zip(list1, list2):\n        if num2 == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed\")\n        result.append(num1 / num2)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    if not matrix or n >= len(matrix[0]) or n < 0:\n        return None\n    max_val = float('-inf')\n    for row in matrix:\n        if len(row) > n and row[n] > max_val:\n            max_val = row[n]\n    return max_val", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -1]]}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    def merge_and_find_kth(arr1, arr2, k):\n        len1, len2 = len(arr1), len(arr2)\n        if len1 == 0:\n            return arr2[k - 1]\n        if len2 == 0:\n            return arr1[k - 1]\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        i = min(len1, k // 2)\n        j = min(len2, k // 2)\n        if arr1[i - 1] < arr2[j - 1]:\n            return merge_and_find_kth(arr1[i:], arr2, k - i)\n        else:\n            return merge_and_find_kth(arr1, arr2[j:], k - j)\n    return merge_and_find_kth(arr1, arr2, k)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3], [true, true, false], 3]]}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Calculate the number of digits in the number\n    num_str = str(num)\n    num_digits = len(num_str)\n    \n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_of_digits = sum(int(digit) ** num_digits for digit in num_str)\n    \n    # Check if the sum is equal to the original number\n    return sum_of_digits == num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    parts = ip.split('.')\n    # Remove leading zeroes from each part of the IP address\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back together with '.' separator\n    new_ip = '.'.join(parts)\n    return new_ip", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    return [first_elements, second_elements]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "import math\n\ndef binomial_coefficient(n, k):\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\ndef sum_of_product(n):\n    if n < 2:\n        return n\n\n    total = 0\n    for i in range(n):\n        total += binomial_coefficient(n, i) * binomial_coefficient(n, i + 1)\n    return total", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "def get_ludic(limit):\n    ludic_numbers = []\n    for i in range(1, limit + 1):\n        if is_lucid(i):\n            ludic_numbers.append(i)\n    return ludic_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "def reverse_words(input_string):\n    # Split the input string by spaces into a list of words\n    words = input_string.split()\n    \n    # Reverse the order of the words in the list\n    reversed_words = words[::-1]\n    \n    # Join the reversed words into a single string with spaces\n    reversed_string = ' '.join(reversed_words)\n    \n    return reversed_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "import math\n\ndef degree_radian(degree):\n    radian = degree * (math.pi/180)\n    return radian", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "def is_even(num):\n    return num % 2 == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "def is_upper(string):\n    return string.upper()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    # Create a dictionary to keep track of character counts\n    char_counts = {}\n\n    # Loop through each character in the string\n    for char in s:\n        # If the character is already in the dictionary, it is repeated\n        if char in char_counts:\n            return char\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_counts[char] = 1\n\n    # If no repeated character is found, return None\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end() - 1\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    # Create a dictionary to store the count of each number modulo 2\n    count = {}\n    for num in numbers:\n        if num % 2 == 0:\n            count[num] = count.get(num, 0) + 1\n    \n    # Find the maximum count in the dictionary\n    max_count = max(count.values()) if count else 0\n    \n    return max_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    letters = []\n    numbers = []\n    for char in s:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            letters.append(char)\n    return ''.join(letters + numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return [elem for i, elem in enumerate(lst) if (i + 1) % k != 0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell_triangle = [[0] * (n+1) for _ in range(n+1)]\n    bell_triangle[0][0] = 1\n    \n    for i in range(1, n+1):\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        \n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i-1][j-1] + bell_triangle[i][j-1]\n            \n    return bell_triangle[n][0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "def average_tuple(tuple_of_tuples):\n    averages = []\n    for tup in tuple_of_tuples:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged_list = []\n    i = 0\n    j = 0\n    \n    while i < size and j < size:\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    \n    while i < size:\n        merged_list.append(list1[i])\n        i += 1\n    \n    while j < size:\n        merged_list.append(list2[j])\n        j += 1\n    \n    if size % 2 == 0:\n        median_index = size // 2\n        median = (merged_list[median_index - 1] + merged_list[median_index]) / 2\n    else:\n        median_index = size // 2\n        median = merged_list[median_index]\n    \n    return median", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius <= 0:\n        return None\n    else:\n        side_length = math.sqrt(3) * radius\n        area = (math.sqrt(3) / 4) * side_length ** 2\n        return area", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[0]], "plus_fail_tests": [[0.5]]}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "Here's the `replace_spaces` function code:\n\n```\ndef replace_spaces(input_str):\n    result = ''\n    for char in input_str:\n        if char == ' ':\n            result += '_'\n        elif char == '_':\n            result += ' '\n        else:\n            result += char\n    return result\n```", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    zero_count = lst.count(0)  # Count the number of zeroes\n    lst = [x for x in lst if x != 0]  # Remove zeroes from the list\n    lst.extend([0] * zero_count)  # Append zeroes at the end\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    # Create a max heap\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    \n    # Extract elements from the heap one by one\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap root (max element) with last element\n        heapify(arr, i, 0)  # Heapify the reduced heap\n    \n    return arr\n\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # Check if left child of root exists and is greater than the root\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n    \n    # Check if right child of root exists and is greater than the root\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n    \n    # Change root, if needed\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # Swap\n        heapify(arr, n, largest)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += nums[i] ^ nums[j]\n    return xor_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["AbCdE", "fGH", "IJKLMnOp", "qrs", "TUVW", "xyz"]]]}], "Mbpp/640": [{"task_id": "Mbpp/640", "solution": "import re\n\ndef remove_parenthesis(strings):\n    result = []\n    for string in strings:\n        result.append(re.sub(r'\\(.*?\\)', '', string))\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "def match_wordz_middle(word):\n    if len(word) < 3:\n        return False\n    else:\n        for i in range(1, len(word)-1):\n            if word[i] == 'z':\n                return True\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(velocity, temperature):\n    if velocity <= 4.8 or temperature >= 10:\n        return temperature\n    wind_chill_index = 13.12 + (0.6215 * temperature) - (11.37 * (velocity ** 0.16)) + (0.3965 * temperature * (velocity ** 0.16))\n    return math.ceil(wind_chill_index)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "def nth_nonagonal(n):\n    return (5 * n ** 2 - 3 * n) // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "def dict_to_tuple(tup, d):\n    new_tuple = tup + (d,)\n    return new_tuple", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "def filter_data(student_data, min_height, min_weight):\n    filtered_students = {}\n    for student, (height, weight) in student_data.items():\n        if height >= min_height and weight >= min_weight:\n            filtered_students[student] = (height, weight)\n    return filtered_students", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    first_bit = num & 1\n    last_bit = num & (1 << (len(bin(num))-3))\n    middle_bits = num & ((1 << (len(bin(num))-3)) - 2)\n    toggled_middle_bits = middle_bits ^ ((1 << (len(bin(num))-3)) - 2)\n    return (first_bit << (len(bin(num))-1)) + toggled_middle_bits + last_bit", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "def sum_of_subarray_prod(arr):\n    result = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j + 1):\n                prod *= arr[k]\n            result += prod\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "def extract_quotation(string):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, string)\n    return matches", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "import re\n\ndef replace_specialchar(text):\n    # Using regular expression to replace spaces, commas, or dots with colon\n    return re.sub(r'[ ,.]', ':', text)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    d = {}\n    for i in range(0, len(t), 2):\n        if i + 1 < len(t):\n            d[t[i]] = t[i+1]\n    return d", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    result = []\n    for item in lst:\n        if not result or item != result[-1]:\n            result.append(item)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "def multiply_elements(tup):\n    result = ()\n    for i in range(len(tup) - 1):\n        result += (tup[i] * tup[i + 1],)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Move towards left to find the first occurrence\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "def lateralsurface_cone(r, h):\n    import math\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, target):\n    left, right = 0, len(arr)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "def check_none(tuple):\n    for value in tuple:\n        if value is None:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    reverse_pairs = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                reverse_pairs += 1\n    return reverse_pairs", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = ''\n    for char in s:\n        if char.isupper():\n            result += ' ' + char\n        else:\n            result += char\n    # Remove leading space if it exists\n    return result.lstrip() if result else result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU].*'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n\n    # Check if each parent node is smaller than its children\n    for i in range(n // 2):\n        # Left child\n        if 2 * i + 1 < n and arr[i] > arr[2 * i + 1]:\n            return False\n        # Right child\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    \n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) * a**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/746": [{"task_id": "Mbpp/746", "solution": "def sector_area(radius, angle):\n    if angle > 360:\n        return None\n    area = (angle/360) * math.pi * (radius**2)\n    return area", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "def combine_tuples(test_list, tup):\n    return test_list + list(tup)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "def rotate_right(arr, k):\n    n = len(arr)\n    # Calculate the effective rotation index\n    k = k % n\n    # Rotate the list using slicing and concatenation\n    rotated_arr = arr[-k:] + arr[:-k]\n    return rotated_arr", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    lst = [int(x) for x in lst]\n    lst.sort()\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    # Check if all characters in the string are the same\n    return all(char == s[0] for char in s)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    \n    # Initialize a 2D array to store maximum average up to each cell\n    max_avg = [[0] * n for _ in range(n)]\n    \n    # Calculate maximum average for each cell\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                max_avg[i][j] = matrix[i][j]\n            elif i == 0:\n                max_avg[i][j] = (max_avg[i][j - 1] * j + matrix[i][j]) / (j + 1)\n            elif j == 0:\n                max_avg[i][j] = (max_avg[i - 1][j] * i + matrix[i][j]) / (i + 1)\n            else:\n                max_avg[i][j] = max((max_avg[i][j - 1] * j + matrix[i][j]) / (j + 1),\n                                    (max_avg[i - 1][j] * i + matrix[i][j]) / (i + 1))\n    \n    # Return the maximum average for the bottom-right cell\n    return max_avg[n - 1][n - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[0, 0, 0], [0, 0, 0], [0, 0, -1]]]]}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    # Check if the string has a valid format for a decimal number\n    if not string.replace('.', '', 1).isdigit():\n        return False\n    \n    # Split the string by the decimal point\n    parts = string.split('.')\n    \n    # Check if there are two parts: the whole number and the decimal part\n    if len(parts) != 2:\n        return False\n    \n    # Check if both parts contain only digits\n    if not parts[0].isdigit() or not parts[1].isdigit():\n        return False\n    \n    # Check if the decimal part has a precision of 2\n    if len(parts[1]) != 2:\n        return False\n    \n    # If all checks passed, the string is a decimal number with a precision of 2\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["123"]]}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 2]]], "plus_fail_tests": [[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]]}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        counts[sublist_tuple] = counts.get(sublist_tuple, 0) + 1\n    return counts", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "def min_k(tuple_list, k):\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])[:k]\n    return sorted_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for _ in range(n-2):\n            a, b = b, b*2 + a\n        return b", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    thirty_days_months = {4, 6, 9, 11}  # Months with 30 days\n    return month in thirty_days_months", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize minimum difference\n    min_diff = float('inf')\n    \n    # Compare adjacent elements and update min_diff\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < min_diff:\n            min_diff = arr[i + 1] - arr[i]\n    \n    return min_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "code = '''\ndef number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n'''", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(digit != 0 and num % digit == 0 for digit in digits):\n            result.append(num)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst) - 1)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, target_sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    odd_sum = 0\n    for i in range(1, 2*n+1, 2):\n        odd_sum += i**4\n    return odd_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    diff = []\n    for element in list1:\n        if element not in list2:\n            diff.append(element)\n    for element in list2:\n        if element not in list1 and element not in diff:\n            diff.append(element)\n    return diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10]]]}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "def ve_length(string, k):\n    words = string.split()\n    new_words = []\n    for word in words:\n        if len(word) != k:\n            new_words.append(word)\n    new_string = ' '.join(new_words)\n    return new_string", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    # Define opening and closing brackets\n    opening_brackets = {'(', '[', '{'}\n    closing_brackets = {')', ']', '}'}\n    # Define matching pairs\n    matching_pairs = {('(', ')'), ('[', ']'), ('{', '}')}\n    \n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False  # Unbalanced expression: Closing bracket without a corresponding opening bracket\n            top = stack.pop()\n            if (top, char) not in matching_pairs:\n                return False  # Unbalanced expression: Mismatched opening and closing brackets\n    # After iterating through the expression, if there are remaining elements in the stack, it's unbalanced\n    return len(stack) == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product_even = 1\n    product_odd = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            product_even *= num\n            if even_count == 1:\n                break\n        else:\n            odd_count += 1\n            product_odd *= num\n            if odd_count == 1:\n                break\n                \n    return product_even * product_odd", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):  # Loop through odd indices\n        if lst[i] % 2 == 0:  # Check if the number at odd index is even\n            return False  # Return False if an even number is found\n    return True  # Return True if all odd indices contain odd numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "def occurrence_substring(string, substring):\n    if substring not in string:\n        return None\n    \n    start = string.find(substring)\n    end = start + len(substring)\n    \n    return (substring, start, end)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove parentheses and split the string by commas\n    elements = tuple_str.strip(\"()\").split(',')\n    \n    # Convert each element to an integer and create a tuple\n    int_tuple = tuple(int(element.strip()) for element in elements)\n    \n    return int_tuple", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "import re\n\ndef _match_three(string):\n    pattern = \"abbb\"\n    if re.search(pattern, string):\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "def find_combinations(lst):\n    import itertools\n    combinations = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sum_tuple = tuple(map(sum, itertools.zip_longest(lst[i], lst[j], fillvalue=0)))\n            combinations.append(sum_tuple)\n    return combinations", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    packed_list = []\n    sublist = []\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i - 1]:\n            if sublist:\n                packed_list.append(sublist)\n                sublist = []\n        sublist.append(lst[i])\n\n    if sublist:\n        packed_list.append(sublist)\n\n    return packed_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Calculate the sum of non-repeated elements\n    sum_non_repeated = 0\n    for num, freq in frequency.items():\n        if freq == 1:\n            sum_non_repeated += num\n    \n    return sum_non_repeated", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n            \n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # 32-bit mask\n    mask = 0xFFFFFFFF\n    # Bitwise left rotation\n    return ((n << d) | (n >> (32 - d))) & mask", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, target):\n    if not arr:\n        return 0\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] <= target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, -90.20293226837086, -12.02758648076636, -35.964731488229475], false]]}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    # Iterate over even indices\n    for i in range(0, len(lst), 2):\n        # Check if the number at even index is even\n        if lst[i] % 2 != 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    count = 0\n    for sublist in lst:\n        if isinstance(sublist, list):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == len(arr) - 1 or arr[mid+1] != target:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    # Initialize a variable to store the sum\n    sum = 0\n    \n    # Iterate through each key-value pair in the dictionary\n    for key, value in dictionary.items():\n        # Add the value to the sum\n        sum += value\n        \n    # Return the sum\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    if num < 0:\n        return False\n    sqrt_num = int(num ** 0.5)\n    return sqrt_num ** 2 == num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/783": [{"task_id": "Mbpp/783", "solution": "import colorsys\n\ndef rgb_to_hsv(red, green, blue):\n    red = red / 255.0\n    green = green / 255.0\n    blue = blue / 255.0\n    \n    hsv = colorsys.rgb_to_hsv(red, green, blue)\n    \n    hue = round(hsv[0] * 360, 2)\n    saturation = round(hsv[1] * 100, 2)\n    value = round(hsv[2] * 100, 2)\n    \n    return (hue, saturation, value)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[0, 215, 0]], "plus_fail_tests": [[0, 0, 1]]}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Function to find the sum of an array.\n\n    Parameters:\n    arr (list): The input list of numbers.\n\n    Returns:\n    int: The sum of the numbers in the input list.\n    \"\"\"\n    return sum(arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst + [string])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(string):\n    pattern = r'^a.+b$'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["ab"]]}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "def count_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count\n\ndef test_three_equal(a, b, c):\n    count = count_equal(a, b, c)\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 2, 2]], "plus_fail_tests": [[10, 10, 20]]}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "def sum_list(list_of_lists):\n    max_sum = 0\n    max_list = []\n\n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    return max_list", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    if k in tup:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "def k_smaller(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    result = tuple(item for item in input_tuple if not isinstance(item, tuple))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "def ve_all_spaces(string):\n    return string.replace(\" \", \"\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            total += num\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = [[x+i, y+j] for i in range(-1, 2) for j in range(-1, 2)]\n    adjacent_coords.remove(coord)  # Remove the given coordinate itself\n    return adjacent_coords", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    index = 1\n    while True:\n        triangular_num = index * (index + 1) // 2\n        digits = int(math.log10(triangular_num)) + 1\n        if digits >= n:\n            return index\n        index += 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "import itertools\n\ndef combinations_colors(lst, n):\n    combinations = list(itertools.product(lst, repeat=n))\n    return combinations", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Blue"], 2]], "plus_fail_tests": [[["A", "B", "C", "D"], 4]]}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    count = 0\n    num = 1\n    \n    while count < n:\n        num += 1\n        divisors = 0\n        \n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors += 1\n        \n        if divisors % 2 == 0:\n            count += 1\n            \n    return num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[987654321]]}]}}